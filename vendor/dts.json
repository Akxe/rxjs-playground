{"node_modules/@octokit/auth-token/package.json":"{\n  \"name\": \"@octokit/auth-token\",\n  \"description\": \"GitHub API token authentication for browsers and Node.js\",\n  \"version\": \"2.4.5\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"github\",\n    \"octokit\",\n    \"authentication\",\n    \"api\"\n  ],\n  \"homepage\": \"https://github.com/octokit/auth-token.js#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/octokit/auth-token.js/issues\"\n  },\n  \"repository\": \"https://github.com/octokit/auth-token.js\",\n  \"dependencies\": {\n    \"@octokit/types\": \"^6.0.3\"\n  },\n  \"devDependencies\": {\n    \"@octokit/core\": \"^3.0.0\",\n    \"@octokit/request\": \"^5.3.0\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/fetch-mock\": \"^7.3.1\",\n    \"@types/jest\": \"^26.0.0\",\n    \"fetch-mock\": \"^9.0.0\",\n    \"jest\": \"^26.0.0\",\n    \"semantic-release\": \"^17.0.0\",\n    \"ts-jest\": \"^26.0.0\",\n    \"typescript\": \"^4.0.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/auth-token/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nasync function auth(token) {\n  const tokenType = token.split(/\\./).length === 3 ? \"app\" : /^v\\d+\\./.test(token) ? \"installation\" : \"oauth\";\n  return {\n    type: \"token\",\n    token: token,\n    tokenType\n  };\n}\n\n/**\n * Prefix token for usage in the Authorization header\n *\n * @param token OAuth token or JSON Web Token\n */\nfunction withAuthorizationPrefix(token) {\n  if (token.split(/\\./).length === 3) {\n    return `bearer ${token}`;\n  }\n\n  return `token ${token}`;\n}\n\nasync function hook(token, request, route, parameters) {\n  const endpoint = request.endpoint.merge(route, parameters);\n  endpoint.headers.authorization = withAuthorizationPrefix(token);\n  return request(endpoint);\n}\n\nconst createTokenAuth = function createTokenAuth(token) {\n  if (!token) {\n    throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n  }\n\n  if (typeof token !== \"string\") {\n    throw new Error(\"[@octokit/auth-token] Token passed to createTokenAuth is not a string\");\n  }\n\n  token = token.replace(/^(token|bearer) +/i, \"\");\n  return Object.assign(auth.bind(null, token), {\n    hook: hook.bind(null, token)\n  });\n};\n\nexports.createTokenAuth = createTokenAuth;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/auth-token/dist-src/auth.js":"export async function auth(token) {\n    const tokenType = token.split(/\\./).length === 3\n        ? \"app\"\n        : /^v\\d+\\./.test(token)\n            ? \"installation\"\n            : \"oauth\";\n    return {\n        type: \"token\",\n        token: token,\n        tokenType\n    };\n}\n","node_modules/@octokit/auth-token/dist-src/hook.js":"import { withAuthorizationPrefix } from \"./with-authorization-prefix\";\nexport async function hook(token, request, route, parameters) {\n    const endpoint = request.endpoint.merge(route, parameters);\n    endpoint.headers.authorization = withAuthorizationPrefix(token);\n    return request(endpoint);\n}\n","node_modules/@octokit/auth-token/dist-src/index.js":"import { auth } from \"./auth\";\nimport { hook } from \"./hook\";\nexport const createTokenAuth = function createTokenAuth(token) {\n    if (!token) {\n        throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n    }\n    if (typeof token !== \"string\") {\n        throw new Error(\"[@octokit/auth-token] Token passed to createTokenAuth is not a string\");\n    }\n    token = token.replace(/^(token|bearer) +/i, \"\");\n    return Object.assign(auth.bind(null, token), {\n        hook: hook.bind(null, token)\n    });\n};\n","node_modules/@octokit/auth-token/dist-src/types.js":"export {};\n","node_modules/@octokit/auth-token/dist-src/with-authorization-prefix.js":"/**\n * Prefix token for usage in the Authorization header\n *\n * @param token OAuth token or JSON Web Token\n */\nexport function withAuthorizationPrefix(token) {\n    if (token.split(/\\./).length === 3) {\n        return `bearer ${token}`;\n    }\n    return `token ${token}`;\n}\n","node_modules/@octokit/auth-token/dist-types/auth.d.ts":"import { Token, Authentication } from \"./types\";\nexport declare function auth(token: Token): Promise<Authentication>;\n","node_modules/@octokit/auth-token/dist-types/hook.d.ts":"import { AnyResponse, EndpointOptions, RequestInterface, RequestParameters, Route, Token } from \"./types\";\nexport declare function hook(token: Token, request: RequestInterface, route: Route | EndpointOptions, parameters?: RequestParameters): Promise<AnyResponse>;\n","node_modules/@octokit/auth-token/dist-types/index.d.ts":"import { StrategyInterface, Token, Authentication } from \"./types\";\nexport declare type Types = {\n    StrategyOptions: Token;\n    AuthOptions: never;\n    Authentication: Authentication;\n};\nexport declare const createTokenAuth: StrategyInterface;\n","node_modules/@octokit/auth-token/dist-types/types.d.ts":"import * as OctokitTypes from \"@octokit/types\";\nexport declare type AnyResponse = OctokitTypes.OctokitResponse<any>;\nexport declare type StrategyInterface = OctokitTypes.StrategyInterface<[\n    Token\n], [\n], Authentication>;\nexport declare type EndpointDefaults = OctokitTypes.EndpointDefaults;\nexport declare type EndpointOptions = OctokitTypes.EndpointOptions;\nexport declare type RequestParameters = OctokitTypes.RequestParameters;\nexport declare type RequestInterface = OctokitTypes.RequestInterface;\nexport declare type Route = OctokitTypes.Route;\nexport declare type Token = string;\nexport declare type OAuthTokenAuthentication = {\n    type: \"token\";\n    tokenType: \"oauth\";\n    token: Token;\n};\nexport declare type InstallationTokenAuthentication = {\n    type: \"token\";\n    tokenType: \"installation\";\n    token: Token;\n};\nexport declare type AppAuthentication = {\n    type: \"token\";\n    tokenType: \"app\";\n    token: Token;\n};\nexport declare type Authentication = OAuthTokenAuthentication | InstallationTokenAuthentication | AppAuthentication;\n","node_modules/@octokit/auth-token/dist-types/with-authorization-prefix.d.ts":"/**\n * Prefix token for usage in the Authorization header\n *\n * @param token OAuth token or JSON Web Token\n */\nexport declare function withAuthorizationPrefix(token: string): string;\n","node_modules/@octokit/auth-token/dist-web/index.js":"async function auth(token) {\n    const tokenType = token.split(/\\./).length === 3\n        ? \"app\"\n        : /^v\\d+\\./.test(token)\n            ? \"installation\"\n            : \"oauth\";\n    return {\n        type: \"token\",\n        token: token,\n        tokenType\n    };\n}\n\n/**\n * Prefix token for usage in the Authorization header\n *\n * @param token OAuth token or JSON Web Token\n */\nfunction withAuthorizationPrefix(token) {\n    if (token.split(/\\./).length === 3) {\n        return `bearer ${token}`;\n    }\n    return `token ${token}`;\n}\n\nasync function hook(token, request, route, parameters) {\n    const endpoint = request.endpoint.merge(route, parameters);\n    endpoint.headers.authorization = withAuthorizationPrefix(token);\n    return request(endpoint);\n}\n\nconst createTokenAuth = function createTokenAuth(token) {\n    if (!token) {\n        throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n    }\n    if (typeof token !== \"string\") {\n        throw new Error(\"[@octokit/auth-token] Token passed to createTokenAuth is not a string\");\n    }\n    token = token.replace(/^(token|bearer) +/i, \"\");\n    return Object.assign(auth.bind(null, token), {\n        hook: hook.bind(null, token)\n    });\n};\n\nexport { createTokenAuth };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/core/package.json":"{\n  \"name\": \"@octokit/core\",\n  \"description\": \"Extendable client for GitHub's REST & GraphQL APIs\",\n  \"version\": \"3.2.5\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"octokit\",\n    \"github\",\n    \"api\",\n    \"sdk\",\n    \"toolkit\"\n  ],\n  \"repository\": \"https://github.com/octokit/core.js\",\n  \"dependencies\": {\n    \"@octokit/auth-token\": \"^2.4.4\",\n    \"@octokit/graphql\": \"^4.5.8\",\n    \"@octokit/request\": \"^5.4.12\",\n    \"@octokit/types\": \"^6.0.3\",\n    \"before-after-hook\": \"^2.1.0\",\n    \"universal-user-agent\": \"^6.0.0\"\n  },\n  \"devDependencies\": {\n    \"@octokit/auth\": \"^3.0.1\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/fetch-mock\": \"^7.3.1\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/lolex\": \"^5.1.0\",\n    \"@types/node\": \"^14.0.4\",\n    \"@types/node-fetch\": \"^2.5.0\",\n    \"fetch-mock\": \"^9.0.0\",\n    \"http-proxy-agent\": \"^4.0.1\",\n    \"jest\": \"^26.1.0\",\n    \"lolex\": \"^6.0.0\",\n    \"prettier\": \"^2.0.4\",\n    \"proxy\": \"^1.0.1\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"ts-jest\": \"^26.1.3\",\n    \"typescript\": \"^4.0.2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/core/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar universalUserAgent = require('universal-user-agent');\nvar beforeAfterHook = require('before-after-hook');\nvar request = require('@octokit/request');\nvar graphql = require('@octokit/graphql');\nvar authToken = require('@octokit/auth-token');\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nconst VERSION = \"3.2.5\";\n\nclass Octokit {\n  constructor(options = {}) {\n    const hook = new beforeAfterHook.Collection();\n    const requestDefaults = {\n      baseUrl: request.request.endpoint.DEFAULTS.baseUrl,\n      headers: {},\n      request: Object.assign({}, options.request, {\n        hook: hook.bind(null, \"request\")\n      }),\n      mediaType: {\n        previews: [],\n        format: \"\"\n      }\n    }; // prepend default user agent with `options.userAgent` if set\n\n    requestDefaults.headers[\"user-agent\"] = [options.userAgent, `octokit-core.js/${VERSION} ${universalUserAgent.getUserAgent()}`].filter(Boolean).join(\" \");\n\n    if (options.baseUrl) {\n      requestDefaults.baseUrl = options.baseUrl;\n    }\n\n    if (options.previews) {\n      requestDefaults.mediaType.previews = options.previews;\n    }\n\n    if (options.timeZone) {\n      requestDefaults.headers[\"time-zone\"] = options.timeZone;\n    }\n\n    this.request = request.request.defaults(requestDefaults);\n    this.graphql = graphql.withCustomRequest(this.request).defaults(requestDefaults);\n    this.log = Object.assign({\n      debug: () => {},\n      info: () => {},\n      warn: console.warn.bind(console),\n      error: console.error.bind(console)\n    }, options.log);\n    this.hook = hook; // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n    //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n    // (2) If only `options.auth` is set, use the default token authentication strategy.\n    // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n    // TODO: type `options.auth` based on `options.authStrategy`.\n\n    if (!options.authStrategy) {\n      if (!options.auth) {\n        // (1)\n        this.auth = async () => ({\n          type: \"unauthenticated\"\n        });\n      } else {\n        // (2)\n        const auth = authToken.createTokenAuth(options.auth); // @ts-ignore  ¯\\_(ツ)_/¯\n\n        hook.wrap(\"request\", auth.hook);\n        this.auth = auth;\n      }\n    } else {\n      const {\n        authStrategy\n      } = options,\n            otherOptions = _objectWithoutProperties(options, [\"authStrategy\"]);\n\n      const auth = authStrategy(Object.assign({\n        request: this.request,\n        log: this.log,\n        // we pass the current octokit instance as well as its constructor options\n        // to allow for authentication strategies that return a new octokit instance\n        // that shares the same internal state as the current one. The original\n        // requirement for this was the \"event-octokit\" authentication strategy\n        // of https://github.com/probot/octokit-auth-probot.\n        octokit: this,\n        octokitOptions: otherOptions\n      }, options.auth)); // @ts-ignore  ¯\\_(ツ)_/¯\n\n      hook.wrap(\"request\", auth.hook);\n      this.auth = auth;\n    } // apply plugins\n    // https://stackoverflow.com/a/16345172\n\n\n    const classConstructor = this.constructor;\n    classConstructor.plugins.forEach(plugin => {\n      Object.assign(this, plugin(this, options));\n    });\n  }\n\n  static defaults(defaults) {\n    const OctokitWithDefaults = class extends this {\n      constructor(...args) {\n        const options = args[0] || {};\n\n        if (typeof defaults === \"function\") {\n          super(defaults(options));\n          return;\n        }\n\n        super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {\n          userAgent: `${options.userAgent} ${defaults.userAgent}`\n        } : null));\n      }\n\n    };\n    return OctokitWithDefaults;\n  }\n  /**\n   * Attach a plugin (or many) to your Octokit instance.\n   *\n   * @example\n   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n   */\n\n\n  static plugin(...newPlugins) {\n    var _a;\n\n    const currentPlugins = this.plugins;\n    const NewOctokit = (_a = class extends this {}, _a.plugins = currentPlugins.concat(newPlugins.filter(plugin => !currentPlugins.includes(plugin))), _a);\n    return NewOctokit;\n  }\n\n}\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\n\nexports.Octokit = Octokit;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/core/dist-src/index.js":"import { getUserAgent } from \"universal-user-agent\";\nimport { Collection } from \"before-after-hook\";\nimport { request } from \"@octokit/request\";\nimport { withCustomRequest } from \"@octokit/graphql\";\nimport { createTokenAuth } from \"@octokit/auth-token\";\nimport { VERSION } from \"./version\";\nexport class Octokit {\n    constructor(options = {}) {\n        const hook = new Collection();\n        const requestDefaults = {\n            baseUrl: request.endpoint.DEFAULTS.baseUrl,\n            headers: {},\n            request: Object.assign({}, options.request, {\n                hook: hook.bind(null, \"request\"),\n            }),\n            mediaType: {\n                previews: [],\n                format: \"\",\n            },\n        };\n        // prepend default user agent with `options.userAgent` if set\n        requestDefaults.headers[\"user-agent\"] = [\n            options.userAgent,\n            `octokit-core.js/${VERSION} ${getUserAgent()}`,\n        ]\n            .filter(Boolean)\n            .join(\" \");\n        if (options.baseUrl) {\n            requestDefaults.baseUrl = options.baseUrl;\n        }\n        if (options.previews) {\n            requestDefaults.mediaType.previews = options.previews;\n        }\n        if (options.timeZone) {\n            requestDefaults.headers[\"time-zone\"] = options.timeZone;\n        }\n        this.request = request.defaults(requestDefaults);\n        this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n        this.log = Object.assign({\n            debug: () => { },\n            info: () => { },\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n        }, options.log);\n        this.hook = hook;\n        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n        // (2) If only `options.auth` is set, use the default token authentication strategy.\n        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n        // TODO: type `options.auth` based on `options.authStrategy`.\n        if (!options.authStrategy) {\n            if (!options.auth) {\n                // (1)\n                this.auth = async () => ({\n                    type: \"unauthenticated\",\n                });\n            }\n            else {\n                // (2)\n                const auth = createTokenAuth(options.auth);\n                // @ts-ignore  ¯\\_(ツ)_/¯\n                hook.wrap(\"request\", auth.hook);\n                this.auth = auth;\n            }\n        }\n        else {\n            const { authStrategy, ...otherOptions } = options;\n            const auth = authStrategy(Object.assign({\n                request: this.request,\n                log: this.log,\n                // we pass the current octokit instance as well as its constructor options\n                // to allow for authentication strategies that return a new octokit instance\n                // that shares the same internal state as the current one. The original\n                // requirement for this was the \"event-octokit\" authentication strategy\n                // of https://github.com/probot/octokit-auth-probot.\n                octokit: this,\n                octokitOptions: otherOptions,\n            }, options.auth));\n            // @ts-ignore  ¯\\_(ツ)_/¯\n            hook.wrap(\"request\", auth.hook);\n            this.auth = auth;\n        }\n        // apply plugins\n        // https://stackoverflow.com/a/16345172\n        const classConstructor = this.constructor;\n        classConstructor.plugins.forEach((plugin) => {\n            Object.assign(this, plugin(this, options));\n        });\n    }\n    static defaults(defaults) {\n        const OctokitWithDefaults = class extends this {\n            constructor(...args) {\n                const options = args[0] || {};\n                if (typeof defaults === \"function\") {\n                    super(defaults(options));\n                    return;\n                }\n                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent\n                    ? {\n                        userAgent: `${options.userAgent} ${defaults.userAgent}`,\n                    }\n                    : null));\n            }\n        };\n        return OctokitWithDefaults;\n    }\n    /**\n     * Attach a plugin (or many) to your Octokit instance.\n     *\n     * @example\n     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n     */\n    static plugin(...newPlugins) {\n        var _a;\n        const currentPlugins = this.plugins;\n        const NewOctokit = (_a = class extends this {\n            },\n            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),\n            _a);\n        return NewOctokit;\n    }\n}\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\n","node_modules/@octokit/core/dist-src/types.js":"export {};\n","node_modules/@octokit/core/dist-src/version.js":"export const VERSION = \"3.2.5\";\n","node_modules/@octokit/core/dist-types/index.d.ts":"import { HookCollection } from \"before-after-hook\";\nimport { request } from \"@octokit/request\";\nimport { graphql } from \"@octokit/graphql\";\nimport { Constructor, OctokitOptions, OctokitPlugin, ReturnTypeOf, UnionToIntersection } from \"./types\";\nexport declare class Octokit {\n    static VERSION: string;\n    static defaults<S extends Constructor<any>>(this: S, defaults: OctokitOptions | Function): {\n        new (...args: any[]): {\n            [x: string]: any;\n        };\n    } & S;\n    static plugins: OctokitPlugin[];\n    /**\n     * Attach a plugin (or many) to your Octokit instance.\n     *\n     * @example\n     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n     */\n    static plugin<S extends Constructor<any> & {\n        plugins: any[];\n    }, T extends OctokitPlugin[]>(this: S, ...newPlugins: T): {\n        new (...args: any[]): {\n            [x: string]: any;\n        };\n        plugins: any[];\n    } & S & Constructor<UnionToIntersection<ReturnTypeOf<T>>>;\n    constructor(options?: OctokitOptions);\n    request: typeof request;\n    graphql: typeof graphql;\n    log: {\n        debug: (message: string, additionalInfo?: object) => any;\n        info: (message: string, additionalInfo?: object) => any;\n        warn: (message: string, additionalInfo?: object) => any;\n        error: (message: string, additionalInfo?: object) => any;\n        [key: string]: any;\n    };\n    hook: HookCollection;\n    auth: (...args: unknown[]) => Promise<unknown>;\n    [key: string]: any;\n}\n","node_modules/@octokit/core/dist-types/types.d.ts":"import * as OctokitTypes from \"@octokit/types\";\nimport { Octokit } from \".\";\nexport declare type RequestParameters = OctokitTypes.RequestParameters;\nexport declare type OctokitOptions = {\n    authStrategy?: any;\n    auth?: any;\n    userAgent?: string;\n    previews?: string[];\n    baseUrl?: string;\n    log?: {\n        debug: (message: string) => unknown;\n        info: (message: string) => unknown;\n        warn: (message: string) => unknown;\n        error: (message: string) => unknown;\n    };\n    request?: OctokitTypes.RequestRequestOptions;\n    timeZone?: string;\n    [option: string]: any;\n};\nexport declare type Constructor<T> = new (...args: any[]) => T;\nexport declare type ReturnTypeOf<T extends AnyFunction | AnyFunction[]> = T extends AnyFunction ? ReturnType<T> : T extends AnyFunction[] ? UnionToIntersection<ReturnType<T[number]>> : never;\n/**\n * @author https://stackoverflow.com/users/2887218/jcalz\n * @see https://stackoverflow.com/a/50375286/10325032\n */\nexport declare type UnionToIntersection<Union> = (Union extends any ? (argument: Union) => void : never) extends (argument: infer Intersection) => void ? Intersection : never;\ndeclare type AnyFunction = (...args: any) => any;\nexport declare type OctokitPlugin = (octokit: Octokit, options: OctokitOptions) => {\n    [key: string]: any;\n} | void;\nexport {};\n","node_modules/@octokit/core/dist-types/version.d.ts":"export declare const VERSION = \"3.2.5\";\n","node_modules/@octokit/core/dist-web/index.js":"import { getUserAgent } from 'universal-user-agent';\nimport { Collection } from 'before-after-hook';\nimport { request } from '@octokit/request';\nimport { withCustomRequest } from '@octokit/graphql';\nimport { createTokenAuth } from '@octokit/auth-token';\n\nconst VERSION = \"3.2.5\";\n\nclass Octokit {\n    constructor(options = {}) {\n        const hook = new Collection();\n        const requestDefaults = {\n            baseUrl: request.endpoint.DEFAULTS.baseUrl,\n            headers: {},\n            request: Object.assign({}, options.request, {\n                hook: hook.bind(null, \"request\"),\n            }),\n            mediaType: {\n                previews: [],\n                format: \"\",\n            },\n        };\n        // prepend default user agent with `options.userAgent` if set\n        requestDefaults.headers[\"user-agent\"] = [\n            options.userAgent,\n            `octokit-core.js/${VERSION} ${getUserAgent()}`,\n        ]\n            .filter(Boolean)\n            .join(\" \");\n        if (options.baseUrl) {\n            requestDefaults.baseUrl = options.baseUrl;\n        }\n        if (options.previews) {\n            requestDefaults.mediaType.previews = options.previews;\n        }\n        if (options.timeZone) {\n            requestDefaults.headers[\"time-zone\"] = options.timeZone;\n        }\n        this.request = request.defaults(requestDefaults);\n        this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n        this.log = Object.assign({\n            debug: () => { },\n            info: () => { },\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n        }, options.log);\n        this.hook = hook;\n        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n        // (2) If only `options.auth` is set, use the default token authentication strategy.\n        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n        // TODO: type `options.auth` based on `options.authStrategy`.\n        if (!options.authStrategy) {\n            if (!options.auth) {\n                // (1)\n                this.auth = async () => ({\n                    type: \"unauthenticated\",\n                });\n            }\n            else {\n                // (2)\n                const auth = createTokenAuth(options.auth);\n                // @ts-ignore  ¯\\_(ツ)_/¯\n                hook.wrap(\"request\", auth.hook);\n                this.auth = auth;\n            }\n        }\n        else {\n            const { authStrategy, ...otherOptions } = options;\n            const auth = authStrategy(Object.assign({\n                request: this.request,\n                log: this.log,\n                // we pass the current octokit instance as well as its constructor options\n                // to allow for authentication strategies that return a new octokit instance\n                // that shares the same internal state as the current one. The original\n                // requirement for this was the \"event-octokit\" authentication strategy\n                // of https://github.com/probot/octokit-auth-probot.\n                octokit: this,\n                octokitOptions: otherOptions,\n            }, options.auth));\n            // @ts-ignore  ¯\\_(ツ)_/¯\n            hook.wrap(\"request\", auth.hook);\n            this.auth = auth;\n        }\n        // apply plugins\n        // https://stackoverflow.com/a/16345172\n        const classConstructor = this.constructor;\n        classConstructor.plugins.forEach((plugin) => {\n            Object.assign(this, plugin(this, options));\n        });\n    }\n    static defaults(defaults) {\n        const OctokitWithDefaults = class extends this {\n            constructor(...args) {\n                const options = args[0] || {};\n                if (typeof defaults === \"function\") {\n                    super(defaults(options));\n                    return;\n                }\n                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent\n                    ? {\n                        userAgent: `${options.userAgent} ${defaults.userAgent}`,\n                    }\n                    : null));\n            }\n        };\n        return OctokitWithDefaults;\n    }\n    /**\n     * Attach a plugin (or many) to your Octokit instance.\n     *\n     * @example\n     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n     */\n    static plugin(...newPlugins) {\n        var _a;\n        const currentPlugins = this.plugins;\n        const NewOctokit = (_a = class extends this {\n            },\n            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),\n            _a);\n        return NewOctokit;\n    }\n}\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\n\nexport { Octokit };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/endpoint/package.json":"{\n  \"name\": \"@octokit/endpoint\",\n  \"description\": \"Turns REST API endpoints into generic request options\",\n  \"version\": \"6.0.11\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"octokit\",\n    \"github\",\n    \"api\",\n    \"rest\"\n  ],\n  \"homepage\": \"https://github.com/octokit/endpoint.js#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/octokit/endpoint.js/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/octokit/endpoint.js.git\"\n  },\n  \"dependencies\": {\n    \"@octokit/types\": \"^6.0.3\",\n    \"is-plain-object\": \"^5.0.0\",\n    \"universal-user-agent\": \"^6.0.0\"\n  },\n  \"devDependencies\": {\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/jest\": \"^26.0.0\",\n    \"jest\": \"^26.0.1\",\n    \"prettier\": \"2.2.1\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"ts-jest\": \"^26.0.0\",\n    \"typescript\": \"^4.0.2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/endpoint/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isPlainObject = require('is-plain-object');\nvar universalUserAgent = require('universal-user-agent');\n\nfunction lowercaseKeys(object) {\n  if (!object) {\n    return {};\n  }\n\n  return Object.keys(object).reduce((newObj, key) => {\n    newObj[key.toLowerCase()] = object[key];\n    return newObj;\n  }, {});\n}\n\nfunction mergeDeep(defaults, options) {\n  const result = Object.assign({}, defaults);\n  Object.keys(options).forEach(key => {\n    if (isPlainObject.isPlainObject(options[key])) {\n      if (!(key in defaults)) Object.assign(result, {\n        [key]: options[key]\n      });else result[key] = mergeDeep(defaults[key], options[key]);\n    } else {\n      Object.assign(result, {\n        [key]: options[key]\n      });\n    }\n  });\n  return result;\n}\n\nfunction removeUndefinedProperties(obj) {\n  for (const key in obj) {\n    if (obj[key] === undefined) {\n      delete obj[key];\n    }\n  }\n\n  return obj;\n}\n\nfunction merge(defaults, route, options) {\n  if (typeof route === \"string\") {\n    let [method, url] = route.split(\" \");\n    options = Object.assign(url ? {\n      method,\n      url\n    } : {\n      url: method\n    }, options);\n  } else {\n    options = Object.assign({}, route);\n  } // lowercase header names before merging with defaults to avoid duplicates\n\n\n  options.headers = lowercaseKeys(options.headers); // remove properties with undefined values before merging\n\n  removeUndefinedProperties(options);\n  removeUndefinedProperties(options.headers);\n  const mergedOptions = mergeDeep(defaults || {}, options); // mediaType.previews arrays are merged, instead of overwritten\n\n  if (defaults && defaults.mediaType.previews.length) {\n    mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(preview => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);\n  }\n\n  mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map(preview => preview.replace(/-preview/, \"\"));\n  return mergedOptions;\n}\n\nfunction addQueryParameters(url, parameters) {\n  const separator = /\\?/.test(url) ? \"&\" : \"?\";\n  const names = Object.keys(parameters);\n\n  if (names.length === 0) {\n    return url;\n  }\n\n  return url + separator + names.map(name => {\n    if (name === \"q\") {\n      return \"q=\" + parameters.q.split(\"+\").map(encodeURIComponent).join(\"+\");\n    }\n\n    return `${name}=${encodeURIComponent(parameters[name])}`;\n  }).join(\"&\");\n}\n\nconst urlVariableRegex = /\\{[^}]+\\}/g;\n\nfunction removeNonChars(variableName) {\n  return variableName.replace(/^\\W+|\\W+$/g, \"\").split(/,/);\n}\n\nfunction extractUrlVariableNames(url) {\n  const matches = url.match(urlVariableRegex);\n\n  if (!matches) {\n    return [];\n  }\n\n  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);\n}\n\nfunction omit(object, keysToOmit) {\n  return Object.keys(object).filter(option => !keysToOmit.includes(option)).reduce((obj, key) => {\n    obj[key] = object[key];\n    return obj;\n  }, {});\n}\n\n// Based on https://github.com/bramstein/url-template, licensed under BSD\n// TODO: create separate package.\n//\n// Copyright (c) 2012-2014, Bram Stein\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//  1. Redistributions of source code must retain the above copyright\n//     notice, this list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright\n//     notice, this list of conditions and the following disclaimer in the\n//     documentation and/or other materials provided with the distribution.\n//  3. The name of the author may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR IMPLIED\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* istanbul ignore file */\nfunction encodeReserved(str) {\n  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {\n    if (!/%[0-9A-Fa-f]/.test(part)) {\n      part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n    }\n\n    return part;\n  }).join(\"\");\n}\n\nfunction encodeUnreserved(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n    return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\nfunction encodeValue(operator, value, key) {\n  value = operator === \"+\" || operator === \"#\" ? encodeReserved(value) : encodeUnreserved(value);\n\n  if (key) {\n    return encodeUnreserved(key) + \"=\" + value;\n  } else {\n    return value;\n  }\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isKeyOperator(operator) {\n  return operator === \";\" || operator === \"&\" || operator === \"?\";\n}\n\nfunction getValues(context, operator, key, modifier) {\n  var value = context[key],\n      result = [];\n\n  if (isDefined(value) && value !== \"\") {\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n      value = value.toString();\n\n      if (modifier && modifier !== \"*\") {\n        value = value.substring(0, parseInt(modifier, 10));\n      }\n\n      result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n    } else {\n      if (modifier === \"*\") {\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function (value) {\n            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n          });\n        } else {\n          Object.keys(value).forEach(function (k) {\n            if (isDefined(value[k])) {\n              result.push(encodeValue(operator, value[k], k));\n            }\n          });\n        }\n      } else {\n        const tmp = [];\n\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function (value) {\n            tmp.push(encodeValue(operator, value));\n          });\n        } else {\n          Object.keys(value).forEach(function (k) {\n            if (isDefined(value[k])) {\n              tmp.push(encodeUnreserved(k));\n              tmp.push(encodeValue(operator, value[k].toString()));\n            }\n          });\n        }\n\n        if (isKeyOperator(operator)) {\n          result.push(encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n        } else if (tmp.length !== 0) {\n          result.push(tmp.join(\",\"));\n        }\n      }\n    }\n  } else {\n    if (operator === \";\") {\n      if (isDefined(value)) {\n        result.push(encodeUnreserved(key));\n      }\n    } else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n      result.push(encodeUnreserved(key) + \"=\");\n    } else if (value === \"\") {\n      result.push(\"\");\n    }\n  }\n\n  return result;\n}\n\nfunction parseUrl(template) {\n  return {\n    expand: expand.bind(null, template)\n  };\n}\n\nfunction expand(template, context) {\n  var operators = [\"+\", \"#\", \".\", \"/\", \";\", \"?\", \"&\"];\n  return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (_, expression, literal) {\n    if (expression) {\n      let operator = \"\";\n      const values = [];\n\n      if (operators.indexOf(expression.charAt(0)) !== -1) {\n        operator = expression.charAt(0);\n        expression = expression.substr(1);\n      }\n\n      expression.split(/,/g).forEach(function (variable) {\n        var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n        values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n      });\n\n      if (operator && operator !== \"+\") {\n        var separator = \",\";\n\n        if (operator === \"?\") {\n          separator = \"&\";\n        } else if (operator !== \"#\") {\n          separator = operator;\n        }\n\n        return (values.length !== 0 ? operator : \"\") + values.join(separator);\n      } else {\n        return values.join(\",\");\n      }\n    } else {\n      return encodeReserved(literal);\n    }\n  });\n}\n\nfunction parse(options) {\n  // https://fetch.spec.whatwg.org/#methods\n  let method = options.method.toUpperCase(); // replace :varname with {varname} to make it RFC 6570 compatible\n\n  let url = (options.url || \"/\").replace(/:([a-z]\\w+)/g, \"{$1}\");\n  let headers = Object.assign({}, options.headers);\n  let body;\n  let parameters = omit(options, [\"method\", \"baseUrl\", \"url\", \"headers\", \"request\", \"mediaType\"]); // extract variable names from URL to calculate remaining variables later\n\n  const urlVariableNames = extractUrlVariableNames(url);\n  url = parseUrl(url).expand(parameters);\n\n  if (!/^http/.test(url)) {\n    url = options.baseUrl + url;\n  }\n\n  const omittedParameters = Object.keys(options).filter(option => urlVariableNames.includes(option)).concat(\"baseUrl\");\n  const remainingParameters = omit(parameters, omittedParameters);\n  const isBinaryRequest = /application\\/octet-stream/i.test(headers.accept);\n\n  if (!isBinaryRequest) {\n    if (options.mediaType.format) {\n      // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw\n      headers.accept = headers.accept.split(/,/).map(preview => preview.replace(/application\\/vnd(\\.\\w+)(\\.v3)?(\\.\\w+)?(\\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(\",\");\n    }\n\n    if (options.mediaType.previews.length) {\n      const previewsFromAcceptHeader = headers.accept.match(/[\\w-]+(?=-preview)/g) || [];\n      headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map(preview => {\n        const format = options.mediaType.format ? `.${options.mediaType.format}` : \"+json\";\n        return `application/vnd.github.${preview}-preview${format}`;\n      }).join(\",\");\n    }\n  } // for GET/HEAD requests, set URL query parameters from remaining parameters\n  // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters\n\n\n  if ([\"GET\", \"HEAD\"].includes(method)) {\n    url = addQueryParameters(url, remainingParameters);\n  } else {\n    if (\"data\" in remainingParameters) {\n      body = remainingParameters.data;\n    } else {\n      if (Object.keys(remainingParameters).length) {\n        body = remainingParameters;\n      } else {\n        headers[\"content-length\"] = 0;\n      }\n    }\n  } // default content-type for JSON if body is set\n\n\n  if (!headers[\"content-type\"] && typeof body !== \"undefined\") {\n    headers[\"content-type\"] = \"application/json; charset=utf-8\";\n  } // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.\n  // fetch does not allow to set `content-length` header, but we can set body to an empty string\n\n\n  if ([\"PATCH\", \"PUT\"].includes(method) && typeof body === \"undefined\") {\n    body = \"\";\n  } // Only return body/request keys if present\n\n\n  return Object.assign({\n    method,\n    url,\n    headers\n  }, typeof body !== \"undefined\" ? {\n    body\n  } : null, options.request ? {\n    request: options.request\n  } : null);\n}\n\nfunction endpointWithDefaults(defaults, route, options) {\n  return parse(merge(defaults, route, options));\n}\n\nfunction withDefaults(oldDefaults, newDefaults) {\n  const DEFAULTS = merge(oldDefaults, newDefaults);\n  const endpoint = endpointWithDefaults.bind(null, DEFAULTS);\n  return Object.assign(endpoint, {\n    DEFAULTS,\n    defaults: withDefaults.bind(null, DEFAULTS),\n    merge: merge.bind(null, DEFAULTS),\n    parse\n  });\n}\n\nconst VERSION = \"6.0.11\";\n\nconst userAgent = `octokit-endpoint.js/${VERSION} ${universalUserAgent.getUserAgent()}`; // DEFAULTS has all properties set that EndpointOptions has, except url.\n// So we use RequestParameters and add method as additional required property.\n\nconst DEFAULTS = {\n  method: \"GET\",\n  baseUrl: \"https://api.github.com\",\n  headers: {\n    accept: \"application/vnd.github.v3+json\",\n    \"user-agent\": userAgent\n  },\n  mediaType: {\n    format: \"\",\n    previews: []\n  }\n};\n\nconst endpoint = withDefaults(null, DEFAULTS);\n\nexports.endpoint = endpoint;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/endpoint/dist-src/defaults.js":"import { getUserAgent } from \"universal-user-agent\";\nimport { VERSION } from \"./version\";\nconst userAgent = `octokit-endpoint.js/${VERSION} ${getUserAgent()}`;\n// DEFAULTS has all properties set that EndpointOptions has, except url.\n// So we use RequestParameters and add method as additional required property.\nexport const DEFAULTS = {\n    method: \"GET\",\n    baseUrl: \"https://api.github.com\",\n    headers: {\n        accept: \"application/vnd.github.v3+json\",\n        \"user-agent\": userAgent,\n    },\n    mediaType: {\n        format: \"\",\n        previews: [],\n    },\n};\n","node_modules/@octokit/endpoint/dist-src/endpoint-with-defaults.js":"import { merge } from \"./merge\";\nimport { parse } from \"./parse\";\nexport function endpointWithDefaults(defaults, route, options) {\n    return parse(merge(defaults, route, options));\n}\n","node_modules/@octokit/endpoint/dist-src/index.js":"import { withDefaults } from \"./with-defaults\";\nimport { DEFAULTS } from \"./defaults\";\nexport const endpoint = withDefaults(null, DEFAULTS);\n","node_modules/@octokit/endpoint/dist-src/merge.js":"import { lowercaseKeys } from \"./util/lowercase-keys\";\nimport { mergeDeep } from \"./util/merge-deep\";\nimport { removeUndefinedProperties } from \"./util/remove-undefined-properties\";\nexport function merge(defaults, route, options) {\n    if (typeof route === \"string\") {\n        let [method, url] = route.split(\" \");\n        options = Object.assign(url ? { method, url } : { url: method }, options);\n    }\n    else {\n        options = Object.assign({}, route);\n    }\n    // lowercase header names before merging with defaults to avoid duplicates\n    options.headers = lowercaseKeys(options.headers);\n    // remove properties with undefined values before merging\n    removeUndefinedProperties(options);\n    removeUndefinedProperties(options.headers);\n    const mergedOptions = mergeDeep(defaults || {}, options);\n    // mediaType.previews arrays are merged, instead of overwritten\n    if (defaults && defaults.mediaType.previews.length) {\n        mergedOptions.mediaType.previews = defaults.mediaType.previews\n            .filter((preview) => !mergedOptions.mediaType.previews.includes(preview))\n            .concat(mergedOptions.mediaType.previews);\n    }\n    mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, \"\"));\n    return mergedOptions;\n}\n","node_modules/@octokit/endpoint/dist-src/parse.js":"import { addQueryParameters } from \"./util/add-query-parameters\";\nimport { extractUrlVariableNames } from \"./util/extract-url-variable-names\";\nimport { omit } from \"./util/omit\";\nimport { parseUrl } from \"./util/url-template\";\nexport function parse(options) {\n    // https://fetch.spec.whatwg.org/#methods\n    let method = options.method.toUpperCase();\n    // replace :varname with {varname} to make it RFC 6570 compatible\n    let url = (options.url || \"/\").replace(/:([a-z]\\w+)/g, \"{$1}\");\n    let headers = Object.assign({}, options.headers);\n    let body;\n    let parameters = omit(options, [\n        \"method\",\n        \"baseUrl\",\n        \"url\",\n        \"headers\",\n        \"request\",\n        \"mediaType\",\n    ]);\n    // extract variable names from URL to calculate remaining variables later\n    const urlVariableNames = extractUrlVariableNames(url);\n    url = parseUrl(url).expand(parameters);\n    if (!/^http/.test(url)) {\n        url = options.baseUrl + url;\n    }\n    const omittedParameters = Object.keys(options)\n        .filter((option) => urlVariableNames.includes(option))\n        .concat(\"baseUrl\");\n    const remainingParameters = omit(parameters, omittedParameters);\n    const isBinaryRequest = /application\\/octet-stream/i.test(headers.accept);\n    if (!isBinaryRequest) {\n        if (options.mediaType.format) {\n            // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw\n            headers.accept = headers.accept\n                .split(/,/)\n                .map((preview) => preview.replace(/application\\/vnd(\\.\\w+)(\\.v3)?(\\.\\w+)?(\\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`))\n                .join(\",\");\n        }\n        if (options.mediaType.previews.length) {\n            const previewsFromAcceptHeader = headers.accept.match(/[\\w-]+(?=-preview)/g) || [];\n            headers.accept = previewsFromAcceptHeader\n                .concat(options.mediaType.previews)\n                .map((preview) => {\n                const format = options.mediaType.format\n                    ? `.${options.mediaType.format}`\n                    : \"+json\";\n                return `application/vnd.github.${preview}-preview${format}`;\n            })\n                .join(\",\");\n        }\n    }\n    // for GET/HEAD requests, set URL query parameters from remaining parameters\n    // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters\n    if ([\"GET\", \"HEAD\"].includes(method)) {\n        url = addQueryParameters(url, remainingParameters);\n    }\n    else {\n        if (\"data\" in remainingParameters) {\n            body = remainingParameters.data;\n        }\n        else {\n            if (Object.keys(remainingParameters).length) {\n                body = remainingParameters;\n            }\n            else {\n                headers[\"content-length\"] = 0;\n            }\n        }\n    }\n    // default content-type for JSON if body is set\n    if (!headers[\"content-type\"] && typeof body !== \"undefined\") {\n        headers[\"content-type\"] = \"application/json; charset=utf-8\";\n    }\n    // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.\n    // fetch does not allow to set `content-length` header, but we can set body to an empty string\n    if ([\"PATCH\", \"PUT\"].includes(method) && typeof body === \"undefined\") {\n        body = \"\";\n    }\n    // Only return body/request keys if present\n    return Object.assign({ method, url, headers }, typeof body !== \"undefined\" ? { body } : null, options.request ? { request: options.request } : null);\n}\n","node_modules/@octokit/endpoint/dist-src/version.js":"export const VERSION = \"6.0.11\";\n","node_modules/@octokit/endpoint/dist-src/with-defaults.js":"import { endpointWithDefaults } from \"./endpoint-with-defaults\";\nimport { merge } from \"./merge\";\nimport { parse } from \"./parse\";\nexport function withDefaults(oldDefaults, newDefaults) {\n    const DEFAULTS = merge(oldDefaults, newDefaults);\n    const endpoint = endpointWithDefaults.bind(null, DEFAULTS);\n    return Object.assign(endpoint, {\n        DEFAULTS,\n        defaults: withDefaults.bind(null, DEFAULTS),\n        merge: merge.bind(null, DEFAULTS),\n        parse,\n    });\n}\n","node_modules/@octokit/endpoint/dist-src/util/add-query-parameters.js":"export function addQueryParameters(url, parameters) {\n    const separator = /\\?/.test(url) ? \"&\" : \"?\";\n    const names = Object.keys(parameters);\n    if (names.length === 0) {\n        return url;\n    }\n    return (url +\n        separator +\n        names\n            .map((name) => {\n            if (name === \"q\") {\n                return (\"q=\" + parameters.q.split(\"+\").map(encodeURIComponent).join(\"+\"));\n            }\n            return `${name}=${encodeURIComponent(parameters[name])}`;\n        })\n            .join(\"&\"));\n}\n","node_modules/@octokit/endpoint/dist-src/util/extract-url-variable-names.js":"const urlVariableRegex = /\\{[^}]+\\}/g;\nfunction removeNonChars(variableName) {\n    return variableName.replace(/^\\W+|\\W+$/g, \"\").split(/,/);\n}\nexport function extractUrlVariableNames(url) {\n    const matches = url.match(urlVariableRegex);\n    if (!matches) {\n        return [];\n    }\n    return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);\n}\n","node_modules/@octokit/endpoint/dist-src/util/lowercase-keys.js":"export function lowercaseKeys(object) {\n    if (!object) {\n        return {};\n    }\n    return Object.keys(object).reduce((newObj, key) => {\n        newObj[key.toLowerCase()] = object[key];\n        return newObj;\n    }, {});\n}\n","node_modules/@octokit/endpoint/dist-src/util/merge-deep.js":"import { isPlainObject } from \"is-plain-object\";\nexport function mergeDeep(defaults, options) {\n    const result = Object.assign({}, defaults);\n    Object.keys(options).forEach((key) => {\n        if (isPlainObject(options[key])) {\n            if (!(key in defaults))\n                Object.assign(result, { [key]: options[key] });\n            else\n                result[key] = mergeDeep(defaults[key], options[key]);\n        }\n        else {\n            Object.assign(result, { [key]: options[key] });\n        }\n    });\n    return result;\n}\n","node_modules/@octokit/endpoint/dist-src/util/omit.js":"export function omit(object, keysToOmit) {\n    return Object.keys(object)\n        .filter((option) => !keysToOmit.includes(option))\n        .reduce((obj, key) => {\n        obj[key] = object[key];\n        return obj;\n    }, {});\n}\n","node_modules/@octokit/endpoint/dist-src/util/remove-undefined-properties.js":"export function removeUndefinedProperties(obj) {\n    for (const key in obj) {\n        if (obj[key] === undefined) {\n            delete obj[key];\n        }\n    }\n    return obj;\n}\n","node_modules/@octokit/endpoint/dist-src/util/url-template.js":"// Based on https://github.com/bramstein/url-template, licensed under BSD\n// TODO: create separate package.\n//\n// Copyright (c) 2012-2014, Bram Stein\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//  1. Redistributions of source code must retain the above copyright\n//     notice, this list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright\n//     notice, this list of conditions and the following disclaimer in the\n//     documentation and/or other materials provided with the distribution.\n//  3. The name of the author may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR IMPLIED\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n/* istanbul ignore file */\nfunction encodeReserved(str) {\n    return str\n        .split(/(%[0-9A-Fa-f]{2})/g)\n        .map(function (part) {\n        if (!/%[0-9A-Fa-f]/.test(part)) {\n            part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n        }\n        return part;\n    })\n        .join(\"\");\n}\nfunction encodeUnreserved(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\nfunction encodeValue(operator, value, key) {\n    value =\n        operator === \"+\" || operator === \"#\"\n            ? encodeReserved(value)\n            : encodeUnreserved(value);\n    if (key) {\n        return encodeUnreserved(key) + \"=\" + value;\n    }\n    else {\n        return value;\n    }\n}\nfunction isDefined(value) {\n    return value !== undefined && value !== null;\n}\nfunction isKeyOperator(operator) {\n    return operator === \";\" || operator === \"&\" || operator === \"?\";\n}\nfunction getValues(context, operator, key, modifier) {\n    var value = context[key], result = [];\n    if (isDefined(value) && value !== \"\") {\n        if (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\") {\n            value = value.toString();\n            if (modifier && modifier !== \"*\") {\n                value = value.substring(0, parseInt(modifier, 10));\n            }\n            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n        }\n        else {\n            if (modifier === \"*\") {\n                if (Array.isArray(value)) {\n                    value.filter(isDefined).forEach(function (value) {\n                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n                    });\n                }\n                else {\n                    Object.keys(value).forEach(function (k) {\n                        if (isDefined(value[k])) {\n                            result.push(encodeValue(operator, value[k], k));\n                        }\n                    });\n                }\n            }\n            else {\n                const tmp = [];\n                if (Array.isArray(value)) {\n                    value.filter(isDefined).forEach(function (value) {\n                        tmp.push(encodeValue(operator, value));\n                    });\n                }\n                else {\n                    Object.keys(value).forEach(function (k) {\n                        if (isDefined(value[k])) {\n                            tmp.push(encodeUnreserved(k));\n                            tmp.push(encodeValue(operator, value[k].toString()));\n                        }\n                    });\n                }\n                if (isKeyOperator(operator)) {\n                    result.push(encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n                }\n                else if (tmp.length !== 0) {\n                    result.push(tmp.join(\",\"));\n                }\n            }\n        }\n    }\n    else {\n        if (operator === \";\") {\n            if (isDefined(value)) {\n                result.push(encodeUnreserved(key));\n            }\n        }\n        else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n            result.push(encodeUnreserved(key) + \"=\");\n        }\n        else if (value === \"\") {\n            result.push(\"\");\n        }\n    }\n    return result;\n}\nexport function parseUrl(template) {\n    return {\n        expand: expand.bind(null, template),\n    };\n}\nfunction expand(template, context) {\n    var operators = [\"+\", \"#\", \".\", \"/\", \";\", \"?\", \"&\"];\n    return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (_, expression, literal) {\n        if (expression) {\n            let operator = \"\";\n            const values = [];\n            if (operators.indexOf(expression.charAt(0)) !== -1) {\n                operator = expression.charAt(0);\n                expression = expression.substr(1);\n            }\n            expression.split(/,/g).forEach(function (variable) {\n                var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n                values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n            });\n            if (operator && operator !== \"+\") {\n                var separator = \",\";\n                if (operator === \"?\") {\n                    separator = \"&\";\n                }\n                else if (operator !== \"#\") {\n                    separator = operator;\n                }\n                return (values.length !== 0 ? operator : \"\") + values.join(separator);\n            }\n            else {\n                return values.join(\",\");\n            }\n        }\n        else {\n            return encodeReserved(literal);\n        }\n    });\n}\n","node_modules/@octokit/endpoint/dist-types/defaults.d.ts":"import { EndpointDefaults } from \"@octokit/types\";\nexport declare const DEFAULTS: EndpointDefaults;\n","node_modules/@octokit/endpoint/dist-types/endpoint-with-defaults.d.ts":"import { EndpointOptions, RequestParameters, Route } from \"@octokit/types\";\nimport { DEFAULTS } from \"./defaults\";\nexport declare function endpointWithDefaults(defaults: typeof DEFAULTS, route: Route | EndpointOptions, options?: RequestParameters): import(\"@octokit/types\").RequestOptions;\n","node_modules/@octokit/endpoint/dist-types/index.d.ts":"export declare const endpoint: import(\"@octokit/types\").EndpointInterface<object>;\n","node_modules/@octokit/endpoint/dist-types/merge.d.ts":"import { EndpointDefaults, RequestParameters, Route } from \"@octokit/types\";\nexport declare function merge(defaults: EndpointDefaults | null, route?: Route | RequestParameters, options?: RequestParameters): EndpointDefaults;\n","node_modules/@octokit/endpoint/dist-types/parse.d.ts":"import { EndpointDefaults, RequestOptions } from \"@octokit/types\";\nexport declare function parse(options: EndpointDefaults): RequestOptions;\n","node_modules/@octokit/endpoint/dist-types/version.d.ts":"export declare const VERSION = \"6.0.11\";\n","node_modules/@octokit/endpoint/dist-types/with-defaults.d.ts":"import { EndpointInterface, RequestParameters, EndpointDefaults } from \"@octokit/types\";\nexport declare function withDefaults(oldDefaults: EndpointDefaults | null, newDefaults: RequestParameters): EndpointInterface;\n","node_modules/@octokit/endpoint/dist-types/util/add-query-parameters.d.ts":"export declare function addQueryParameters(url: string, parameters: {\n    [x: string]: string | undefined;\n    q?: string;\n}): string;\n","node_modules/@octokit/endpoint/dist-types/util/extract-url-variable-names.d.ts":"export declare function extractUrlVariableNames(url: string): string[];\n","node_modules/@octokit/endpoint/dist-types/util/lowercase-keys.d.ts":"export declare function lowercaseKeys(object?: {\n    [key: string]: any;\n}): {\n    [key: string]: any;\n};\n","node_modules/@octokit/endpoint/dist-types/util/merge-deep.d.ts":"export declare function mergeDeep(defaults: any, options: any): object;\n","node_modules/@octokit/endpoint/dist-types/util/omit.d.ts":"export declare function omit(object: {\n    [key: string]: any;\n}, keysToOmit: string[]): {\n    [key: string]: any;\n};\n","node_modules/@octokit/endpoint/dist-types/util/remove-undefined-properties.d.ts":"export declare function removeUndefinedProperties(obj: any): any;\n","node_modules/@octokit/endpoint/dist-types/util/url-template.d.ts":"export declare function parseUrl(template: string): {\n    expand: (context: object) => string;\n};\n","node_modules/@octokit/endpoint/dist-web/index.js":"import { isPlainObject } from 'is-plain-object';\nimport { getUserAgent } from 'universal-user-agent';\n\nfunction lowercaseKeys(object) {\n    if (!object) {\n        return {};\n    }\n    return Object.keys(object).reduce((newObj, key) => {\n        newObj[key.toLowerCase()] = object[key];\n        return newObj;\n    }, {});\n}\n\nfunction mergeDeep(defaults, options) {\n    const result = Object.assign({}, defaults);\n    Object.keys(options).forEach((key) => {\n        if (isPlainObject(options[key])) {\n            if (!(key in defaults))\n                Object.assign(result, { [key]: options[key] });\n            else\n                result[key] = mergeDeep(defaults[key], options[key]);\n        }\n        else {\n            Object.assign(result, { [key]: options[key] });\n        }\n    });\n    return result;\n}\n\nfunction removeUndefinedProperties(obj) {\n    for (const key in obj) {\n        if (obj[key] === undefined) {\n            delete obj[key];\n        }\n    }\n    return obj;\n}\n\nfunction merge(defaults, route, options) {\n    if (typeof route === \"string\") {\n        let [method, url] = route.split(\" \");\n        options = Object.assign(url ? { method, url } : { url: method }, options);\n    }\n    else {\n        options = Object.assign({}, route);\n    }\n    // lowercase header names before merging with defaults to avoid duplicates\n    options.headers = lowercaseKeys(options.headers);\n    // remove properties with undefined values before merging\n    removeUndefinedProperties(options);\n    removeUndefinedProperties(options.headers);\n    const mergedOptions = mergeDeep(defaults || {}, options);\n    // mediaType.previews arrays are merged, instead of overwritten\n    if (defaults && defaults.mediaType.previews.length) {\n        mergedOptions.mediaType.previews = defaults.mediaType.previews\n            .filter((preview) => !mergedOptions.mediaType.previews.includes(preview))\n            .concat(mergedOptions.mediaType.previews);\n    }\n    mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, \"\"));\n    return mergedOptions;\n}\n\nfunction addQueryParameters(url, parameters) {\n    const separator = /\\?/.test(url) ? \"&\" : \"?\";\n    const names = Object.keys(parameters);\n    if (names.length === 0) {\n        return url;\n    }\n    return (url +\n        separator +\n        names\n            .map((name) => {\n            if (name === \"q\") {\n                return (\"q=\" + parameters.q.split(\"+\").map(encodeURIComponent).join(\"+\"));\n            }\n            return `${name}=${encodeURIComponent(parameters[name])}`;\n        })\n            .join(\"&\"));\n}\n\nconst urlVariableRegex = /\\{[^}]+\\}/g;\nfunction removeNonChars(variableName) {\n    return variableName.replace(/^\\W+|\\W+$/g, \"\").split(/,/);\n}\nfunction extractUrlVariableNames(url) {\n    const matches = url.match(urlVariableRegex);\n    if (!matches) {\n        return [];\n    }\n    return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);\n}\n\nfunction omit(object, keysToOmit) {\n    return Object.keys(object)\n        .filter((option) => !keysToOmit.includes(option))\n        .reduce((obj, key) => {\n        obj[key] = object[key];\n        return obj;\n    }, {});\n}\n\n// Based on https://github.com/bramstein/url-template, licensed under BSD\n// TODO: create separate package.\n//\n// Copyright (c) 2012-2014, Bram Stein\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//  1. Redistributions of source code must retain the above copyright\n//     notice, this list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright\n//     notice, this list of conditions and the following disclaimer in the\n//     documentation and/or other materials provided with the distribution.\n//  3. The name of the author may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR IMPLIED\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n/* istanbul ignore file */\nfunction encodeReserved(str) {\n    return str\n        .split(/(%[0-9A-Fa-f]{2})/g)\n        .map(function (part) {\n        if (!/%[0-9A-Fa-f]/.test(part)) {\n            part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n        }\n        return part;\n    })\n        .join(\"\");\n}\nfunction encodeUnreserved(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\nfunction encodeValue(operator, value, key) {\n    value =\n        operator === \"+\" || operator === \"#\"\n            ? encodeReserved(value)\n            : encodeUnreserved(value);\n    if (key) {\n        return encodeUnreserved(key) + \"=\" + value;\n    }\n    else {\n        return value;\n    }\n}\nfunction isDefined(value) {\n    return value !== undefined && value !== null;\n}\nfunction isKeyOperator(operator) {\n    return operator === \";\" || operator === \"&\" || operator === \"?\";\n}\nfunction getValues(context, operator, key, modifier) {\n    var value = context[key], result = [];\n    if (isDefined(value) && value !== \"\") {\n        if (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\") {\n            value = value.toString();\n            if (modifier && modifier !== \"*\") {\n                value = value.substring(0, parseInt(modifier, 10));\n            }\n            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n        }\n        else {\n            if (modifier === \"*\") {\n                if (Array.isArray(value)) {\n                    value.filter(isDefined).forEach(function (value) {\n                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n                    });\n                }\n                else {\n                    Object.keys(value).forEach(function (k) {\n                        if (isDefined(value[k])) {\n                            result.push(encodeValue(operator, value[k], k));\n                        }\n                    });\n                }\n            }\n            else {\n                const tmp = [];\n                if (Array.isArray(value)) {\n                    value.filter(isDefined).forEach(function (value) {\n                        tmp.push(encodeValue(operator, value));\n                    });\n                }\n                else {\n                    Object.keys(value).forEach(function (k) {\n                        if (isDefined(value[k])) {\n                            tmp.push(encodeUnreserved(k));\n                            tmp.push(encodeValue(operator, value[k].toString()));\n                        }\n                    });\n                }\n                if (isKeyOperator(operator)) {\n                    result.push(encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n                }\n                else if (tmp.length !== 0) {\n                    result.push(tmp.join(\",\"));\n                }\n            }\n        }\n    }\n    else {\n        if (operator === \";\") {\n            if (isDefined(value)) {\n                result.push(encodeUnreserved(key));\n            }\n        }\n        else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n            result.push(encodeUnreserved(key) + \"=\");\n        }\n        else if (value === \"\") {\n            result.push(\"\");\n        }\n    }\n    return result;\n}\nfunction parseUrl(template) {\n    return {\n        expand: expand.bind(null, template),\n    };\n}\nfunction expand(template, context) {\n    var operators = [\"+\", \"#\", \".\", \"/\", \";\", \"?\", \"&\"];\n    return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (_, expression, literal) {\n        if (expression) {\n            let operator = \"\";\n            const values = [];\n            if (operators.indexOf(expression.charAt(0)) !== -1) {\n                operator = expression.charAt(0);\n                expression = expression.substr(1);\n            }\n            expression.split(/,/g).forEach(function (variable) {\n                var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n                values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n            });\n            if (operator && operator !== \"+\") {\n                var separator = \",\";\n                if (operator === \"?\") {\n                    separator = \"&\";\n                }\n                else if (operator !== \"#\") {\n                    separator = operator;\n                }\n                return (values.length !== 0 ? operator : \"\") + values.join(separator);\n            }\n            else {\n                return values.join(\",\");\n            }\n        }\n        else {\n            return encodeReserved(literal);\n        }\n    });\n}\n\nfunction parse(options) {\n    // https://fetch.spec.whatwg.org/#methods\n    let method = options.method.toUpperCase();\n    // replace :varname with {varname} to make it RFC 6570 compatible\n    let url = (options.url || \"/\").replace(/:([a-z]\\w+)/g, \"{$1}\");\n    let headers = Object.assign({}, options.headers);\n    let body;\n    let parameters = omit(options, [\n        \"method\",\n        \"baseUrl\",\n        \"url\",\n        \"headers\",\n        \"request\",\n        \"mediaType\",\n    ]);\n    // extract variable names from URL to calculate remaining variables later\n    const urlVariableNames = extractUrlVariableNames(url);\n    url = parseUrl(url).expand(parameters);\n    if (!/^http/.test(url)) {\n        url = options.baseUrl + url;\n    }\n    const omittedParameters = Object.keys(options)\n        .filter((option) => urlVariableNames.includes(option))\n        .concat(\"baseUrl\");\n    const remainingParameters = omit(parameters, omittedParameters);\n    const isBinaryRequest = /application\\/octet-stream/i.test(headers.accept);\n    if (!isBinaryRequest) {\n        if (options.mediaType.format) {\n            // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw\n            headers.accept = headers.accept\n                .split(/,/)\n                .map((preview) => preview.replace(/application\\/vnd(\\.\\w+)(\\.v3)?(\\.\\w+)?(\\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`))\n                .join(\",\");\n        }\n        if (options.mediaType.previews.length) {\n            const previewsFromAcceptHeader = headers.accept.match(/[\\w-]+(?=-preview)/g) || [];\n            headers.accept = previewsFromAcceptHeader\n                .concat(options.mediaType.previews)\n                .map((preview) => {\n                const format = options.mediaType.format\n                    ? `.${options.mediaType.format}`\n                    : \"+json\";\n                return `application/vnd.github.${preview}-preview${format}`;\n            })\n                .join(\",\");\n        }\n    }\n    // for GET/HEAD requests, set URL query parameters from remaining parameters\n    // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters\n    if ([\"GET\", \"HEAD\"].includes(method)) {\n        url = addQueryParameters(url, remainingParameters);\n    }\n    else {\n        if (\"data\" in remainingParameters) {\n            body = remainingParameters.data;\n        }\n        else {\n            if (Object.keys(remainingParameters).length) {\n                body = remainingParameters;\n            }\n            else {\n                headers[\"content-length\"] = 0;\n            }\n        }\n    }\n    // default content-type for JSON if body is set\n    if (!headers[\"content-type\"] && typeof body !== \"undefined\") {\n        headers[\"content-type\"] = \"application/json; charset=utf-8\";\n    }\n    // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.\n    // fetch does not allow to set `content-length` header, but we can set body to an empty string\n    if ([\"PATCH\", \"PUT\"].includes(method) && typeof body === \"undefined\") {\n        body = \"\";\n    }\n    // Only return body/request keys if present\n    return Object.assign({ method, url, headers }, typeof body !== \"undefined\" ? { body } : null, options.request ? { request: options.request } : null);\n}\n\nfunction endpointWithDefaults(defaults, route, options) {\n    return parse(merge(defaults, route, options));\n}\n\nfunction withDefaults(oldDefaults, newDefaults) {\n    const DEFAULTS = merge(oldDefaults, newDefaults);\n    const endpoint = endpointWithDefaults.bind(null, DEFAULTS);\n    return Object.assign(endpoint, {\n        DEFAULTS,\n        defaults: withDefaults.bind(null, DEFAULTS),\n        merge: merge.bind(null, DEFAULTS),\n        parse,\n    });\n}\n\nconst VERSION = \"6.0.11\";\n\nconst userAgent = `octokit-endpoint.js/${VERSION} ${getUserAgent()}`;\n// DEFAULTS has all properties set that EndpointOptions has, except url.\n// So we use RequestParameters and add method as additional required property.\nconst DEFAULTS = {\n    method: \"GET\",\n    baseUrl: \"https://api.github.com\",\n    headers: {\n        accept: \"application/vnd.github.v3+json\",\n        \"user-agent\": userAgent,\n    },\n    mediaType: {\n        format: \"\",\n        previews: [],\n    },\n};\n\nconst endpoint = withDefaults(null, DEFAULTS);\n\nexport { endpoint };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/graphql/package.json":"{\n  \"name\": \"@octokit/graphql\",\n  \"description\": \"GitHub GraphQL API client for browsers and Node\",\n  \"version\": \"4.6.0\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"octokit\",\n    \"github\",\n    \"api\",\n    \"graphql\"\n  ],\n  \"homepage\": \"https://github.com/octokit/graphql.js#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/octokit/graphql.js/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/octokit/graphql.js.git\"\n  },\n  \"dependencies\": {\n    \"@octokit/request\": \"^5.3.0\",\n    \"@octokit/types\": \"^6.0.3\",\n    \"universal-user-agent\": \"^6.0.0\"\n  },\n  \"devDependencies\": {\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/fetch-mock\": \"^7.2.5\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/node\": \"^14.0.4\",\n    \"fetch-mock\": \"^9.0.0\",\n    \"jest\": \"^26.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"ts-jest\": \"^26.0.0\",\n    \"typescript\": \"^4.0.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/graphql/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar request = require('@octokit/request');\nvar universalUserAgent = require('universal-user-agent');\n\nconst VERSION = \"4.6.0\";\n\nclass GraphqlError extends Error {\n  constructor(request, response) {\n    const message = response.data.errors[0].message;\n    super(message);\n    Object.assign(this, response.data);\n    Object.assign(this, {\n      headers: response.headers\n    });\n    this.name = \"GraphqlError\";\n    this.request = request; // Maintains proper stack trace (only available on V8)\n\n    /* istanbul ignore next */\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n}\n\nconst NON_VARIABLE_OPTIONS = [\"method\", \"baseUrl\", \"url\", \"headers\", \"request\", \"query\", \"mediaType\"];\nconst GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nfunction graphql(request, query, options) {\n  if (typeof query === \"string\" && options && \"query\" in options) {\n    return Promise.reject(new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`));\n  }\n\n  const parsedOptions = typeof query === \"string\" ? Object.assign({\n    query\n  }, options) : query;\n  const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {\n    if (NON_VARIABLE_OPTIONS.includes(key)) {\n      result[key] = parsedOptions[key];\n      return result;\n    }\n\n    if (!result.variables) {\n      result.variables = {};\n    }\n\n    result.variables[key] = parsedOptions[key];\n    return result;\n  }, {}); // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix\n  // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451\n\n  const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;\n\n  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n  }\n\n  return request(requestOptions).then(response => {\n    if (response.data.errors) {\n      const headers = {};\n\n      for (const key of Object.keys(response.headers)) {\n        headers[key] = response.headers[key];\n      }\n\n      throw new GraphqlError(requestOptions, {\n        headers,\n        data: response.data\n      });\n    }\n\n    return response.data.data;\n  });\n}\n\nfunction withDefaults(request$1, newDefaults) {\n  const newRequest = request$1.defaults(newDefaults);\n\n  const newApi = (query, options) => {\n    return graphql(newRequest, query, options);\n  };\n\n  return Object.assign(newApi, {\n    defaults: withDefaults.bind(null, newRequest),\n    endpoint: request.request.endpoint\n  });\n}\n\nconst graphql$1 = withDefaults(request.request, {\n  headers: {\n    \"user-agent\": `octokit-graphql.js/${VERSION} ${universalUserAgent.getUserAgent()}`\n  },\n  method: \"POST\",\n  url: \"/graphql\"\n});\nfunction withCustomRequest(customRequest) {\n  return withDefaults(customRequest, {\n    method: \"POST\",\n    url: \"/graphql\"\n  });\n}\n\nexports.graphql = graphql$1;\nexports.withCustomRequest = withCustomRequest;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/graphql/dist-src/error.js":"export class GraphqlError extends Error {\n    constructor(request, response) {\n        const message = response.data.errors[0].message;\n        super(message);\n        Object.assign(this, response.data);\n        Object.assign(this, { headers: response.headers });\n        this.name = \"GraphqlError\";\n        this.request = request;\n        // Maintains proper stack trace (only available on V8)\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\n","node_modules/@octokit/graphql/dist-src/graphql.js":"import { GraphqlError } from \"./error\";\nconst NON_VARIABLE_OPTIONS = [\n    \"method\",\n    \"baseUrl\",\n    \"url\",\n    \"headers\",\n    \"request\",\n    \"query\",\n    \"mediaType\",\n];\nconst GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nexport function graphql(request, query, options) {\n    if (typeof query === \"string\" && options && \"query\" in options) {\n        return Promise.reject(new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`));\n    }\n    const parsedOptions = typeof query === \"string\" ? Object.assign({ query }, options) : query;\n    const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {\n        if (NON_VARIABLE_OPTIONS.includes(key)) {\n            result[key] = parsedOptions[key];\n            return result;\n        }\n        if (!result.variables) {\n            result.variables = {};\n        }\n        result.variables[key] = parsedOptions[key];\n        return result;\n    }, {});\n    // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix\n    // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451\n    const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;\n    if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n    }\n    return request(requestOptions).then((response) => {\n        if (response.data.errors) {\n            const headers = {};\n            for (const key of Object.keys(response.headers)) {\n                headers[key] = response.headers[key];\n            }\n            throw new GraphqlError(requestOptions, {\n                headers,\n                data: response.data,\n            });\n        }\n        return response.data.data;\n    });\n}\n","node_modules/@octokit/graphql/dist-src/index.js":"import { request } from \"@octokit/request\";\nimport { getUserAgent } from \"universal-user-agent\";\nimport { VERSION } from \"./version\";\nimport { withDefaults } from \"./with-defaults\";\nexport const graphql = withDefaults(request, {\n    headers: {\n        \"user-agent\": `octokit-graphql.js/${VERSION} ${getUserAgent()}`,\n    },\n    method: \"POST\",\n    url: \"/graphql\",\n});\nexport function withCustomRequest(customRequest) {\n    return withDefaults(customRequest, {\n        method: \"POST\",\n        url: \"/graphql\",\n    });\n}\n","node_modules/@octokit/graphql/dist-src/types.js":"export {};\n","node_modules/@octokit/graphql/dist-src/version.js":"export const VERSION = \"4.6.0\";\n","node_modules/@octokit/graphql/dist-src/with-defaults.js":"import { request as Request } from \"@octokit/request\";\nimport { graphql } from \"./graphql\";\nexport function withDefaults(request, newDefaults) {\n    const newRequest = request.defaults(newDefaults);\n    const newApi = (query, options) => {\n        return graphql(newRequest, query, options);\n    };\n    return Object.assign(newApi, {\n        defaults: withDefaults.bind(null, newRequest),\n        endpoint: Request.endpoint,\n    });\n}\n","node_modules/@octokit/graphql/dist-types/error.d.ts":"import { ResponseHeaders } from \"@octokit/types\";\nimport { GraphQlEndpointOptions, GraphQlQueryResponse } from \"./types\";\nexport declare class GraphqlError<ResponseData> extends Error {\n    request: GraphQlEndpointOptions;\n    constructor(request: GraphQlEndpointOptions, response: {\n        headers: ResponseHeaders;\n        data: Required<GraphQlQueryResponse<ResponseData>>;\n    });\n}\n","node_modules/@octokit/graphql/dist-types/graphql.d.ts":"import { request as Request } from \"@octokit/request\";\nimport { RequestParameters, GraphQlQueryResponseData } from \"./types\";\nexport declare function graphql<ResponseData = GraphQlQueryResponseData>(request: typeof Request, query: string | RequestParameters, options?: RequestParameters): Promise<ResponseData>;\n","node_modules/@octokit/graphql/dist-types/index.d.ts":"import { request } from \"@octokit/request\";\nexport declare const graphql: import(\"./types\").graphql;\nexport { GraphQlQueryResponseData } from \"./types\";\nexport declare function withCustomRequest(customRequest: typeof request): import(\"./types\").graphql;\n","node_modules/@octokit/graphql/dist-types/types.d.ts":"import { EndpointOptions, RequestParameters as RequestParametersType, EndpointInterface } from \"@octokit/types\";\nexport declare type GraphQlEndpointOptions = EndpointOptions & {\n    variables?: {\n        [key: string]: unknown;\n    };\n};\nexport declare type RequestParameters = RequestParametersType;\nexport declare type Query = string;\nexport interface graphql {\n    /**\n     * Sends a GraphQL query request based on endpoint options\n     * The GraphQL query must be specified in `options`.\n     *\n     * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <ResponseData>(options: RequestParameters): GraphQlResponse<ResponseData>;\n    /**\n     * Sends a GraphQL query request based on endpoint options\n     *\n     * @param {string} query GraphQL query. Example: `'query { viewer { login } }'`.\n     * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <ResponseData>(query: Query, parameters?: RequestParameters): GraphQlResponse<ResponseData>;\n    /**\n     * Returns a new `endpoint` with updated route and parameters\n     */\n    defaults: (newDefaults: RequestParameters) => graphql;\n    /**\n     * Octokit endpoint API, see {@link https://github.com/octokit/endpoint.js|@octokit/endpoint}\n     */\n    endpoint: EndpointInterface;\n}\nexport declare type GraphQlResponse<ResponseData> = Promise<ResponseData>;\nexport declare type GraphQlQueryResponseData = {\n    [key: string]: any;\n};\nexport declare type GraphQlQueryResponse<ResponseData> = {\n    data: ResponseData;\n    errors?: [\n        {\n            message: string;\n            path: [string];\n            extensions: {\n                [key: string]: any;\n            };\n            locations: [\n                {\n                    line: number;\n                    column: number;\n                }\n            ];\n        }\n    ];\n};\n","node_modules/@octokit/graphql/dist-types/version.d.ts":"export declare const VERSION = \"4.6.0\";\n","node_modules/@octokit/graphql/dist-types/with-defaults.d.ts":"import { request as Request } from \"@octokit/request\";\nimport { graphql as ApiInterface, RequestParameters } from \"./types\";\nexport declare function withDefaults(request: typeof Request, newDefaults: RequestParameters): ApiInterface;\n","node_modules/@octokit/graphql/dist-web/index.js":"import { request } from '@octokit/request';\nimport { getUserAgent } from 'universal-user-agent';\n\nconst VERSION = \"4.6.0\";\n\nclass GraphqlError extends Error {\n    constructor(request, response) {\n        const message = response.data.errors[0].message;\n        super(message);\n        Object.assign(this, response.data);\n        Object.assign(this, { headers: response.headers });\n        this.name = \"GraphqlError\";\n        this.request = request;\n        // Maintains proper stack trace (only available on V8)\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\n\nconst NON_VARIABLE_OPTIONS = [\n    \"method\",\n    \"baseUrl\",\n    \"url\",\n    \"headers\",\n    \"request\",\n    \"query\",\n    \"mediaType\",\n];\nconst GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nfunction graphql(request, query, options) {\n    if (typeof query === \"string\" && options && \"query\" in options) {\n        return Promise.reject(new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`));\n    }\n    const parsedOptions = typeof query === \"string\" ? Object.assign({ query }, options) : query;\n    const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {\n        if (NON_VARIABLE_OPTIONS.includes(key)) {\n            result[key] = parsedOptions[key];\n            return result;\n        }\n        if (!result.variables) {\n            result.variables = {};\n        }\n        result.variables[key] = parsedOptions[key];\n        return result;\n    }, {});\n    // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix\n    // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451\n    const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;\n    if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n    }\n    return request(requestOptions).then((response) => {\n        if (response.data.errors) {\n            const headers = {};\n            for (const key of Object.keys(response.headers)) {\n                headers[key] = response.headers[key];\n            }\n            throw new GraphqlError(requestOptions, {\n                headers,\n                data: response.data,\n            });\n        }\n        return response.data.data;\n    });\n}\n\nfunction withDefaults(request$1, newDefaults) {\n    const newRequest = request$1.defaults(newDefaults);\n    const newApi = (query, options) => {\n        return graphql(newRequest, query, options);\n    };\n    return Object.assign(newApi, {\n        defaults: withDefaults.bind(null, newRequest),\n        endpoint: request.endpoint,\n    });\n}\n\nconst graphql$1 = withDefaults(request, {\n    headers: {\n        \"user-agent\": `octokit-graphql.js/${VERSION} ${getUserAgent()}`,\n    },\n    method: \"POST\",\n    url: \"/graphql\",\n});\nfunction withCustomRequest(customRequest) {\n    return withDefaults(customRequest, {\n        method: \"POST\",\n        url: \"/graphql\",\n    });\n}\n\nexport { graphql$1 as graphql, withCustomRequest };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/openapi-types/package.json":"{\n  \"name\": \"@octokit/openapi-types\",\n  \"description\": \"Generated TypeScript definitions based on GitHub's OpenAPI spec\",\n  \"version\": \"4.0.4\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [],\n  \"repository\": \"https://github.com/octokit/openapi-types.ts\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@octokit/tsconfig\": \"^1.0.2\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.2\",\n    \"@pika/plugin-build-web\": \"^0.9.2\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.2\",\n    \"openapi-typescript\": \"^3.0.0\",\n    \"pika-plugin-merge-properties\": \"^1.0.6\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.1.0\",\n    \"typescript\": \"^4.1.5\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"octokit\": {\n    \"openapi-version\": \"2.9.2\"\n  },\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/openapi-types/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst VERSION = \"4.0.4\";\n\nexports.VERSION = VERSION;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/openapi-types/dist-src/index.js":"export * from \"./generated/types\";\nexport * from \"./version\";\n","node_modules/@octokit/openapi-types/dist-src/version.js":"export const VERSION = \"4.0.4\";\n","node_modules/@octokit/openapi-types/dist-src/generated/types.js":"/**\n * This file was auto-generated by openapi-typescript.\n * Do not make direct changes to the file.\n */\nexport {};\n","node_modules/@octokit/openapi-types/dist-types/index.d.ts":"export * from \"./generated/types\";\nexport * from \"./version\";\n","node_modules/@octokit/openapi-types/dist-types/version.d.ts":"export declare const VERSION = \"4.0.4\";\n","node_modules/@octokit/openapi-types/dist-types/generated/types.d.ts":"/**\n * This file was auto-generated by openapi-typescript.\n * Do not make direct changes to the file.\n */\nexport interface paths {\n    \"/\": {\n        /** Get Hypermedia links to resources accessible in GitHub's REST API */\n        get: operations[\"meta/root\"];\n    };\n    \"/app\": {\n        /**\n         * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)\" endpoint.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        get: operations[\"apps/get-authenticated\"];\n    };\n    \"/app-manifests/{code}/conversions\": {\n        /** Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`. */\n        post: operations[\"apps/create-from-manifest\"];\n    };\n    \"/app/hook/config\": {\n        /**\n         * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        get: operations[\"apps/get-webhook-config-for-app\"];\n        /**\n         * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        patch: operations[\"apps/update-webhook-config-for-app\"];\n    };\n    \"/app/installations\": {\n        /**\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         *\n         * The permissions the installation has are included under the `permissions` key.\n         */\n        get: operations[\"apps/list-installations\"];\n    };\n    \"/app/installations/{installation_id}\": {\n        /**\n         * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        get: operations[\"apps/get-installation\"];\n        /**\n         * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://docs.github.com/v3/apps/#suspend-an-app-installation)\" endpoint.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        delete: operations[\"apps/delete-installation\"];\n    };\n    \"/app/installations/{installation_id}/access_tokens\": {\n        /**\n         * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        post: operations[\"apps/create-installation-access-token\"];\n    };\n    \"/app/installations/{installation_id}/suspended\": {\n        /**\n         * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        put: operations[\"apps/suspend-installation\"];\n        /**\n         * Removes a GitHub App installation suspension.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        delete: operations[\"apps/unsuspend-installation\"];\n    };\n    \"/applications/grants\": {\n        /**\n         * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n         *\n         * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`.\n         */\n        get: operations[\"oauth-authorizations/list-grants\"];\n    };\n    \"/applications/grants/{grant_id}\": {\n        /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n        get: operations[\"oauth-authorizations/get-grant\"];\n        /**\n         * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n         *\n         * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).\n         */\n        delete: operations[\"oauth-authorizations/delete-grant\"];\n    };\n    \"/applications/{client_id}/grant\": {\n        /**\n         * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\n         * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).\n         */\n        delete: operations[\"apps/delete-authorization\"];\n    };\n    \"/applications/{client_id}/grants/{access_token}\": {\n        /**\n         * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n         *\n         * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.\n         *\n         * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under \"Authorized OAuth Apps\" on GitHub](https://github.com/settings/applications#authorized).\n         */\n        delete: operations[\"apps/revoke-grant-for-application\"];\n    };\n    \"/applications/{client_id}/token\": {\n        /** OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`. */\n        post: operations[\"apps/check-token\"];\n        /** OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. */\n        delete: operations[\"apps/delete-token\"];\n        /** OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */\n        patch: operations[\"apps/reset-token\"];\n    };\n    \"/applications/{client_id}/token/scoped\": {\n        /** Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */\n        post: operations[\"apps/scope-token\"];\n    };\n    \"/applications/{client_id}/tokens/{access_token}\": {\n        /**\n         * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n         *\n         * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.\n         */\n        get: operations[\"apps/check-authorization\"];\n        /**\n         * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n         *\n         * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.\n         */\n        post: operations[\"apps/reset-authorization\"];\n        /**\n         * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n         *\n         * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.\n         */\n        delete: operations[\"apps/revoke-authorization-for-application\"];\n    };\n    \"/apps/{app_slug}\": {\n        /**\n         * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n         *\n         * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n         */\n        get: operations[\"apps/get-by-slug\"];\n    };\n    \"/authorizations\": {\n        /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n        get: operations[\"oauth-authorizations/list-authorizations\"];\n        /**\n         * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n         *\n         * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n         *\n         * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n         *\n         * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.\n         *\n         * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).\n         *\n         * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).\n         */\n        post: operations[\"oauth-authorizations/create-authorization\"];\n    };\n    \"/authorizations/clients/{client_id}\": {\n        /**\n         * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n         *\n         * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n         *\n         * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n         *\n         * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n         *\n         * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n         */\n        put: operations[\"oauth-authorizations/get-or-create-authorization-for-app\"];\n    };\n    \"/authorizations/clients/{client_id}/{fingerprint}\": {\n        /**\n         * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n         *\n         * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n         *\n         * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n         *\n         * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n         */\n        put: operations[\"oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint\"];\n    };\n    \"/authorizations/{authorization_id}\": {\n        /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n        get: operations[\"oauth-authorizations/get-authorization\"];\n        /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n        delete: operations[\"oauth-authorizations/delete-authorization\"];\n        /**\n         * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n         *\n         * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n         *\n         * You can only send one of these scope keys at a time.\n         */\n        patch: operations[\"oauth-authorizations/update-authorization\"];\n    };\n    \"/codes_of_conduct\": {\n        get: operations[\"codes-of-conduct/get-all-codes-of-conduct\"];\n    };\n    \"/codes_of_conduct/{key}\": {\n        get: operations[\"codes-of-conduct/get-conduct-code\"];\n    };\n    \"/content_references/{content_reference_id}/attachments\": {\n        /**\n         * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.\n         *\n         * The app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://docs.github.com/apps/using-content-attachments/)\" for details about content attachments.\n         *\n         * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n         */\n        post: operations[\"apps/create-content-attachment\"];\n    };\n    \"/emojis\": {\n        /** Lists all the emojis available to use on GitHub. */\n        get: operations[\"emojis/get\"];\n    };\n    \"/enterprises/{enterprise}/actions/permissions\": {\n        /**\n         * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/get-github-actions-permissions-enterprise\"];\n        /**\n         * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        put: operations[\"enterprise-admin/set-github-actions-permissions-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/permissions/organizations\": {\n        /**\n         * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise\"];\n        /**\n         * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        put: operations[\"enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/permissions/organizations/{org_id}\": {\n        /**\n         * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        put: operations[\"enterprise-admin/enable-selected-organization-github-actions-enterprise\"];\n        /**\n         * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        delete: operations[\"enterprise-admin/disable-selected-organization-github-actions-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/permissions/selected-actions\": {\n        /**\n         * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/get-allowed-actions-enterprise\"];\n        /**\n         * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        put: operations[\"enterprise-admin/set-allowed-actions-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runner-groups\": {\n        /**\n         * Lists all self-hosted runner groups for an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/list-self-hosted-runner-groups-for-enterprise\"];\n        /**\n         * Creates a new self-hosted runner group for an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        post: operations[\"enterprise-admin/create-self-hosted-runner-group-for-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}\": {\n        /**\n         * Gets a specific self-hosted runner group for an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/get-self-hosted-runner-group-for-enterprise\"];\n        /**\n         * Deletes a self-hosted runner group for an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        delete: operations[\"enterprise-admin/delete-self-hosted-runner-group-from-enterprise\"];\n        /**\n         * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        patch: operations[\"enterprise-admin/update-self-hosted-runner-group-for-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\": {\n        /**\n         * Lists the organizations with access to a self-hosted runner group.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise\"];\n        /**\n         * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        put: operations[\"enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}\": {\n        /**\n         * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        put: operations[\"enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise\"];\n        /**\n         * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        delete: operations[\"enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\": {\n        /**\n         * Lists the self-hosted runners that are in a specific enterprise group.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/list-self-hosted-runners-in-group-for-enterprise\"];\n        /**\n         * Replaces the list of self-hosted runners that are part of an enterprise runner group.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        put: operations[\"enterprise-admin/set-self-hosted-runners-in-group-for-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\": {\n        /**\n         * Adds a self-hosted runner to a runner group configured in an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise`\n         * scope to use this endpoint.\n         */\n        put: operations[\"enterprise-admin/add-self-hosted-runner-to-group-for-enterprise\"];\n        /**\n         * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        delete: operations[\"enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runners\": {\n        /**\n         * Lists all self-hosted runners configured for an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/list-self-hosted-runners-for-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runners/downloads\": {\n        /**\n         * Lists binaries for the runner application that you can download and run.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/list-runner-applications-for-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runners/registration-token\": {\n        /**\n         * Returns a token that you can pass to the `config` script. The token expires after one hour.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         *\n         * #### Example using registration token\n         *\n         * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n         *\n         * ```\n         * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN\n         * ```\n         */\n        post: operations[\"enterprise-admin/create-registration-token-for-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runners/remove-token\": {\n        /**\n         * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         *\n         * #### Example using remove token\n         *\n         * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this\n         * endpoint.\n         *\n         * ```\n         * ./config.sh remove --token TOKEN\n         * ```\n         */\n        post: operations[\"enterprise-admin/create-remove-token-for-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/actions/runners/{runner_id}\": {\n        /**\n         * Gets a specific self-hosted runner configured in an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        get: operations[\"enterprise-admin/get-self-hosted-runner-for-enterprise\"];\n        /**\n         * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        delete: operations[\"enterprise-admin/delete-self-hosted-runner-from-enterprise\"];\n    };\n    \"/enterprises/{enterprise}/audit-log\": {\n        /**\n         * **Note:** The audit log REST API is currently in beta and is subject to change.\n         *\n         * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.\n         */\n        get: operations[\"audit-log/get-audit-log\"];\n    };\n    \"/enterprises/{enterprise}/settings/billing/actions\": {\n        /**\n         * Gets the summary of the free and paid GitHub Actions minutes used.\n         *\n         * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * The authenticated user must be an enterprise admin.\n         */\n        get: operations[\"billing/get-github-actions-billing-ghe\"];\n    };\n    \"/enterprises/{enterprise}/settings/billing/packages\": {\n        /**\n         * Gets the free and paid storage used for GitHub Packages in gigabytes.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * The authenticated user must be an enterprise admin.\n         */\n        get: operations[\"billing/get-github-packages-billing-ghe\"];\n    };\n    \"/enterprises/{enterprise}/settings/billing/shared-storage\": {\n        /**\n         * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * The authenticated user must be an enterprise admin.\n         */\n        get: operations[\"billing/get-shared-storage-billing-ghe\"];\n    };\n    \"/events\": {\n        /** We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago. */\n        get: operations[\"activity/list-public-events\"];\n    };\n    \"/feeds\": {\n        /**\n         * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n         *\n         * *   **Timeline**: The GitHub global public timeline\n         * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)\n         * *   **Current user public**: The public timeline for the authenticated user\n         * *   **Current user**: The private timeline for the authenticated user\n         * *   **Current user actor**: The private timeline for activity created by the authenticated user\n         * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n         * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n         *\n         * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.\n         */\n        get: operations[\"activity/get-feeds\"];\n    };\n    \"/gists\": {\n        /** Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists: */\n        get: operations[\"gists/list\"];\n        /**\n         * Allows you to add a new gist with one or more files.\n         *\n         * **Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.\n         */\n        post: operations[\"gists/create\"];\n    };\n    \"/gists/public\": {\n        /**\n         * List public gists sorted by most recently updated to least recently updated.\n         *\n         * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.\n         */\n        get: operations[\"gists/list-public\"];\n    };\n    \"/gists/starred\": {\n        /** List the authenticated user's starred gists: */\n        get: operations[\"gists/list-starred\"];\n    };\n    \"/gists/{gist_id}\": {\n        get: operations[\"gists/get\"];\n        delete: operations[\"gists/delete\"];\n        /** Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. */\n        patch: operations[\"gists/update\"];\n    };\n    \"/gists/{gist_id}/comments\": {\n        get: operations[\"gists/list-comments\"];\n        post: operations[\"gists/create-comment\"];\n    };\n    \"/gists/{gist_id}/comments/{comment_id}\": {\n        get: operations[\"gists/get-comment\"];\n        delete: operations[\"gists/delete-comment\"];\n        patch: operations[\"gists/update-comment\"];\n    };\n    \"/gists/{gist_id}/commits\": {\n        get: operations[\"gists/list-commits\"];\n    };\n    \"/gists/{gist_id}/forks\": {\n        get: operations[\"gists/list-forks\"];\n        /** **Note**: This was previously `/gists/:gist_id/fork`. */\n        post: operations[\"gists/fork\"];\n    };\n    \"/gists/{gist_id}/star\": {\n        get: operations[\"gists/check-is-starred\"];\n        /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\" */\n        put: operations[\"gists/star\"];\n        delete: operations[\"gists/unstar\"];\n    };\n    \"/gists/{gist_id}/{sha}\": {\n        get: operations[\"gists/get-revision\"];\n    };\n    \"/gitignore/templates\": {\n        /** List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user). */\n        get: operations[\"gitignore/get-all-templates\"];\n    };\n    \"/gitignore/templates/{name}\": {\n        /**\n         * The API also allows fetching the source of a single template.\n         * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.\n         */\n        get: operations[\"gitignore/get-template\"];\n    };\n    \"/installation/repositories\": {\n        /**\n         * List repositories that an app installation can access.\n         *\n         * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n         */\n        get: operations[\"apps/list-repos-accessible-to-installation\"];\n    };\n    \"/installation/token\": {\n        /**\n         * Revokes the installation token you're using to authenticate as an installation and access this endpoint.\n         *\n         * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)\" endpoint.\n         *\n         * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n         */\n        delete: operations[\"apps/revoke-installation-access-token\"];\n    };\n    \"/issues\": {\n        /**\n         * List issues assigned to the authenticated user across all visible repositories including owned repositories, member\n         * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\n         * necessarily assigned to you.\n         *\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        get: operations[\"issues/list\"];\n    };\n    \"/licenses\": {\n        get: operations[\"licenses/get-all-commonly-used\"];\n    };\n    \"/licenses/{license}\": {\n        get: operations[\"licenses/get\"];\n    };\n    \"/markdown\": {\n        post: operations[\"markdown/render\"];\n    };\n    \"/markdown/raw\": {\n        /** You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less. */\n        post: operations[\"markdown/render-raw\"];\n    };\n    \"/marketplace_listing/accounts/{account_id}\": {\n        /**\n         * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        get: operations[\"apps/get-subscription-plan-for-account\"];\n    };\n    \"/marketplace_listing/plans\": {\n        /**\n         * Lists all plans that are part of your GitHub Marketplace listing.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        get: operations[\"apps/list-plans\"];\n    };\n    \"/marketplace_listing/plans/{plan_id}/accounts\": {\n        /**\n         * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        get: operations[\"apps/list-accounts-for-plan\"];\n    };\n    \"/marketplace_listing/stubbed/accounts/{account_id}\": {\n        /**\n         * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        get: operations[\"apps/get-subscription-plan-for-account-stubbed\"];\n    };\n    \"/marketplace_listing/stubbed/plans\": {\n        /**\n         * Lists all plans that are part of your GitHub Marketplace listing.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        get: operations[\"apps/list-plans-stubbed\"];\n    };\n    \"/marketplace_listing/stubbed/plans/{plan_id}/accounts\": {\n        /**\n         * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        get: operations[\"apps/list-accounts-for-plan-stubbed\"];\n    };\n    \"/meta\": {\n        /**\n         * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/).\"\n         *\n         * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.\n         */\n        get: operations[\"meta/get\"];\n    };\n    \"/networks/{owner}/{repo}/events\": {\n        get: operations[\"activity/list-public-events-for-repo-network\"];\n    };\n    \"/notifications\": {\n        /** List all notifications for the current user, sorted by most recently updated. */\n        get: operations[\"activity/list-notifications-for-authenticated-user\"];\n        /** Marks all notifications as \"read\" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */\n        put: operations[\"activity/mark-notifications-as-read\"];\n    };\n    \"/notifications/threads/{thread_id}\": {\n        get: operations[\"activity/get-thread\"];\n        patch: operations[\"activity/mark-thread-as-read\"];\n    };\n    \"/notifications/threads/{thread_id}/subscription\": {\n        /**\n         * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).\n         *\n         * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.\n         */\n        get: operations[\"activity/get-thread-subscription-for-authenticated-user\"];\n        /**\n         * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n         *\n         * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n         *\n         * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.\n         */\n        put: operations[\"activity/set-thread-subscription\"];\n        /** Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`. */\n        delete: operations[\"activity/delete-thread-subscription\"];\n    };\n    \"/octocat\": {\n        /** Get the octocat as ASCII art */\n        get: operations[\"meta/get-octocat\"];\n    };\n    \"/organizations\": {\n        /**\n         * Lists all organizations, in the order that they were created on GitHub.\n         *\n         * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.\n         */\n        get: operations[\"orgs/list\"];\n    };\n    \"/orgs/{org}\": {\n        /**\n         * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n         *\n         * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See \"[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see 'Response with GitHub plan information' below.\"\n         */\n        get: operations[\"orgs/get\"];\n        /**\n         * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n         *\n         * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.\n         */\n        patch: operations[\"orgs/update\"];\n    };\n    \"/orgs/{org}/actions/permissions\": {\n        /**\n         * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        get: operations[\"actions/get-github-actions-permissions-organization\"];\n        /**\n         * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.\n         *\n         * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        put: operations[\"actions/set-github-actions-permissions-organization\"];\n    };\n    \"/orgs/{org}/actions/permissions/repositories\": {\n        /**\n         * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        get: operations[\"actions/list-selected-repositories-enabled-github-actions-organization\"];\n        /**\n         * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        put: operations[\"actions/set-selected-repositories-enabled-github-actions-organization\"];\n    };\n    \"/orgs/{org}/actions/permissions/repositories/{repository_id}\": {\n        /**\n         * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        put: operations[\"actions/enable-selected-repository-github-actions-organization\"];\n        /**\n         * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        delete: operations[\"actions/disable-selected-repository-github-actions-organization\"];\n    };\n    \"/orgs/{org}/actions/permissions/selected-actions\": {\n        /**\n         * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        get: operations[\"actions/get-allowed-actions-organization\"];\n        /**\n         * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.\n         *\n         * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        put: operations[\"actions/set-allowed-actions-organization\"];\n    };\n    \"/orgs/{org}/actions/runner-groups\": {\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        get: operations[\"actions/list-self-hosted-runner-groups-for-org\"];\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Creates a new self-hosted runner group for an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        post: operations[\"actions/create-self-hosted-runner-group-for-org\"];\n    };\n    \"/orgs/{org}/actions/runner-groups/{runner_group_id}\": {\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Gets a specific self-hosted runner group for an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        get: operations[\"actions/get-self-hosted-runner-group-for-org\"];\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Deletes a self-hosted runner group for an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        delete: operations[\"actions/delete-self-hosted-runner-group-from-org\"];\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Updates the `name` and `visibility` of a self-hosted runner group in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        patch: operations[\"actions/update-self-hosted-runner-group-for-org\"];\n    };\n    \"/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\": {\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Lists the repositories with access to a self-hosted runner group configured in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        get: operations[\"actions/list-repo-access-to-self-hosted-runner-group-in-org\"];\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        put: operations[\"actions/set-repo-access-to-self-hosted-runner-group-in-org\"];\n    };\n    \"/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}\": {\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         *\n         * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org`\n         * scope to use this endpoint.\n         */\n        put: operations[\"actions/add-repo-access-to-self-hosted-runner-group-in-org\"];\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         *\n         * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        delete: operations[\"actions/remove-repo-access-to-self-hosted-runner-group-in-org\"];\n    };\n    \"/orgs/{org}/actions/runner-groups/{runner_group_id}/runners\": {\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Lists self-hosted runners that are in a specific organization group.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        get: operations[\"actions/list-self-hosted-runners-in-group-for-org\"];\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         * Replaces the list of self-hosted runners that are part of an organization runner group.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        put: operations[\"actions/set-self-hosted-runners-in-group-for-org\"];\n    };\n    \"/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\": {\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         *\n         * Adds a self-hosted runner to a runner group configured in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org`\n         * scope to use this endpoint.\n         */\n        put: operations[\"actions/add-self-hosted-runner-to-group-for-org\"];\n        /**\n         * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n         *\n         *\n         * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        delete: operations[\"actions/remove-self-hosted-runner-from-group-for-org\"];\n    };\n    \"/orgs/{org}/actions/runners\": {\n        /**\n         * Lists all self-hosted runners configured in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        get: operations[\"actions/list-self-hosted-runners-for-org\"];\n    };\n    \"/orgs/{org}/actions/runners/downloads\": {\n        /**\n         * Lists binaries for the runner application that you can download and run.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        get: operations[\"actions/list-runner-applications-for-org\"];\n    };\n    \"/orgs/{org}/actions/runners/registration-token\": {\n        /**\n         * Returns a token that you can pass to the `config` script. The token expires after one hour.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         *\n         * #### Example using registration token\n         *\n         * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n         *\n         * ```\n         * ./config.sh --url https://github.com/octo-org --token TOKEN\n         * ```\n         */\n        post: operations[\"actions/create-registration-token-for-org\"];\n    };\n    \"/orgs/{org}/actions/runners/remove-token\": {\n        /**\n         * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         *\n         * #### Example using remove token\n         *\n         * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this\n         * endpoint.\n         *\n         * ```\n         * ./config.sh remove --token TOKEN\n         * ```\n         */\n        post: operations[\"actions/create-remove-token-for-org\"];\n    };\n    \"/orgs/{org}/actions/runners/{runner_id}\": {\n        /**\n         * Gets a specific self-hosted runner configured in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        get: operations[\"actions/get-self-hosted-runner-for-org\"];\n        /**\n         * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        delete: operations[\"actions/delete-self-hosted-runner-from-org\"];\n    };\n    \"/orgs/{org}/actions/secrets\": {\n        /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n        get: operations[\"actions/list-org-secrets\"];\n    };\n    \"/orgs/{org}/actions/secrets/public-key\": {\n        /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n        get: operations[\"actions/get-org-public-key\"];\n    };\n    \"/orgs/{org}/actions/secrets/{secret_name}\": {\n        /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n        get: operations[\"actions/get-org-secret\"];\n        /**\n         * Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n         * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\n         * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to\n         * use this endpoint.\n         *\n         * #### Example encrypting a secret using Node.js\n         *\n         * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n         *\n         * ```\n         * const sodium = require('tweetsodium');\n         *\n         * const key = \"base64-encoded-public-key\";\n         * const value = \"plain-text-secret\";\n         *\n         * // Convert the message and key to Uint8Array's (Buffer implements that interface)\n         * const messageBytes = Buffer.from(value);\n         * const keyBytes = Buffer.from(key, 'base64');\n         *\n         * // Encrypt using LibSodium.\n         * const encryptedBytes = sodium.seal(messageBytes, keyBytes);\n         *\n         * // Base64 the encrypted secret\n         * const encrypted = Buffer.from(encryptedBytes).toString('base64');\n         *\n         * console.log(encrypted);\n         * ```\n         *\n         *\n         * #### Example encrypting a secret using Python\n         *\n         * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n         *\n         * ```\n         * from base64 import b64encode\n         * from nacl import encoding, public\n         *\n         * def encrypt(public_key: str, secret_value: str) -> str:\n         *   \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n         *   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n         *   sealed_box = public.SealedBox(public_key)\n         *   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n         *   return b64encode(encrypted).decode(\"utf-8\")\n         * ```\n         *\n         * #### Example encrypting a secret using C#\n         *\n         * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n         *\n         * ```\n         * var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\n         * var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n         *\n         * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n         *\n         * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n         * ```\n         *\n         * #### Example encrypting a secret using Ruby\n         *\n         * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n         *\n         * ```ruby\n         * require \"rbnacl\"\n         * require \"base64\"\n         *\n         * key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\n         * public_key = RbNaCl::PublicKey.new(key)\n         *\n         * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)\n         * encrypted_secret = box.encrypt(\"my_secret\")\n         *\n         * # Print the base64 encoded secret\n         * puts Base64.strict_encode64(encrypted_secret)\n         * ```\n         */\n        put: operations[\"actions/create-or-update-org-secret\"];\n        /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n        delete: operations[\"actions/delete-org-secret\"];\n    };\n    \"/orgs/{org}/actions/secrets/{secret_name}/repositories\": {\n        /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n        get: operations[\"actions/list-selected-repos-for-org-secret\"];\n        /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n        put: operations[\"actions/set-selected-repos-for-org-secret\"];\n    };\n    \"/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\": {\n        /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n        put: operations[\"actions/add-selected-repo-to-org-secret\"];\n        /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n        delete: operations[\"actions/remove-selected-repo-from-org-secret\"];\n    };\n    \"/orgs/{org}/audit-log\": {\n        /**\n         * **Note:** The audit log REST API is currently in beta and is subject to change.\n         *\n         * Gets the audit log for an organization. For more information, see \"[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\"\n         *\n         * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.\n         */\n        get: operations[\"orgs/get-audit-log\"];\n    };\n    \"/orgs/{org}/blocks\": {\n        /** List the users blocked by an organization. */\n        get: operations[\"orgs/list-blocked-users\"];\n    };\n    \"/orgs/{org}/blocks/{username}\": {\n        get: operations[\"orgs/check-blocked-user\"];\n        put: operations[\"orgs/block-user\"];\n        delete: operations[\"orgs/unblock-user\"];\n    };\n    \"/orgs/{org}/credential-authorizations\": {\n        /**\n         * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).\n         *\n         * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).\n         */\n        get: operations[\"orgs/list-saml-sso-authorizations\"];\n    };\n    \"/orgs/{org}/credential-authorizations/{credential_id}\": {\n        /**\n         * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).\n         *\n         * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.\n         */\n        delete: operations[\"orgs/remove-saml-sso-authorization\"];\n    };\n    \"/orgs/{org}/events\": {\n        get: operations[\"activity/list-public-org-events\"];\n    };\n    \"/orgs/{org}/failed_invitations\": {\n        /** The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure. */\n        get: operations[\"orgs/list-failed-invitations\"];\n    };\n    \"/orgs/{org}/hooks\": {\n        get: operations[\"orgs/list-webhooks\"];\n        /** Here's how you can create a hook that posts payloads in JSON format: */\n        post: operations[\"orgs/create-webhook\"];\n    };\n    \"/orgs/{org}/hooks/{hook_id}\": {\n        /** Returns a webhook configured in an organization. To get only the webhook `config` properties, see \"[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\" */\n        get: operations[\"orgs/get-webhook\"];\n        delete: operations[\"orgs/delete-webhook\"];\n        /** Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\" */\n        patch: operations[\"orgs/update-webhook\"];\n    };\n    \"/orgs/{org}/hooks/{hook_id}/config\": {\n        /**\n         * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\"\n         *\n         * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.\n         */\n        get: operations[\"orgs/get-webhook-config-for-org\"];\n        /**\n         * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\"\n         *\n         * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.\n         */\n        patch: operations[\"orgs/update-webhook-config-for-org\"];\n    };\n    \"/orgs/{org}/hooks/{hook_id}/pings\": {\n        /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */\n        post: operations[\"orgs/ping-webhook\"];\n    };\n    \"/orgs/{org}/installation\": {\n        /**\n         * Enables an authenticated GitHub App to find the organization's installation information.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        get: operations[\"apps/get-org-installation\"];\n    };\n    \"/orgs/{org}/installations\": {\n        /** Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint. */\n        get: operations[\"orgs/list-app-installations\"];\n    };\n    \"/orgs/{org}/interaction-limits\": {\n        /** Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response. */\n        get: operations[\"interactions/get-restrictions-for-org\"];\n        /** Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization. */\n        put: operations[\"interactions/set-restrictions-for-org\"];\n        /** Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions. */\n        delete: operations[\"interactions/remove-restrictions-for-org\"];\n    };\n    \"/orgs/{org}/invitations\": {\n        /** The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`. */\n        get: operations[\"orgs/list-pending-invitations\"];\n        /**\n         * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        post: operations[\"orgs/create-invitation\"];\n    };\n    \"/orgs/{org}/invitations/{invitation_id}\": {\n        /**\n         * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).\n         */\n        delete: operations[\"orgs/cancel-invitation\"];\n    };\n    \"/orgs/{org}/invitations/{invitation_id}/teams\": {\n        /** List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner. */\n        get: operations[\"orgs/list-invitation-teams\"];\n    };\n    \"/orgs/{org}/issues\": {\n        /**\n         * List issues in an organization assigned to the authenticated user.\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        get: operations[\"issues/list-for-org\"];\n    };\n    \"/orgs/{org}/members\": {\n        /** List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. */\n        get: operations[\"orgs/list-members\"];\n    };\n    \"/orgs/{org}/members/{username}\": {\n        /** Check if a user is, publicly or privately, a member of the organization. */\n        get: operations[\"orgs/check-membership-for-user\"];\n        /** Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. */\n        delete: operations[\"orgs/remove-member\"];\n    };\n    \"/orgs/{org}/memberships/{username}\": {\n        /** In order to get a user's membership with an organization, the authenticated user must be an organization member. */\n        get: operations[\"orgs/get-membership-for-user\"];\n        /**\n         * Only authenticated organization owners can add a member to the organization or update the member's role.\n         *\n         * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n         *\n         * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n         *\n         * **Rate limits**\n         *\n         * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.\n         */\n        put: operations[\"orgs/set-membership-for-user\"];\n        /**\n         * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n         *\n         * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.\n         */\n        delete: operations[\"orgs/remove-membership-for-user\"];\n    };\n    \"/orgs/{org}/migrations\": {\n        /** Lists the most recent migrations. */\n        get: operations[\"migrations/list-for-org\"];\n        /** Initiates the generation of a migration archive. */\n        post: operations[\"migrations/start-for-org\"];\n    };\n    \"/orgs/{org}/migrations/{migration_id}\": {\n        /**\n         * Fetches the status of a migration.\n         *\n         * The `state` of a migration can be one of the following values:\n         *\n         * *   `pending`, which means the migration hasn't started yet.\n         * *   `exporting`, which means the migration is in progress.\n         * *   `exported`, which means the migration finished successfully.\n         * *   `failed`, which means the migration failed.\n         */\n        get: operations[\"migrations/get-status-for-org\"];\n    };\n    \"/orgs/{org}/migrations/{migration_id}/archive\": {\n        /** Fetches the URL to a migration archive. */\n        get: operations[\"migrations/download-archive-for-org\"];\n        /** Deletes a previous migration archive. Migration archives are automatically deleted after seven days. */\n        delete: operations[\"migrations/delete-archive-for-org\"];\n    };\n    \"/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\": {\n        /** Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data. */\n        delete: operations[\"migrations/unlock-repo-for-org\"];\n    };\n    \"/orgs/{org}/migrations/{migration_id}/repositories\": {\n        /** List all the repositories for this organization migration. */\n        get: operations[\"migrations/list-repos-for-org\"];\n    };\n    \"/orgs/{org}/outside_collaborators\": {\n        /** List all users who are outside collaborators of an organization. */\n        get: operations[\"orgs/list-outside-collaborators\"];\n    };\n    \"/orgs/{org}/outside_collaborators/{username}\": {\n        /** When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\". */\n        put: operations[\"orgs/convert-member-to-outside-collaborator\"];\n        /** Removing a user from this list will remove them from all the organization's repositories. */\n        delete: operations[\"orgs/remove-outside-collaborator\"];\n    };\n    \"/orgs/{org}/projects\": {\n        /** Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n        get: operations[\"projects/list-for-org\"];\n        /** Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n        post: operations[\"projects/create-for-org\"];\n    };\n    \"/orgs/{org}/public_members\": {\n        /** Members of an organization can choose to have their membership publicized or not. */\n        get: operations[\"orgs/list-public-members\"];\n    };\n    \"/orgs/{org}/public_members/{username}\": {\n        get: operations[\"orgs/check-public-membership-for-user\"];\n        /**\n         * The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n         *\n         * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         */\n        put: operations[\"orgs/set-public-membership-for-authenticated-user\"];\n        delete: operations[\"orgs/remove-public-membership-for-authenticated-user\"];\n    };\n    \"/orgs/{org}/repos\": {\n        /** Lists repositories for the specified organization. */\n        get: operations[\"repos/list-for-org\"];\n        /**\n         * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n         *\n         * **OAuth scope requirements**\n         *\n         * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n         *\n         * *   `public_repo` scope or `repo` scope to create a public repository\n         * *   `repo` scope to create a private repository\n         */\n        post: operations[\"repos/create-in-org\"];\n    };\n    \"/orgs/{org}/settings/billing/actions\": {\n        /**\n         * Gets the summary of the free and paid GitHub Actions minutes used.\n         *\n         * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * Access tokens must have the `repo` or `admin:org` scope.\n         */\n        get: operations[\"billing/get-github-actions-billing-org\"];\n    };\n    \"/orgs/{org}/settings/billing/packages\": {\n        /**\n         * Gets the free and paid storage usued for GitHub Packages in gigabytes.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * Access tokens must have the `repo` or `admin:org` scope.\n         */\n        get: operations[\"billing/get-github-packages-billing-org\"];\n    };\n    \"/orgs/{org}/settings/billing/shared-storage\": {\n        /**\n         * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * Access tokens must have the `repo` or `admin:org` scope.\n         */\n        get: operations[\"billing/get-shared-storage-billing-org\"];\n    };\n    \"/orgs/{org}/team-sync/groups\": {\n        /**\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"\n         *\n         * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:\n         */\n        get: operations[\"teams/list-idp-groups-for-org\"];\n    };\n    \"/orgs/{org}/teams\": {\n        /** Lists all teams in an organization that are visible to the authenticated user. */\n        get: operations[\"teams/list\"];\n        /**\n         * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"\n         *\n         * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".\n         */\n        post: operations[\"teams/create\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}\": {\n        /**\n         * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.\n         */\n        get: operations[\"teams/get-by-name\"];\n        /**\n         * To delete a team, the authenticated user must be an organization owner or team maintainer.\n         *\n         * If you are an organization owner, deleting a parent team will delete all of its child teams as well.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.\n         */\n        delete: operations[\"teams/delete-in-org\"];\n        /**\n         * To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.\n         */\n        patch: operations[\"teams/update-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/discussions\": {\n        /**\n         * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.\n         */\n        get: operations[\"teams/list-discussions-in-org\"];\n        /**\n         * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.\n         */\n        post: operations[\"teams/create-discussion-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\": {\n        /**\n         * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n         */\n        get: operations[\"teams/get-discussion-in-org\"];\n        /**\n         * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n         */\n        delete: operations[\"teams/delete-discussion-in-org\"];\n        /**\n         * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n         */\n        patch: operations[\"teams/update-discussion-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\": {\n        /**\n         * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n         */\n        get: operations[\"teams/list-discussion-comments-in-org\"];\n        /**\n         * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n         */\n        post: operations[\"teams/create-discussion-comment-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\": {\n        /**\n         * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n         */\n        get: operations[\"teams/get-discussion-comment-in-org\"];\n        /**\n         * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n         */\n        delete: operations[\"teams/delete-discussion-comment-in-org\"];\n        /**\n         * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n         */\n        patch: operations[\"teams/update-discussion-comment-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\": {\n        /**\n         * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n         */\n        get: operations[\"reactions/list-for-team-discussion-comment-in-org\"];\n        /**\n         * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n         */\n        post: operations[\"reactions/create-for-team-discussion-comment-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\": {\n        /**\n         * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n         *\n         * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        delete: operations[\"reactions/delete-for-team-discussion-comment\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\": {\n        /**\n         * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n         */\n        get: operations[\"reactions/list-for-team-discussion-in-org\"];\n        /**\n         * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n         */\n        post: operations[\"reactions/create-for-team-discussion-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\": {\n        /**\n         * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n         *\n         * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        delete: operations[\"reactions/delete-for-team-discussion\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/invitations\": {\n        /**\n         * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.\n         */\n        get: operations[\"teams/list-pending-invitations-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/members\": {\n        /**\n         * Team members will include the members of child teams.\n         *\n         * To list members in a team, the team must be visible to the authenticated user.\n         */\n        get: operations[\"teams/list-members-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/memberships/{username}\": {\n        /**\n         * Team members will include the members of child teams.\n         *\n         * To get a user's membership with a team, the team must be visible to the authenticated user.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n         *\n         * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).\n         */\n        get: operations[\"teams/get-membership-for-user-in-org\"];\n        /**\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n         *\n         * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n         *\n         * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.\n         *\n         * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n         */\n        put: operations[\"teams/add-or-update-membership-for-user-in-org\"];\n        /**\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n         *\n         * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n         */\n        delete: operations[\"teams/remove-membership-for-user-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/projects\": {\n        /**\n         * Lists the organization projects for a team.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.\n         */\n        get: operations[\"teams/list-projects-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/projects/{project_id}\": {\n        /**\n         * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n         */\n        get: operations[\"teams/check-permissions-for-project-in-org\"];\n        /**\n         * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n         */\n        put: operations[\"teams/add-or-update-project-permissions-in-org\"];\n        /**\n         * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n         */\n        delete: operations[\"teams/remove-project-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/repos\": {\n        /**\n         * Lists a team's repositories visible to the authenticated user.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.\n         */\n        get: operations[\"teams/list-repos-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\": {\n        /**\n         * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n         *\n         * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n         *\n         * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n         */\n        get: operations[\"teams/check-permissions-for-repo-in-org\"];\n        /**\n         * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n         *\n         * For more information about the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".\n         */\n        put: operations[\"teams/add-or-update-repo-permissions-in-org\"];\n        /**\n         * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n         */\n        delete: operations[\"teams/remove-repo-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/team-sync/group-mappings\": {\n        /**\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * List IdP groups connected to a team on GitHub.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.\n         */\n        get: operations[\"teams/list-idp-groups-in-org\"];\n        /**\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.\n         */\n        patch: operations[\"teams/create-or-update-idp-group-connections-in-org\"];\n    };\n    \"/orgs/{org}/teams/{team_slug}/teams\": {\n        /**\n         * Lists the child teams of the team specified by `{team_slug}`.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.\n         */\n        get: operations[\"teams/list-child-in-org\"];\n    };\n    \"/projects/columns/cards/{card_id}\": {\n        get: operations[\"projects/get-card\"];\n        delete: operations[\"projects/delete-card\"];\n        patch: operations[\"projects/update-card\"];\n    };\n    \"/projects/columns/cards/{card_id}/moves\": {\n        post: operations[\"projects/move-card\"];\n    };\n    \"/projects/columns/{column_id}\": {\n        get: operations[\"projects/get-column\"];\n        delete: operations[\"projects/delete-column\"];\n        patch: operations[\"projects/update-column\"];\n    };\n    \"/projects/columns/{column_id}/cards\": {\n        get: operations[\"projects/list-cards\"];\n        /**\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n         *\n         * Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        post: operations[\"projects/create-card\"];\n    };\n    \"/projects/columns/{column_id}/moves\": {\n        post: operations[\"projects/move-column\"];\n    };\n    \"/projects/{project_id}\": {\n        /** Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n        get: operations[\"projects/get\"];\n        /** Deletes a project board. Returns a `404 Not Found` status if projects are disabled. */\n        delete: operations[\"projects/delete\"];\n        /** Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n        patch: operations[\"projects/update\"];\n    };\n    \"/projects/{project_id}/collaborators\": {\n        /** Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators. */\n        get: operations[\"projects/list-collaborators\"];\n    };\n    \"/projects/{project_id}/collaborators/{username}\": {\n        /** Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator. */\n        put: operations[\"projects/add-collaborator\"];\n        /** Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator. */\n        delete: operations[\"projects/remove-collaborator\"];\n    };\n    \"/projects/{project_id}/collaborators/{username}/permission\": {\n        /** Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level. */\n        get: operations[\"projects/get-permission-for-user\"];\n    };\n    \"/projects/{project_id}/columns\": {\n        get: operations[\"projects/list-columns\"];\n        post: operations[\"projects/create-column\"];\n    };\n    \"/rate_limit\": {\n        /**\n         * **Note:** Accessing this endpoint does not count against your REST API rate limit.\n         *\n         * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.\n         */\n        get: operations[\"rate-limit/get\"];\n    };\n    \"/reactions/{reaction_id}\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).\n         *\n         * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).\n         */\n        delete: operations[\"reactions/delete-legacy\"];\n    };\n    \"/repos/{owner}/{repo}\": {\n        /**\n         * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.\n         *\n         * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n         */\n        get: operations[\"repos/get\"];\n        /**\n         * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n         *\n         * If an organization owner has configured the organization to prevent members from deleting organization-owned\n         * repositories, you will get a `403 Forbidden` response.\n         */\n        delete: operations[\"repos/delete\"];\n        /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint. */\n        patch: operations[\"repos/update\"];\n    };\n    \"/repos/{owner}/{repo}/actions/artifacts\": {\n        /** Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n        get: operations[\"actions/list-artifacts-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/actions/artifacts/{artifact_id}\": {\n        /** Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n        get: operations[\"actions/get-artifact\"];\n        /** Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */\n        delete: operations[\"actions/delete-artifact\"];\n    };\n    \"/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\": {\n        /**\n         * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\n         * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to\n         * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\n         * GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        get: operations[\"actions/download-artifact\"];\n    };\n    \"/repos/{owner}/{repo}/actions/jobs/{job_id}\": {\n        /** Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n        get: operations[\"actions/get-job-for-workflow-run\"];\n    };\n    \"/repos/{owner}/{repo}/actions/jobs/{job_id}/logs\": {\n        /**\n         * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\n         * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can\n         * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must\n         * have the `actions:read` permission to use this endpoint.\n         */\n        get: operations[\"actions/download-job-logs-for-workflow-run\"];\n    };\n    \"/repos/{owner}/{repo}/actions/permissions\": {\n        /**\n         * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this\n         * endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         */\n        get: operations[\"actions/get-github-actions-permissions-repository\"];\n        /**\n         * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.\n         *\n         * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         */\n        put: operations[\"actions/set-github-actions-permissions-repository\"];\n    };\n    \"/repos/{owner}/{repo}/actions/permissions/selected-actions\": {\n        /**\n         * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         */\n        get: operations[\"actions/get-allowed-actions-repository\"];\n        /**\n         * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n         *\n         * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.\n         *\n         * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         */\n        put: operations[\"actions/set-allowed-actions-repository\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runners\": {\n        /** Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. */\n        get: operations[\"actions/list-self-hosted-runners-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runners/downloads\": {\n        /**\n         * Lists binaries for the runner application that you can download and run.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint.\n         */\n        get: operations[\"actions/list-runner-applications-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runners/registration-token\": {\n        /**\n         * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\n         * using an access token with the `repo` scope to use this endpoint.\n         *\n         * #### Example using registration token\n         *\n         * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n         *\n         * ```\n         * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n         * ```\n         */\n        post: operations[\"actions/create-registration-token-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runners/remove-token\": {\n        /**\n         * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\n         * You must authenticate using an access token with the `repo` scope to use this endpoint.\n         *\n         * #### Example using remove token\n         *\n         * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.\n         *\n         * ```\n         * ./config.sh remove --token TOKEN\n         * ```\n         */\n        post: operations[\"actions/create-remove-token-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runners/{runner_id}\": {\n        /**\n         * Gets a specific self-hosted runner configured in a repository.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this\n         * endpoint.\n         */\n        get: operations[\"actions/get-self-hosted-runner-for-repo\"];\n        /**\n         * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n         *\n         * You must authenticate using an access token with the `repo`\n         * scope to use this endpoint.\n         */\n        delete: operations[\"actions/delete-self-hosted-runner-from-repo\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runs\": {\n        /**\n         * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n         *\n         * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        get: operations[\"actions/list-workflow-runs-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}\": {\n        /** Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n        get: operations[\"actions/get-workflow-run\"];\n        /**\n         * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is\n         * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use\n         * this endpoint.\n         */\n        delete: operations[\"actions/delete-workflow-run\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\": {\n        /** Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n        get: operations[\"actions/list-workflow-run-artifacts\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/cancel\": {\n        /** Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */\n        post: operations[\"actions/cancel-workflow-run\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/jobs\": {\n        /** Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters). */\n        get: operations[\"actions/list-jobs-for-workflow-run\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/logs\": {\n        /**\n         * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n         * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use\n         * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have\n         * the `actions:read` permission to use this endpoint.\n         */\n        get: operations[\"actions/download-workflow-run-logs\"];\n        /** Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */\n        delete: operations[\"actions/delete-workflow-run-logs\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/rerun\": {\n        /** Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */\n        post: operations[\"actions/re-run-workflow\"];\n    };\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/timing\": {\n        /**\n         * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        get: operations[\"actions/get-workflow-run-usage\"];\n    };\n    \"/repos/{owner}/{repo}/actions/secrets\": {\n        /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */\n        get: operations[\"actions/list-repo-secrets\"];\n    };\n    \"/repos/{owner}/{repo}/actions/secrets/public-key\": {\n        /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */\n        get: operations[\"actions/get-repo-public-key\"];\n    };\n    \"/repos/{owner}/{repo}/actions/secrets/{secret_name}\": {\n        /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */\n        get: operations[\"actions/get-repo-secret\"];\n        /**\n         * Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n         * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\n         * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\n         * this endpoint.\n         *\n         * #### Example encrypting a secret using Node.js\n         *\n         * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n         *\n         * ```\n         * const sodium = require('tweetsodium');\n         *\n         * const key = \"base64-encoded-public-key\";\n         * const value = \"plain-text-secret\";\n         *\n         * // Convert the message and key to Uint8Array's (Buffer implements that interface)\n         * const messageBytes = Buffer.from(value);\n         * const keyBytes = Buffer.from(key, 'base64');\n         *\n         * // Encrypt using LibSodium.\n         * const encryptedBytes = sodium.seal(messageBytes, keyBytes);\n         *\n         * // Base64 the encrypted secret\n         * const encrypted = Buffer.from(encryptedBytes).toString('base64');\n         *\n         * console.log(encrypted);\n         * ```\n         *\n         *\n         * #### Example encrypting a secret using Python\n         *\n         * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n         *\n         * ```\n         * from base64 import b64encode\n         * from nacl import encoding, public\n         *\n         * def encrypt(public_key: str, secret_value: str) -> str:\n         *   \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n         *   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n         *   sealed_box = public.SealedBox(public_key)\n         *   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n         *   return b64encode(encrypted).decode(\"utf-8\")\n         * ```\n         *\n         * #### Example encrypting a secret using C#\n         *\n         * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n         *\n         * ```\n         * var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\n         * var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n         *\n         * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n         *\n         * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n         * ```\n         *\n         * #### Example encrypting a secret using Ruby\n         *\n         * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n         *\n         * ```ruby\n         * require \"rbnacl\"\n         * require \"base64\"\n         *\n         * key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\n         * public_key = RbNaCl::PublicKey.new(key)\n         *\n         * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)\n         * encrypted_secret = box.encrypt(\"my_secret\")\n         *\n         * # Print the base64 encoded secret\n         * puts Base64.strict_encode64(encrypted_secret)\n         * ```\n         */\n        put: operations[\"actions/create-or-update-repo-secret\"];\n        /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */\n        delete: operations[\"actions/delete-repo-secret\"];\n    };\n    \"/repos/{owner}/{repo}/actions/workflows\": {\n        /** Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n        get: operations[\"actions/list-repo-workflows\"];\n    };\n    \"/repos/{owner}/{repo}/actions/workflows/{workflow_id}\": {\n        /** Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n        get: operations[\"actions/get-workflow\"];\n    };\n    \"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\": {\n        /**\n         * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n         */\n        put: operations[\"actions/disable-workflow\"];\n    };\n    \"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\": {\n        /**\n         * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n         *\n         * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"\n         */\n        post: operations[\"actions/create-workflow-dispatch\"];\n    };\n    \"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\": {\n        /**\n         * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n         */\n        put: operations[\"actions/enable-workflow\"];\n    };\n    \"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\": {\n        /**\n         * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n         *\n         * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\n         */\n        get: operations[\"actions/list-workflow-runs\"];\n    };\n    \"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\": {\n        /**\n         * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        get: operations[\"actions/get-workflow-usage\"];\n    };\n    \"/repos/{owner}/{repo}/assignees\": {\n        /** Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository. */\n        get: operations[\"issues/list-assignees\"];\n    };\n    \"/repos/{owner}/{repo}/assignees/{assignee}\": {\n        /**\n         * Checks if a user has permission to be assigned to an issue in this repository.\n         *\n         * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n         *\n         * Otherwise a `404` status code is returned.\n         */\n        get: operations[\"issues/check-user-can-be-assigned\"];\n    };\n    \"/repos/{owner}/{repo}/automated-security-fixes\": {\n        /** Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\". */\n        put: operations[\"repos/enable-automated-security-fixes\"];\n        /** Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\". */\n        delete: operations[\"repos/disable-automated-security-fixes\"];\n    };\n    \"/repos/{owner}/{repo}/branches\": {\n        get: operations[\"repos/list-branches\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}\": {\n        get: operations[\"repos/get-branch\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection\": {\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        get: operations[\"repos/get-branch-protection\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Protecting a branch requires admin or owner permissions to the repository.\n         *\n         * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n         *\n         * **Note**: The list of users, apps, and teams in total is limited to 100 items.\n         */\n        put: operations[\"repos/update-branch-protection\"];\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        delete: operations[\"repos/delete-branch-protection\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\": {\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        get: operations[\"repos/get-admin-branch-protection\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n         */\n        post: operations[\"repos/set-admin-branch-protection\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n         */\n        delete: operations[\"repos/delete-admin-branch-protection\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\": {\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        get: operations[\"repos/get-pull-request-review-protection\"];\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        delete: operations[\"repos/delete-pull-request-review-protection\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n         *\n         * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n         */\n        patch: operations[\"repos/update-pull-request-review-protection\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\": {\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n         *\n         * **Note**: You must enable branch protection to require signed commits.\n         */\n        get: operations[\"repos/get-commit-signature-protection\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.\n         */\n        post: operations[\"repos/create-commit-signature-protection\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.\n         */\n        delete: operations[\"repos/delete-commit-signature-protection\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\": {\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        get: operations[\"repos/get-status-checks-protection\"];\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        delete: operations[\"repos/remove-status-check-protection\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.\n         */\n        patch: operations[\"repos/update-status-check-protection\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\": {\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        get: operations[\"repos/get-all-status-check-contexts\"];\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        put: operations[\"repos/set-status-check-contexts\"];\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        post: operations[\"repos/add-status-check-contexts\"];\n        /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        delete: operations[\"repos/remove-status-check-contexts\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions\": {\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists who has access to this protected branch.\n         *\n         * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.\n         */\n        get: operations[\"repos/get-access-restrictions\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Disables the ability to restrict who can push to this branch.\n         */\n        delete: operations[\"repos/delete-access-restrictions\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\": {\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n         */\n        get: operations[\"repos/get-apps-with-access-to-protected-branch\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n         *\n         * | Type    | Description                                                                                                                                                |\n         * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        put: operations[\"repos/set-app-access-restrictions\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n         *\n         * | Type    | Description                                                                                                                                                |\n         * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        post: operations[\"repos/add-app-access-restrictions\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n         *\n         * | Type    | Description                                                                                                                                                |\n         * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        delete: operations[\"repos/remove-app-access-restrictions\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\": {\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists the teams who have push access to this branch. The list includes child teams.\n         */\n        get: operations[\"repos/get-teams-with-access-to-protected-branch\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.\n         *\n         * | Type    | Description                                                                                                                                |\n         * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n         * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        put: operations[\"repos/set-team-access-restrictions\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Grants the specified teams push access for this branch. You can also give push access to child teams.\n         *\n         * | Type    | Description                                                                                                                                |\n         * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n         * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        post: operations[\"repos/add-team-access-restrictions\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Removes the ability of a team to push to this branch. You can also remove push access for child teams.\n         *\n         * | Type    | Description                                                                                                                                         |\n         * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        delete: operations[\"repos/remove-team-access-restrictions\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\": {\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists the people who have push access to this branch.\n         */\n        get: operations[\"repos/get-users-with-access-to-protected-branch\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n         *\n         * | Type    | Description                                                                                                                   |\n         * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        put: operations[\"repos/set-user-access-restrictions\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Grants the specified people push access for this branch.\n         *\n         * | Type    | Description                                                                                                                   |\n         * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        post: operations[\"repos/add-user-access-restrictions\"];\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Removes the ability of a user to push to this branch.\n         *\n         * | Type    | Description                                                                                                                                   |\n         * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        delete: operations[\"repos/remove-user-access-restrictions\"];\n    };\n    \"/repos/{owner}/{repo}/branches/{branch}/rename\": {\n        /**\n         * Renames a branch in a repository.\n         *\n         * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \"[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\".\n         *\n         * The permissions required to use this endpoint depends on whether you are renaming the default branch.\n         *\n         * To rename a non-default branch:\n         *\n         * * Users must have push access.\n         * * GitHub Apps must have the `contents:write` repository permission.\n         *\n         * To rename the default branch:\n         *\n         * * Users must have admin or owner permissions.\n         * * GitHub Apps must have the `administration:write` repository permission.\n         */\n        post: operations[\"repos/rename-branch\"];\n    };\n    \"/repos/{owner}/{repo}/check-runs\": {\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.\n         *\n         * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.\n         */\n        post: operations[\"checks/create\"];\n    };\n    \"/repos/{owner}/{repo}/check-runs/{check_run_id}\": {\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n         */\n        get: operations[\"checks/get\"];\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.\n         */\n        patch: operations[\"checks/update\"];\n    };\n    \"/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\": {\n        /** Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository. */\n        get: operations[\"checks/list-annotations\"];\n    };\n    \"/repos/{owner}/{repo}/check-suites\": {\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n         *\n         * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\". Your GitHub App must have the `checks:write` permission to create check suites.\n         */\n        post: operations[\"checks/create-suite\"];\n    };\n    \"/repos/{owner}/{repo}/check-suites/preferences\": {\n        /** Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites. */\n        patch: operations[\"checks/set-suites-preferences\"];\n    };\n    \"/repos/{owner}/{repo}/check-suites/{check_suite_id}\": {\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n         *\n         * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.\n         */\n        get: operations[\"checks/get-suite\"];\n    };\n    \"/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\": {\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n         */\n        get: operations[\"checks/list-for-suite\"];\n    };\n    \"/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\": {\n        /**\n         * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n         *\n         * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.\n         */\n        post: operations[\"checks/rerequest-suite\"];\n    };\n    \"/repos/{owner}/{repo}/code-scanning/alerts\": {\n        /** Lists all open code scanning alerts for the default branch (usually `main` or `master`). You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint. */\n        get: operations[\"code-scanning/list-alerts-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\": {\n        /**\n         * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.\n         *\n         * The security `alert_number` is found at the end of the security alert's URL. For example, the security alert ID for `https://github.com/Octo-org/octo-repo/security/code-scanning/88` is `88`.\n         */\n        get: operations[\"code-scanning/get-alert\"];\n        /** Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint. */\n        patch: operations[\"code-scanning/update-alert\"];\n    };\n    \"/repos/{owner}/{repo}/code-scanning/analyses\": {\n        /** List the details of recent code scanning analyses for a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint. */\n        get: operations[\"code-scanning/list-recent-analyses\"];\n    };\n    \"/repos/{owner}/{repo}/code-scanning/sarifs\": {\n        /** Upload a SARIF file containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint. */\n        post: operations[\"code-scanning/upload-sarif\"];\n    };\n    \"/repos/{owner}/{repo}/collaborators\": {\n        /**\n         * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n         *\n         * Team members will include the members of child teams.\n         */\n        get: operations[\"repos/list-collaborators\"];\n    };\n    \"/repos/{owner}/{repo}/collaborators/{username}\": {\n        /**\n         * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n         *\n         * Team members will include the members of child teams.\n         */\n        get: operations[\"repos/check-collaborator\"];\n        /**\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         *\n         * For more information the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".\n         *\n         * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         *\n         * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).\n         *\n         * **Rate limits**\n         *\n         * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.\n         */\n        put: operations[\"repos/add-collaborator\"];\n        delete: operations[\"repos/remove-collaborator\"];\n    };\n    \"/repos/{owner}/{repo}/collaborators/{username}/permission\": {\n        /** Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`. */\n        get: operations[\"repos/get-collaborator-permission-level\"];\n    };\n    \"/repos/{owner}/{repo}/comments\": {\n        /**\n         * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).\n         *\n         * Comments are ordered by ascending ID.\n         */\n        get: operations[\"repos/list-commit-comments-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/comments/{comment_id}\": {\n        get: operations[\"repos/get-commit-comment\"];\n        delete: operations[\"repos/delete-commit-comment\"];\n        patch: operations[\"repos/update-commit-comment\"];\n    };\n    \"/repos/{owner}/{repo}/comments/{comment_id}/reactions\": {\n        /** List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments). */\n        get: operations[\"reactions/list-for-commit-comment\"];\n        /** Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment. */\n        post: operations[\"reactions/create-for-commit-comment\"];\n    };\n    \"/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\": {\n        /**\n         * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n         *\n         * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).\n         */\n        delete: operations[\"reactions/delete-for-commit-comment\"];\n    };\n    \"/repos/{owner}/{repo}/commits\": {\n        /**\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        get: operations[\"repos/list-commits\"];\n    };\n    \"/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\": {\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.\n         */\n        get: operations[\"repos/list-branches-for-head-commit\"];\n    };\n    \"/repos/{owner}/{repo}/commits/{commit_sha}/comments\": {\n        /** Use the `:commit_sha` to specify the commit that will have its comments listed. */\n        get: operations[\"repos/list-comments-for-commit\"];\n        /**\n         * Create a comment for a commit using its `:commit_sha`.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        post: operations[\"repos/create-commit-comment\"];\n    };\n    \"/repos/{owner}/{repo}/commits/{commit_sha}/pulls\": {\n        /** Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint. */\n        get: operations[\"repos/list-pull-requests-associated-with-commit\"];\n    };\n    \"/repos/{owner}/{repo}/commits/{ref}\": {\n        /**\n         * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n         *\n         * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n         *\n         * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n         *\n         * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        get: operations[\"repos/get-commit\"];\n    };\n    \"/repos/{owner}/{repo}/commits/{ref}/check-runs\": {\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n         */\n        get: operations[\"checks/list-for-ref\"];\n    };\n    \"/repos/{owner}/{repo}/commits/{ref}/check-suites\": {\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n         *\n         * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.\n         */\n        get: operations[\"checks/list-suites-for-ref\"];\n    };\n    \"/repos/{owner}/{repo}/commits/{ref}/status\": {\n        /**\n         * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n         *\n         * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.\n         *\n         * Additionally, a combined `state` is returned. The `state` is one of:\n         *\n         * *   **failure** if any of the contexts report as `error` or `failure`\n         * *   **pending** if there are no statuses or a context is `pending`\n         * *   **success** if the latest status for all contexts is `success`\n         */\n        get: operations[\"repos/get-combined-status-for-ref\"];\n    };\n    \"/repos/{owner}/{repo}/commits/{ref}/statuses\": {\n        /**\n         * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n         *\n         * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.\n         */\n        get: operations[\"repos/list-commit-statuses-for-ref\"];\n    };\n    \"/repos/{owner}/{repo}/community/code_of_conduct\": {\n        /**\n         * Returns the contents of the repository's code of conduct file, if one is detected.\n         *\n         * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.\n         */\n        get: operations[\"codes-of-conduct/get-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/community/profile\": {\n        /**\n         * This endpoint will return all community profile metrics, including an\n         * overall health score, repository description, the presence of documentation, detected\n         * code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE,\n         * README, and CONTRIBUTING files.\n         *\n         * The `health_percentage` score is defined as a percentage of how many of\n         * these four documents are present: README, CONTRIBUTING, LICENSE, and\n         * CODE_OF_CONDUCT. For example, if all four documents are present, then\n         * the `health_percentage` is `100`. If only one is present, then the\n         * `health_percentage` is `25`.\n         *\n         * `content_reports_enabled` is only returned for organization-owned repositories.\n         */\n        get: operations[\"repos/get-community-profile-metrics\"];\n    };\n    \"/repos/{owner}/{repo}/compare/{base}...{head}\": {\n        /**\n         * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.\n         *\n         * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n         *\n         * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n         *\n         * **Working with large comparisons**\n         *\n         * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.\n         *\n         * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long\n         * to generate. You can typically resolve this error by using a smaller commit range.\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        get: operations[\"repos/compare-commits\"];\n    };\n    \"/repos/{owner}/{repo}/contents/{path}\": {\n        /**\n         * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n         * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.\n         *\n         * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for\n         * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media\n         * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent\n         * object format.\n         *\n         * **Note**:\n         * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).\n         * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\n         * API](https://docs.github.com/rest/reference/git#get-a-tree).\n         * *   This API supports files up to 1 megabyte in size.\n         *\n         * #### If the content is a directory\n         * The response will be an array of objects, one object for each item in the directory.\n         * When listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value\n         * _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\n         * In the next major version of the API, the type will be returned as \"submodule\".\n         *\n         * #### If the content is a symlink\n         * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the\n         * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object\n         * describing the symlink itself.\n         *\n         * #### If the content is a submodule\n         * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\n         * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\n         * the submodule at that specific commit.\n         *\n         * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the\n         * github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.\n         */\n        get: operations[\"repos/get-content\"];\n        /** Creates a new file or replaces an existing file in a repository. */\n        put: operations[\"repos/create-or-update-file-contents\"];\n        /**\n         * Deletes a file in a repository.\n         *\n         * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n         *\n         * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n         *\n         * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n         */\n        delete: operations[\"repos/delete-file\"];\n    };\n    \"/repos/{owner}/{repo}/contributors\": {\n        /**\n         * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.\n         *\n         * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.\n         */\n        get: operations[\"repos/list-contributors\"];\n    };\n    \"/repos/{owner}/{repo}/deployments\": {\n        /** Simple filtering of deployments is available via query parameters: */\n        get: operations[\"repos/list-deployments\"];\n        /**\n         * Deployments offer a few configurable parameters with certain defaults.\n         *\n         * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\n         * before we merge a pull request.\n         *\n         * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\n         * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\n         * makes it easier to track which environments have requested deployments. The default environment is `production`.\n         *\n         * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\n         * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\n         * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\n         * return a failure response.\n         *\n         * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`\n         * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\n         * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\n         * not require any contexts or create any commit statuses, the deployment will always succeed.\n         *\n         * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\n         * field that will be passed on when a deployment event is dispatched.\n         *\n         * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\n         * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\n         * application with debugging enabled.\n         *\n         * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.\n         *\n         * #### Merged branch response\n         * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\n         * a deployment. This auto-merge happens when:\n         * *   Auto-merge option is enabled in the repository\n         * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n         * *   There are no merge conflicts\n         *\n         * If there are no new commits in the base branch, a new request to create a deployment should give a successful\n         * response.\n         *\n         * #### Merge conflict response\n         * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\n         * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n         *\n         * #### Failed commit status checks\n         * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\n         * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.\n         */\n        post: operations[\"repos/create-deployment\"];\n    };\n    \"/repos/{owner}/{repo}/deployments/{deployment_id}\": {\n        get: operations[\"repos/get-deployment\"];\n        /**\n         * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.\n         *\n         * To set a deployment as inactive, you must:\n         *\n         * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n         * *   Mark the active deployment as inactive by adding any non-successful deployment status.\n         *\n         * For more information, see \"[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)\" and \"[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status).\"\n         */\n        delete: operations[\"repos/delete-deployment\"];\n    };\n    \"/repos/{owner}/{repo}/deployments/{deployment_id}/statuses\": {\n        /** Users with pull access can view deployment statuses for a deployment: */\n        get: operations[\"repos/list-deployment-statuses\"];\n        /**\n         * Users with `push` access can create deployment statuses for a given deployment.\n         *\n         * GitHub Apps require `read & write` access to \"Deployments\" and `read-only` access to \"Repo contents\" (for private repos). OAuth Apps require the `repo_deployment` scope.\n         */\n        post: operations[\"repos/create-deployment-status\"];\n    };\n    \"/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\": {\n        /** Users with pull access can view a deployment status for a deployment: */\n        get: operations[\"repos/get-deployment-status\"];\n    };\n    \"/repos/{owner}/{repo}/dispatches\": {\n        /**\n         * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\"\n         *\n         * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.\n         *\n         * This endpoint requires write access to the repository by providing either:\n         *\n         *   - Personal access tokens with `repo` scope. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\" in the GitHub Help documentation.\n         *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.\n         *\n         * This input example shows how you can use the `client_payload` as a test to debug your workflow.\n         */\n        post: operations[\"repos/create-dispatch-event\"];\n    };\n    \"/repos/{owner}/{repo}/events\": {\n        get: operations[\"activity/list-repo-events\"];\n    };\n    \"/repos/{owner}/{repo}/forks\": {\n        get: operations[\"repos/list-forks\"];\n        /**\n         * Create a fork for the authenticated user.\n         *\n         * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).\n         */\n        post: operations[\"repos/create-fork\"];\n    };\n    \"/repos/{owner}/{repo}/git/blobs\": {\n        post: operations[\"git/create-blob\"];\n    };\n    \"/repos/{owner}/{repo}/git/blobs/{file_sha}\": {\n        /**\n         * The `content` in the response will always be Base64 encoded.\n         *\n         * _Note_: This API supports blobs up to 100 megabytes in size.\n         */\n        get: operations[\"git/get-blob\"];\n    };\n    \"/repos/{owner}/{repo}/git/commits\": {\n        /**\n         * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        post: operations[\"git/create-commit\"];\n    };\n    \"/repos/{owner}/{repo}/git/commits/{commit_sha}\": {\n        /**\n         * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        get: operations[\"git/get-commit\"];\n    };\n    \"/repos/{owner}/{repo}/git/matching-refs/{ref}\": {\n        /**\n         * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n         *\n         * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n         *\n         * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n         *\n         * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.\n         */\n        get: operations[\"git/list-matching-refs\"];\n    };\n    \"/repos/{owner}/{repo}/git/ref/{ref}\": {\n        /**\n         * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n         *\n         * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n         */\n        get: operations[\"git/get-ref\"];\n    };\n    \"/repos/{owner}/{repo}/git/refs\": {\n        /** Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches. */\n        post: operations[\"git/create-ref\"];\n    };\n    \"/repos/{owner}/{repo}/git/refs/{ref}\": {\n        delete: operations[\"git/delete-ref\"];\n        patch: operations[\"git/update-ref\"];\n    };\n    \"/repos/{owner}/{repo}/git/tags\": {\n        /**\n         * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        post: operations[\"git/create-tag\"];\n    };\n    \"/repos/{owner}/{repo}/git/tags/{tag_sha}\": {\n        /**\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        get: operations[\"git/get-tag\"];\n    };\n    \"/repos/{owner}/{repo}/git/trees\": {\n        /**\n         * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n         *\n         * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)\" and \"[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference).\"\n         */\n        post: operations[\"git/create-tree\"];\n    };\n    \"/repos/{owner}/{repo}/git/trees/{tree_sha}\": {\n        /**\n         * Returns a single tree using the SHA1 value for that tree.\n         *\n         * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n         */\n        get: operations[\"git/get-tree\"];\n    };\n    \"/repos/{owner}/{repo}/hooks\": {\n        get: operations[\"repos/list-webhooks\"];\n        /**\n         * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\n         * share the same `config` as long as those webhooks do not have any `events` that overlap.\n         */\n        post: operations[\"repos/create-webhook\"];\n    };\n    \"/repos/{owner}/{repo}/hooks/{hook_id}\": {\n        /** Returns a webhook configured in a repository. To get only the webhook `config` properties, see \"[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\" */\n        get: operations[\"repos/get-webhook\"];\n        delete: operations[\"repos/delete-webhook\"];\n        /** Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\" */\n        patch: operations[\"repos/update-webhook\"];\n    };\n    \"/repos/{owner}/{repo}/hooks/{hook_id}/config\": {\n        /**\n         * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use \"[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook).\"\n         *\n         * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.\n         */\n        get: operations[\"repos/get-webhook-config-for-repo\"];\n        /**\n         * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use \"[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook).\"\n         *\n         * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.\n         */\n        patch: operations[\"repos/update-webhook-config-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/hooks/{hook_id}/pings\": {\n        /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */\n        post: operations[\"repos/ping-webhook\"];\n    };\n    \"/repos/{owner}/{repo}/hooks/{hook_id}/tests\": {\n        /**\n         * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n         *\n         * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`\n         */\n        post: operations[\"repos/test-push-webhook\"];\n    };\n    \"/repos/{owner}/{repo}/import\": {\n        /**\n         * View the progress of an import.\n         *\n         * **Import status**\n         *\n         * This section includes details about the possible values of the `status` field of the Import Progress response.\n         *\n         * An import that does not have errors will progress through these steps:\n         *\n         * *   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n         * *   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n         * *   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n         * *   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\".\n         * *   `complete` - the import is complete, and the repository is ready on GitHub.\n         *\n         * If there are problems, you will see one of these in the `status` field:\n         *\n         * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n         * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.\n         * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n         * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.\n         * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n         *\n         * **The project_choices field**\n         *\n         * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n         *\n         * **Git LFS related fields**\n         *\n         * This section includes details about Git LFS related fields that may be present in the Import Progress response.\n         *\n         * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n         * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n         * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n         * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.\n         */\n        get: operations[\"migrations/get-import-status\"];\n        /** Start a source import to a GitHub repository using GitHub Importer. */\n        put: operations[\"migrations/start-import\"];\n        /** Stop an import for a repository. */\n        delete: operations[\"migrations/cancel-import\"];\n        /**\n         * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\n         * request. If no parameters are provided, the import will be restarted.\n         */\n        patch: operations[\"migrations/update-import\"];\n    };\n    \"/repos/{owner}/{repo}/import/authors\": {\n        /**\n         * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n         *\n         * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.\n         */\n        get: operations[\"migrations/get-commit-authors\"];\n    };\n    \"/repos/{owner}/{repo}/import/authors/{author_id}\": {\n        /** Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository. */\n        patch: operations[\"migrations/map-commit-author\"];\n    };\n    \"/repos/{owner}/{repo}/import/large_files\": {\n        /** List files larger than 100MB found during the import */\n        get: operations[\"migrations/get-large-files\"];\n    };\n    \"/repos/{owner}/{repo}/import/lfs\": {\n        /** You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/). */\n        patch: operations[\"migrations/set-lfs-preference\"];\n    };\n    \"/repos/{owner}/{repo}/installation\": {\n        /**\n         * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        get: operations[\"apps/get-repo-installation\"];\n    };\n    \"/repos/{owner}/{repo}/interaction-limits\": {\n        /** Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response. */\n        get: operations[\"interactions/get-restrictions-for-repo\"];\n        /** Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */\n        put: operations[\"interactions/set-restrictions-for-repo\"];\n        /** Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */\n        delete: operations[\"interactions/remove-restrictions-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/invitations\": {\n        /** When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations. */\n        get: operations[\"repos/list-invitations\"];\n    };\n    \"/repos/{owner}/{repo}/invitations/{invitation_id}\": {\n        delete: operations[\"repos/delete-invitation\"];\n        patch: operations[\"repos/update-invitation\"];\n    };\n    \"/repos/{owner}/{repo}/issues\": {\n        /**\n         * List issues in a repository.\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        get: operations[\"issues/list-for-repo\"];\n        /**\n         * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.\n         */\n        post: operations[\"issues/create\"];\n    };\n    \"/repos/{owner}/{repo}/issues/comments\": {\n        /** By default, Issue Comments are ordered by ascending ID. */\n        get: operations[\"issues/list-comments-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/issues/comments/{comment_id}\": {\n        get: operations[\"issues/get-comment\"];\n        delete: operations[\"issues/delete-comment\"];\n        patch: operations[\"issues/update-comment\"];\n    };\n    \"/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\": {\n        /** List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments). */\n        get: operations[\"reactions/list-for-issue-comment\"];\n        /** Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment. */\n        post: operations[\"reactions/create-for-issue-comment\"];\n    };\n    \"/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\": {\n        /**\n         * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n         *\n         * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).\n         */\n        delete: operations[\"reactions/delete-for-issue-comment\"];\n    };\n    \"/repos/{owner}/{repo}/issues/events\": {\n        get: operations[\"issues/list-events-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/issues/events/{event_id}\": {\n        get: operations[\"issues/get-event\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}\": {\n        /**\n         * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was\n         * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\n         * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\n         * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\n         * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\n         * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        get: operations[\"issues/get\"];\n        /** Issue owners and users with push access can edit an issue. */\n        patch: operations[\"issues/update\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/assignees\": {\n        /** Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced. */\n        post: operations[\"issues/add-assignees\"];\n        /** Removes one or more assignees from an issue. */\n        delete: operations[\"issues/remove-assignees\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/comments\": {\n        /** Issue Comments are ordered by ascending ID. */\n        get: operations[\"issues/list-comments\"];\n        /** This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details. */\n        post: operations[\"issues/create-comment\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/events\": {\n        get: operations[\"issues/list-events\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/labels\": {\n        get: operations[\"issues/list-labels-on-issue\"];\n        /** Removes any previous labels and sets the new labels for an issue. */\n        put: operations[\"issues/set-labels\"];\n        post: operations[\"issues/add-labels\"];\n        delete: operations[\"issues/remove-all-labels\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\": {\n        /** Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist. */\n        delete: operations[\"issues/remove-label\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/lock\": {\n        /**\n         * Users with push access can lock an issue or pull request's conversation.\n         *\n         * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         */\n        put: operations[\"issues/lock\"];\n        /** Users with push access can unlock an issue's conversation. */\n        delete: operations[\"issues/unlock\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/reactions\": {\n        /** List the reactions to an [issue](https://docs.github.com/rest/reference/issues). */\n        get: operations[\"reactions/list-for-issue\"];\n        /** Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue. */\n        post: operations[\"reactions/create-for-issue\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\": {\n        /**\n         * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n         *\n         * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).\n         */\n        delete: operations[\"reactions/delete-for-issue\"];\n    };\n    \"/repos/{owner}/{repo}/issues/{issue_number}/timeline\": {\n        get: operations[\"issues/list-events-for-timeline\"];\n    };\n    \"/repos/{owner}/{repo}/keys\": {\n        get: operations[\"repos/list-deploy-keys\"];\n        /** You can create a read-only deploy key. */\n        post: operations[\"repos/create-deploy-key\"];\n    };\n    \"/repos/{owner}/{repo}/keys/{key_id}\": {\n        get: operations[\"repos/get-deploy-key\"];\n        /** Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead. */\n        delete: operations[\"repos/delete-deploy-key\"];\n    };\n    \"/repos/{owner}/{repo}/labels\": {\n        get: operations[\"issues/list-labels-for-repo\"];\n        post: operations[\"issues/create-label\"];\n    };\n    \"/repos/{owner}/{repo}/labels/{name}\": {\n        get: operations[\"issues/get-label\"];\n        delete: operations[\"issues/delete-label\"];\n        patch: operations[\"issues/update-label\"];\n    };\n    \"/repos/{owner}/{repo}/languages\": {\n        /** Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language. */\n        get: operations[\"repos/list-languages\"];\n    };\n    \"/repos/{owner}/{repo}/license\": {\n        /**\n         * This method returns the contents of the repository's license file, if one is detected.\n         *\n         * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.\n         */\n        get: operations[\"licenses/get-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/merges\": {\n        post: operations[\"repos/merge\"];\n    };\n    \"/repos/{owner}/{repo}/milestones\": {\n        get: operations[\"issues/list-milestones\"];\n        post: operations[\"issues/create-milestone\"];\n    };\n    \"/repos/{owner}/{repo}/milestones/{milestone_number}\": {\n        get: operations[\"issues/get-milestone\"];\n        delete: operations[\"issues/delete-milestone\"];\n        patch: operations[\"issues/update-milestone\"];\n    };\n    \"/repos/{owner}/{repo}/milestones/{milestone_number}/labels\": {\n        get: operations[\"issues/list-labels-for-milestone\"];\n    };\n    \"/repos/{owner}/{repo}/notifications\": {\n        /** List all notifications for the current user. */\n        get: operations[\"activity/list-repo-notifications-for-authenticated-user\"];\n        /** Marks all notifications in a repository as \"read\" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */\n        put: operations[\"activity/mark-repo-notifications-as-read\"];\n    };\n    \"/repos/{owner}/{repo}/pages\": {\n        get: operations[\"repos/get-pages\"];\n        /** Updates information for a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages). */\n        put: operations[\"repos/update-information-about-pages-site\"];\n        /** Configures a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\" */\n        post: operations[\"repos/create-pages-site\"];\n        delete: operations[\"repos/delete-pages-site\"];\n    };\n    \"/repos/{owner}/{repo}/pages/builds\": {\n        get: operations[\"repos/list-pages-builds\"];\n        /**\n         * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n         *\n         * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.\n         */\n        post: operations[\"repos/request-pages-build\"];\n    };\n    \"/repos/{owner}/{repo}/pages/builds/latest\": {\n        get: operations[\"repos/get-latest-pages-build\"];\n    };\n    \"/repos/{owner}/{repo}/pages/builds/{build_id}\": {\n        get: operations[\"repos/get-pages-build\"];\n    };\n    \"/repos/{owner}/{repo}/projects\": {\n        /** Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n        get: operations[\"projects/list-for-repo\"];\n        /** Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n        post: operations[\"projects/create-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/pulls\": {\n        /** Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n        get: operations[\"pulls/list\"];\n        /**\n         * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n         *\n         * You can create a new pull request.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        post: operations[\"pulls/create\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/comments\": {\n        /** Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. */\n        get: operations[\"pulls/list-review-comments-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/comments/{comment_id}\": {\n        /** Provides details for a review comment. */\n        get: operations[\"pulls/get-review-comment\"];\n        /** Deletes a review comment. */\n        delete: operations[\"pulls/delete-review-comment\"];\n        /** Enables you to edit a review comment. */\n        patch: operations[\"pulls/update-review-comment\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\": {\n        /** List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments). */\n        get: operations[\"reactions/list-for-pull-request-review-comment\"];\n        /** Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment. */\n        post: operations[\"reactions/create-for-pull-request-review-comment\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\": {\n        /**\n         * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n         *\n         * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).\n         */\n        delete: operations[\"reactions/delete-for-pull-request-comment\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}\": {\n        /**\n         * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists details of a pull request by providing its number.\n         *\n         * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n         *\n         * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n         *\n         * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n         *\n         * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n         * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n         * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n         *\n         * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n         */\n        get: operations[\"pulls/get\"];\n        /**\n         * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n         */\n        patch: operations[\"pulls/update\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/comments\": {\n        /** Lists all review comments for a pull request. By default, review comments are in ascending order by ID. */\n        get: operations[\"pulls/list-review-comments\"];\n        /**\n         * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.\n         *\n         * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).\n         *\n         * **Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        post: operations[\"pulls/create-review-comment\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\": {\n        /**\n         * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        post: operations[\"pulls/create-reply-for-review-comment\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/commits\": {\n        /** Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint. */\n        get: operations[\"pulls/list-commits\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/files\": {\n        /** **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. */\n        get: operations[\"pulls/list-files\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/merge\": {\n        get: operations[\"pulls/check-if-merged\"];\n        /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details. */\n        put: operations[\"pulls/merge\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\": {\n        get: operations[\"pulls/list-requested-reviewers\"];\n        /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details. */\n        post: operations[\"pulls/request-reviewers\"];\n        delete: operations[\"pulls/remove-requested-reviewers\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/reviews\": {\n        /** The list of reviews returns in chronological order. */\n        get: operations[\"pulls/list-reviews\"];\n        /**\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         *\n         * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.\n         *\n         * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.\n         *\n         * The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n         */\n        post: operations[\"pulls/create-review\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\": {\n        get: operations[\"pulls/get-review\"];\n        /** Update the review summary comment with new text. */\n        put: operations[\"pulls/update-review\"];\n        delete: operations[\"pulls/delete-pending-review\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\": {\n        /** List comments for a specific pull request review. */\n        get: operations[\"pulls/list-comments-for-review\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\": {\n        /** **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. */\n        put: operations[\"pulls/dismiss-review\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\": {\n        post: operations[\"pulls/submit-review\"];\n    };\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/update-branch\": {\n        /** Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. */\n        put: operations[\"pulls/update-branch\"];\n    };\n    \"/repos/{owner}/{repo}/readme\": {\n        /**\n         * Gets the preferred README for a repository.\n         *\n         * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.\n         */\n        get: operations[\"repos/get-readme\"];\n    };\n    \"/repos/{owner}/{repo}/releases\": {\n        /**\n         * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).\n         *\n         * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.\n         */\n        get: operations[\"repos/list-releases\"];\n        /**\n         * Users with push access to the repository can create a release.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        post: operations[\"repos/create-release\"];\n    };\n    \"/repos/{owner}/{repo}/releases/assets/{asset_id}\": {\n        /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */\n        get: operations[\"repos/get-release-asset\"];\n        delete: operations[\"repos/delete-release-asset\"];\n        /** Users with push access to the repository can edit a release asset. */\n        patch: operations[\"repos/update-release-asset\"];\n    };\n    \"/repos/{owner}/{repo}/releases/latest\": {\n        /**\n         * View the latest published full release for the repository.\n         *\n         * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.\n         */\n        get: operations[\"repos/get-latest-release\"];\n    };\n    \"/repos/{owner}/{repo}/releases/tags/{tag}\": {\n        /** Get a published release with the specified tag. */\n        get: operations[\"repos/get-release-by-tag\"];\n    };\n    \"/repos/{owner}/{repo}/releases/{release_id}\": {\n        /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */\n        get: operations[\"repos/get-release\"];\n        /** Users with push access to the repository can delete a release. */\n        delete: operations[\"repos/delete-release\"];\n        /** Users with push access to the repository can edit a release. */\n        patch: operations[\"repos/update-release\"];\n    };\n    \"/repos/{owner}/{repo}/releases/{release_id}/assets\": {\n        get: operations[\"repos/list-release-assets\"];\n        /**\n         * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\n         * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.\n         *\n         * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n         *\n         * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:\n         *\n         * `application/zip`\n         *\n         * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\n         * you'll still need to pass your authentication to be able to upload an asset.\n         *\n         * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n         *\n         * **Notes:**\n         * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)\"\n         * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).\n         * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.\n         */\n        post: operations[\"repos/upload-release-asset\"];\n    };\n    \"/repos/{owner}/{repo}/secret-scanning/alerts\": {\n        /**\n         * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n         *\n         * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.\n         */\n        get: operations[\"secret-scanning/list-alerts-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\": {\n        /**\n         * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n         *\n         * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.\n         */\n        get: operations[\"secret-scanning/get-alert\"];\n        /**\n         * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n         *\n         * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.\n         */\n        patch: operations[\"secret-scanning/update-alert\"];\n    };\n    \"/repos/{owner}/{repo}/stargazers\": {\n        /**\n         * Lists the people that have starred the repository.\n         *\n         * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n         */\n        get: operations[\"activity/list-stargazers-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/stats/code_frequency\": {\n        /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */\n        get: operations[\"repos/get-code-frequency-stats\"];\n    };\n    \"/repos/{owner}/{repo}/stats/commit_activity\": {\n        /** Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`. */\n        get: operations[\"repos/get-commit-activity-stats\"];\n    };\n    \"/repos/{owner}/{repo}/stats/contributors\": {\n        /**\n         * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n         *\n         * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n         * *   `a` - Number of additions\n         * *   `d` - Number of deletions\n         * *   `c` - Number of commits\n         */\n        get: operations[\"repos/get-contributors-stats\"];\n    };\n    \"/repos/{owner}/{repo}/stats/participation\": {\n        /**\n         * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n         *\n         * The array order is oldest week (index 0) to most recent week.\n         */\n        get: operations[\"repos/get-participation-stats\"];\n    };\n    \"/repos/{owner}/{repo}/stats/punch_card\": {\n        /**\n         * Each array contains the day number, hour number, and number of commits:\n         *\n         * *   `0-6`: Sunday - Saturday\n         * *   `0-23`: Hour of day\n         * *   Number of commits\n         *\n         * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.\n         */\n        get: operations[\"repos/get-punch-card-stats\"];\n    };\n    \"/repos/{owner}/{repo}/statuses/{sha}\": {\n        /**\n         * Users with push access in a repository can create commit statuses for a given SHA.\n         *\n         * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.\n         */\n        post: operations[\"repos/create-commit-status\"];\n    };\n    \"/repos/{owner}/{repo}/subscribers\": {\n        /** Lists the people watching the specified repository. */\n        get: operations[\"activity/list-watchers-for-repo\"];\n    };\n    \"/repos/{owner}/{repo}/subscription\": {\n        get: operations[\"activity/get-repo-subscription\"];\n        /** If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely. */\n        put: operations[\"activity/set-repo-subscription\"];\n        /** This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription). */\n        delete: operations[\"activity/delete-repo-subscription\"];\n    };\n    \"/repos/{owner}/{repo}/tags\": {\n        get: operations[\"repos/list-tags\"];\n    };\n    \"/repos/{owner}/{repo}/tarball/{ref}\": {\n        /**\n         * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n         * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\n         * the `Location` header to make a second `GET` request.\n         * **Note**: For private repositories, these links are temporary and expire after five minutes.\n         */\n        get: operations[\"repos/download-tarball-archive\"];\n    };\n    \"/repos/{owner}/{repo}/teams\": {\n        get: operations[\"repos/list-teams\"];\n    };\n    \"/repos/{owner}/{repo}/topics\": {\n        get: operations[\"repos/get-all-topics\"];\n        put: operations[\"repos/replace-all-topics\"];\n    };\n    \"/repos/{owner}/{repo}/traffic/clones\": {\n        /** Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */\n        get: operations[\"repos/get-clones\"];\n    };\n    \"/repos/{owner}/{repo}/traffic/popular/paths\": {\n        /** Get the top 10 popular contents over the last 14 days. */\n        get: operations[\"repos/get-top-paths\"];\n    };\n    \"/repos/{owner}/{repo}/traffic/popular/referrers\": {\n        /** Get the top 10 referrers over the last 14 days. */\n        get: operations[\"repos/get-top-referrers\"];\n    };\n    \"/repos/{owner}/{repo}/traffic/views\": {\n        /** Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */\n        get: operations[\"repos/get-views\"];\n    };\n    \"/repos/{owner}/{repo}/transfer\": {\n        /** A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/). */\n        post: operations[\"repos/transfer\"];\n    };\n    \"/repos/{owner}/{repo}/vulnerability-alerts\": {\n        /** Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\". */\n        get: operations[\"repos/check-vulnerability-alerts\"];\n        /** Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\". */\n        put: operations[\"repos/enable-vulnerability-alerts\"];\n        /** Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\". */\n        delete: operations[\"repos/disable-vulnerability-alerts\"];\n    };\n    \"/repos/{owner}/{repo}/zipball/{ref}\": {\n        /**\n         * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n         * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\n         * the `Location` header to make a second `GET` request.\n         * **Note**: For private repositories, these links are temporary and expire after five minutes.\n         */\n        get: operations[\"repos/download-zipball-archive\"];\n    };\n    \"/repos/{template_owner}/{template_repo}/generate\": {\n        /**\n         * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n         *\n         * **OAuth scope requirements**\n         *\n         * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n         *\n         * *   `public_repo` scope or `repo` scope to create a public repository\n         * *   `repo` scope to create a private repository\n         */\n        post: operations[\"repos/create-using-template\"];\n    };\n    \"/repositories\": {\n        /**\n         * Lists all public repositories in the order that they were created.\n         *\n         * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.\n         */\n        get: operations[\"repos/list-public\"];\n    };\n    \"/scim/v2/enterprises/{enterprise}/Groups\": {\n        /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n        get: operations[\"enterprise-admin/list-provisioned-groups-enterprise\"];\n        /**\n         * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n         *\n         * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.\n         */\n        post: operations[\"enterprise-admin/provision-and-invite-enterprise-group\"];\n    };\n    \"/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\": {\n        /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n        get: operations[\"enterprise-admin/get-provisioning-information-for-enterprise-group\"];\n        /**\n         * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n         *\n         * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.\n         */\n        put: operations[\"enterprise-admin/set-information-for-provisioned-enterprise-group\"];\n        /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n        delete: operations[\"enterprise-admin/delete-scim-group-from-enterprise\"];\n        /**\n         * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n         *\n         * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n         */\n        patch: operations[\"enterprise-admin/update-attribute-for-enterprise-group\"];\n    };\n    \"/scim/v2/enterprises/{enterprise}/Users\": {\n        /**\n         * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n         *\n         * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.\n         *\n         * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:\n         *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.\n         *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).\n         *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.\n         *\n         * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:\n         *\n         * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.\n         *\n         * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.\n         *\n         * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:\n         *    - If the user signs in, their GitHub account is linked to this entry.\n         *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.\n         */\n        get: operations[\"enterprise-admin/list-provisioned-identities-enterprise\"];\n        /**\n         * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n         *\n         * Provision enterprise membership for a user, and send organization invitation emails to the email address.\n         *\n         * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.\n         */\n        post: operations[\"enterprise-admin/provision-and-invite-enterprise-user\"];\n    };\n    \"/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\": {\n        /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n        get: operations[\"enterprise-admin/get-provisioning-information-for-enterprise-user\"];\n        /**\n         * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n         *\n         * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.\n         *\n         * You must at least provide the required values for the user: `userName`, `name`, and `emails`.\n         *\n         * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.\n         */\n        put: operations[\"enterprise-admin/set-information-for-provisioned-enterprise-user\"];\n        /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n        delete: operations[\"enterprise-admin/delete-user-from-enterprise\"];\n        /**\n         * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n         *\n         * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n         *\n         * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.\n         *\n         * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.\n         *\n         * ```\n         * {\n         *   \"Operations\":[{\n         *     \"op\":\"replace\",\n         *     \"value\":{\n         *       \"active\":false\n         *     }\n         *   }]\n         * }\n         * ```\n         */\n        patch: operations[\"enterprise-admin/update-attribute-for-enterprise-user\"];\n    };\n    \"/scim/v2/organizations/{org}/Users\": {\n        /**\n         * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.\n         *\n         * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:\n         *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.\n         *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).\n         *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.\n         *\n         * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:\n         *\n         * 1. The user is granted access by the IdP and is not a member of the GitHub organization.\n         *\n         * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.\n         *\n         * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:\n         *    - If the user signs in, their GitHub account is linked to this entry.\n         *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.\n         */\n        get: operations[\"scim/list-provisioned-identities\"];\n        /** Provision organization membership for a user, and send an activation email to the email address. */\n        post: operations[\"scim/provision-and-invite-user\"];\n    };\n    \"/scim/v2/organizations/{org}/Users/{scim_user_id}\": {\n        get: operations[\"scim/get-provisioning-information-for-user\"];\n        /**\n         * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.\n         *\n         * You must at least provide the required values for the user: `userName`, `name`, and `emails`.\n         *\n         * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.\n         */\n        put: operations[\"scim/set-information-for-provisioned-user\"];\n        delete: operations[\"scim/delete-user-from-org\"];\n        /**\n         * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n         *\n         * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.\n         *\n         * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.\n         *\n         * ```\n         * {\n         *   \"Operations\":[{\n         *     \"op\":\"replace\",\n         *     \"value\":{\n         *       \"active\":false\n         *     }\n         *   }]\n         * }\n         * ```\n         */\n        patch: operations[\"scim/update-attribute-for-user\"];\n    };\n    \"/search/code\": {\n        /**\n         * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n         *\n         * `q=addClass+in:file+language:js+repo:jquery/jquery`\n         *\n         * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n         *\n         * #### Considerations for code search\n         *\n         * Due to the complexity of searching code, there are a few restrictions on how searches are performed:\n         *\n         * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n         * *   Only files smaller than 384 KB are searchable.\n         * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\n         * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n         */\n        get: operations[\"search/code\"];\n    };\n    \"/search/commits\": {\n        /**\n         * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\n         * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n         *\n         * `q=repo:octocat/Spoon-Knife+css`\n         */\n        get: operations[\"search/commits\"];\n    };\n    \"/search/issues\": {\n        /**\n         * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\n         * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n         *\n         * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n         *\n         * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n         *\n         * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see \"[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).\"\n         */\n        get: operations[\"search/issues-and-pull-requests\"];\n    };\n    \"/search/labels\": {\n        /**\n         * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n         *\n         * `q=bug+defect+enhancement&repository_id=64778136`\n         *\n         * The labels that best match the query appear first in the search results.\n         */\n        get: operations[\"search/labels\"];\n    };\n    \"/search/repositories\": {\n        /**\n         * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n         *\n         * `q=tetris+language:assembly&sort=stars&order=desc`\n         *\n         * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.\n         *\n         * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:\n         *\n         * `q=topic:ruby+topic:rails`\n         */\n        get: operations[\"search/repos\"];\n    };\n    \"/search/topics\": {\n        /**\n         * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n         *\n         * When searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n         *\n         * `q=ruby+is:featured`\n         *\n         * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.\n         */\n        get: operations[\"search/topics\"];\n    };\n    \"/search/users\": {\n        /**\n         * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you're looking for a list of popular users, you might try this query:\n         *\n         * `q=tom+repos:%3E42+followers:%3E1000`\n         *\n         * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.\n         */\n        get: operations[\"search/users\"];\n    };\n    \"/teams/{team_id}\": {\n        /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint. */\n        get: operations[\"teams/get-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.\n         *\n         * To delete a team, the authenticated user must be an organization owner or team maintainer.\n         *\n         * If you are an organization owner, deleting a parent team will delete all of its child teams as well.\n         */\n        delete: operations[\"teams/delete-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.\n         *\n         * To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n         *\n         * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.\n         */\n        patch: operations[\"teams/update-legacy\"];\n    };\n    \"/teams/{team_id}/discussions\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.\n         *\n         * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        get: operations[\"teams/list-discussions-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.\n         *\n         * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        post: operations[\"teams/create-discussion-legacy\"];\n    };\n    \"/teams/{team_id}/discussions/{discussion_number}\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.\n         *\n         * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        get: operations[\"teams/get-discussion-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.\n         *\n         * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        delete: operations[\"teams/delete-discussion-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.\n         *\n         * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        patch: operations[\"teams/update-discussion-legacy\"];\n    };\n    \"/teams/{team_id}/discussions/{discussion_number}/comments\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.\n         *\n         * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        get: operations[\"teams/list-discussion-comments-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.\n         *\n         * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        post: operations[\"teams/create-discussion-comment-legacy\"];\n    };\n    \"/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.\n         *\n         * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        get: operations[\"teams/get-discussion-comment-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.\n         *\n         * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        delete: operations[\"teams/delete-discussion-comment-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.\n         *\n         * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        patch: operations[\"teams/update-discussion-comment-legacy\"];\n    };\n    \"/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n         *\n         * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        get: operations[\"reactions/list-for-team-discussion-comment-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.\n         *\n         * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.\n         */\n        post: operations[\"reactions/create-for-team-discussion-comment-legacy\"];\n    };\n    \"/teams/{team_id}/discussions/{discussion_number}/reactions\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.\n         *\n         * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        get: operations[\"reactions/list-for-team-discussion-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.\n         *\n         * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.\n         */\n        post: operations[\"reactions/create-for-team-discussion-legacy\"];\n    };\n    \"/teams/{team_id}/invitations\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.\n         *\n         * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n         */\n        get: operations[\"teams/list-pending-invitations-legacy\"];\n    };\n    \"/teams/{team_id}/members\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.\n         *\n         * Team members will include the members of child teams.\n         */\n        get: operations[\"teams/list-members-legacy\"];\n    };\n    \"/teams/{team_id}/members/{username}\": {\n        /**\n         * The \"Get team member\" endpoint (described below) is deprecated.\n         *\n         * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n         *\n         * To list members in a team, the team must be visible to the authenticated user.\n         */\n        get: operations[\"teams/get-member-legacy\"];\n        /**\n         * The \"Add team member\" endpoint (described below) is deprecated.\n         *\n         * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.\n         *\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.\n         *\n         * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n         *\n         * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         */\n        put: operations[\"teams/add-member-legacy\"];\n        /**\n         * The \"Remove team member\" endpoint (described below) is deprecated.\n         *\n         * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.\n         *\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.\n         *\n         * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n         */\n        delete: operations[\"teams/remove-member-legacy\"];\n    };\n    \"/teams/{team_id}/memberships/{username}\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.\n         *\n         * Team members will include the members of child teams.\n         *\n         * To get a user's membership with a team, the team must be visible to the authenticated user.\n         *\n         * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).\n         */\n        get: operations[\"teams/get-membership-for-user-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.\n         *\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.\n         *\n         * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n         *\n         * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n         *\n         * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n         */\n        put: operations[\"teams/add-or-update-membership-for-user-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.\n         *\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n         *\n         * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n         */\n        delete: operations[\"teams/remove-membership-for-user-legacy\"];\n    };\n    \"/teams/{team_id}/projects\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.\n         *\n         * Lists the organization projects for a team.\n         */\n        get: operations[\"teams/list-projects-legacy\"];\n    };\n    \"/teams/{team_id}/projects/{project_id}\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.\n         *\n         * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n         */\n        get: operations[\"teams/check-permissions-for-project-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.\n         *\n         * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n         */\n        put: operations[\"teams/add-or-update-project-permissions-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.\n         *\n         * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.\n         */\n        delete: operations[\"teams/remove-project-legacy\"];\n    };\n    \"/teams/{team_id}/repos\": {\n        /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint. */\n        get: operations[\"teams/list-repos-legacy\"];\n    };\n    \"/teams/{team_id}/repos/{owner}/{repo}\": {\n        /**\n         * **Note**: Repositories inherited through a parent team will also be checked.\n         *\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.\n         *\n         * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n         */\n        get: operations[\"teams/check-permissions-for-repo-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)\" endpoint.\n         *\n         * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.\n         *\n         * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         */\n        put: operations[\"teams/add-or-update-repo-permissions-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.\n         *\n         * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.\n         */\n        delete: operations[\"teams/remove-repo-legacy\"];\n    };\n    \"/teams/{team_id}/team-sync/group-mappings\": {\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.\n         *\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * List IdP groups connected to a team on GitHub.\n         */\n        get: operations[\"teams/list-idp-groups-for-legacy\"];\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.\n         *\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.\n         */\n        patch: operations[\"teams/create-or-update-idp-group-connections-legacy\"];\n    };\n    \"/teams/{team_id}/teams\": {\n        /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint. */\n        get: operations[\"teams/list-child-legacy\"];\n    };\n    \"/user\": {\n        /**\n         * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.\n         *\n         * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.\n         */\n        get: operations[\"users/get-authenticated\"];\n        /** **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API. */\n        patch: operations[\"users/update-authenticated\"];\n    };\n    \"/user/blocks\": {\n        /** List the users you've blocked on your personal account. */\n        get: operations[\"users/list-blocked-by-authenticated\"];\n    };\n    \"/user/blocks/{username}\": {\n        get: operations[\"users/check-blocked\"];\n        put: operations[\"users/block\"];\n        delete: operations[\"users/unblock\"];\n    };\n    \"/user/email/visibility\": {\n        /** Sets the visibility for your primary email addresses. */\n        patch: operations[\"users/set-primary-email-visibility-for-authenticated\"];\n    };\n    \"/user/emails\": {\n        /** Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope. */\n        get: operations[\"users/list-emails-for-authenticated\"];\n        /** This endpoint is accessible with the `user` scope. */\n        post: operations[\"users/add-email-for-authenticated\"];\n        /** This endpoint is accessible with the `user` scope. */\n        delete: operations[\"users/delete-email-for-authenticated\"];\n    };\n    \"/user/followers\": {\n        /** Lists the people following the authenticated user. */\n        get: operations[\"users/list-followers-for-authenticated-user\"];\n    };\n    \"/user/following\": {\n        /** Lists the people who the authenticated user follows. */\n        get: operations[\"users/list-followed-by-authenticated\"];\n    };\n    \"/user/following/{username}\": {\n        get: operations[\"users/check-person-is-followed-by-authenticated\"];\n        /**\n         * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         *\n         * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.\n         */\n        put: operations[\"users/follow\"];\n        /** Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. */\n        delete: operations[\"users/unfollow\"];\n    };\n    \"/user/gpg_keys\": {\n        /** Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n        get: operations[\"users/list-gpg-keys-for-authenticated\"];\n        /** Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n        post: operations[\"users/create-gpg-key-for-authenticated\"];\n    };\n    \"/user/gpg_keys/{gpg_key_id}\": {\n        /** View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n        get: operations[\"users/get-gpg-key-for-authenticated\"];\n        /** Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n        delete: operations[\"users/delete-gpg-key-for-authenticated\"];\n    };\n    \"/user/installations\": {\n        /**\n         * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n         *\n         * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n         *\n         * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n         *\n         * You can find the permissions for the installation under the `permissions` key.\n         */\n        get: operations[\"apps/list-installations-for-authenticated-user\"];\n    };\n    \"/user/installations/{installation_id}/repositories\": {\n        /**\n         * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n         *\n         * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n         *\n         * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n         *\n         * The access the user has to each repository is included in the hash under the `permissions` key.\n         */\n        get: operations[\"apps/list-installation-repos-for-authenticated-user\"];\n    };\n    \"/user/installations/{installation_id}/repositories/{repository_id}\": {\n        /**\n         * Add a single repository to an installation. The authenticated user must have admin access to the repository.\n         *\n         * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.\n         */\n        put: operations[\"apps/add-repo-to-installation\"];\n        /**\n         * Remove a single repository from an installation. The authenticated user must have admin access to the repository.\n         *\n         * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.\n         */\n        delete: operations[\"apps/remove-repo-from-installation\"];\n    };\n    \"/user/interaction-limits\": {\n        /** Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response. */\n        get: operations[\"interactions/get-restrictions-for-authenticated-user\"];\n        /** Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user. */\n        put: operations[\"interactions/set-restrictions-for-authenticated-user\"];\n        /** Removes any interaction restrictions from your public repositories. */\n        delete: operations[\"interactions/remove-restrictions-for-authenticated-user\"];\n    };\n    \"/user/issues\": {\n        /**\n         * List issues across owned and member repositories assigned to the authenticated user.\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        get: operations[\"issues/list-for-authenticated-user\"];\n    };\n    \"/user/keys\": {\n        /** Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n        get: operations[\"users/list-public-ssh-keys-for-authenticated\"];\n        /** Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n        post: operations[\"users/create-public-ssh-key-for-authenticated\"];\n    };\n    \"/user/keys/{key_id}\": {\n        /** View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n        get: operations[\"users/get-public-ssh-key-for-authenticated\"];\n        /** Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n        delete: operations[\"users/delete-public-ssh-key-for-authenticated\"];\n    };\n    \"/user/marketplace_purchases\": {\n        /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */\n        get: operations[\"apps/list-subscriptions-for-authenticated-user\"];\n    };\n    \"/user/marketplace_purchases/stubbed\": {\n        /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */\n        get: operations[\"apps/list-subscriptions-for-authenticated-user-stubbed\"];\n    };\n    \"/user/memberships/orgs\": {\n        get: operations[\"orgs/list-memberships-for-authenticated-user\"];\n    };\n    \"/user/memberships/orgs/{org}\": {\n        get: operations[\"orgs/get-membership-for-authenticated-user\"];\n        patch: operations[\"orgs/update-membership-for-authenticated-user\"];\n    };\n    \"/user/migrations\": {\n        /** Lists all migrations a user has started. */\n        get: operations[\"migrations/list-for-authenticated-user\"];\n        /** Initiates the generation of a user migration archive. */\n        post: operations[\"migrations/start-for-authenticated-user\"];\n    };\n    \"/user/migrations/{migration_id}\": {\n        /**\n         * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n         *\n         * *   `pending` - the migration hasn't started yet.\n         * *   `exporting` - the migration is in progress.\n         * *   `exported` - the migration finished successfully.\n         * *   `failed` - the migration failed.\n         *\n         * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).\n         */\n        get: operations[\"migrations/get-status-for-authenticated-user\"];\n    };\n    \"/user/migrations/{migration_id}/archive\": {\n        /**\n         * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n         *\n         * *   attachments\n         * *   bases\n         * *   commit\\_comments\n         * *   issue\\_comments\n         * *   issue\\_events\n         * *   issues\n         * *   milestones\n         * *   organizations\n         * *   projects\n         * *   protected\\_branches\n         * *   pull\\_request\\_reviews\n         * *   pull\\_requests\n         * *   releases\n         * *   repositories\n         * *   review\\_comments\n         * *   schema\n         * *   users\n         *\n         * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.\n         */\n        get: operations[\"migrations/get-archive-for-authenticated-user\"];\n        /** Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted. */\n        delete: operations[\"migrations/delete-archive-for-authenticated-user\"];\n    };\n    \"/user/migrations/{migration_id}/repos/{repo_name}/lock\": {\n        /** Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked. */\n        delete: operations[\"migrations/unlock-repo-for-authenticated-user\"];\n    };\n    \"/user/migrations/{migration_id}/repositories\": {\n        /** Lists all the repositories for this user migration. */\n        get: operations[\"migrations/list-repos-for-user\"];\n    };\n    \"/user/orgs\": {\n        /**\n         * List organizations for the authenticated user.\n         *\n         * **OAuth scope requirements**\n         *\n         * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.\n         */\n        get: operations[\"orgs/list-for-authenticated-user\"];\n    };\n    \"/user/projects\": {\n        post: operations[\"projects/create-for-authenticated-user\"];\n    };\n    \"/user/public_emails\": {\n        /** Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope. */\n        get: operations[\"users/list-public-emails-for-authenticated\"];\n    };\n    \"/user/repos\": {\n        /**\n         * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n         *\n         * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n         */\n        get: operations[\"repos/list-for-authenticated-user\"];\n        /**\n         * Creates a new repository for the authenticated user.\n         *\n         * **OAuth scope requirements**\n         *\n         * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n         *\n         * *   `public_repo` scope or `repo` scope to create a public repository\n         * *   `repo` scope to create a private repository\n         */\n        post: operations[\"repos/create-for-authenticated-user\"];\n    };\n    \"/user/repository_invitations\": {\n        /** When authenticating as a user, this endpoint will list all currently open repository invitations for that user. */\n        get: operations[\"repos/list-invitations-for-authenticated-user\"];\n    };\n    \"/user/repository_invitations/{invitation_id}\": {\n        delete: operations[\"repos/decline-invitation\"];\n        patch: operations[\"repos/accept-invitation\"];\n    };\n    \"/user/starred\": {\n        /**\n         * Lists repositories the authenticated user has starred.\n         *\n         * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n         */\n        get: operations[\"activity/list-repos-starred-by-authenticated-user\"];\n    };\n    \"/user/starred/{owner}/{repo}\": {\n        get: operations[\"activity/check-repo-is-starred-by-authenticated-user\"];\n        /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\" */\n        put: operations[\"activity/star-repo-for-authenticated-user\"];\n        delete: operations[\"activity/unstar-repo-for-authenticated-user\"];\n    };\n    \"/user/subscriptions\": {\n        /** Lists repositories the authenticated user is watching. */\n        get: operations[\"activity/list-watched-repos-for-authenticated-user\"];\n    };\n    \"/user/teams\": {\n        /** List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/). */\n        get: operations[\"teams/list-for-authenticated-user\"];\n    };\n    \"/users\": {\n        /**\n         * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n         *\n         * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.\n         */\n        get: operations[\"users/list\"];\n    };\n    \"/users/{username}\": {\n        /**\n         * Provides publicly available information about someone with a GitHub account.\n         *\n         * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See \"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\" for details about authentication. For an example response, see 'Response with GitHub plan information' below\"\n         *\n         * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).\n         *\n         * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://docs.github.com/rest/reference/users#emails)\".\n         */\n        get: operations[\"users/get-by-username\"];\n    };\n    \"/users/{username}/events\": {\n        /** If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. */\n        get: operations[\"activity/list-events-for-authenticated-user\"];\n    };\n    \"/users/{username}/events/orgs/{org}\": {\n        /** This is the user's organization dashboard. You must be authenticated as the user to view this. */\n        get: operations[\"activity/list-org-events-for-authenticated-user\"];\n    };\n    \"/users/{username}/events/public\": {\n        get: operations[\"activity/list-public-events-for-user\"];\n    };\n    \"/users/{username}/followers\": {\n        /** Lists the people following the specified user. */\n        get: operations[\"users/list-followers-for-user\"];\n    };\n    \"/users/{username}/following\": {\n        /** Lists the people who the specified user follows. */\n        get: operations[\"users/list-following-for-user\"];\n    };\n    \"/users/{username}/following/{target_user}\": {\n        get: operations[\"users/check-following-for-user\"];\n    };\n    \"/users/{username}/gists\": {\n        /** Lists public gists for the specified user: */\n        get: operations[\"gists/list-for-user\"];\n    };\n    \"/users/{username}/gpg_keys\": {\n        /** Lists the GPG keys for a user. This information is accessible by anyone. */\n        get: operations[\"users/list-gpg-keys-for-user\"];\n    };\n    \"/users/{username}/hovercard\": {\n        /**\n         * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n         *\n         * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:\n         *\n         * ```shell\n         *  curl -u username:token\n         *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192\n         * ```\n         */\n        get: operations[\"users/get-context-for-user\"];\n    };\n    \"/users/{username}/installation\": {\n        /**\n         * Enables an authenticated GitHub App to find the user’s installation information.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        get: operations[\"apps/get-user-installation\"];\n    };\n    \"/users/{username}/keys\": {\n        /** Lists the _verified_ public SSH keys for a user. This is accessible by anyone. */\n        get: operations[\"users/list-public-keys-for-user\"];\n    };\n    \"/users/{username}/orgs\": {\n        /**\n         * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n         *\n         * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.\n         */\n        get: operations[\"orgs/list-for-user\"];\n    };\n    \"/users/{username}/projects\": {\n        get: operations[\"projects/list-for-user\"];\n    };\n    \"/users/{username}/received_events\": {\n        /** These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. */\n        get: operations[\"activity/list-received-events-for-user\"];\n    };\n    \"/users/{username}/received_events/public\": {\n        get: operations[\"activity/list-received-public-events-for-user\"];\n    };\n    \"/users/{username}/repos\": {\n        /** Lists public repositories for the specified user. */\n        get: operations[\"repos/list-for-user\"];\n    };\n    \"/users/{username}/settings/billing/actions\": {\n        /**\n         * Gets the summary of the free and paid GitHub Actions minutes used.\n         *\n         * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * Access tokens must have the `user` scope.\n         */\n        get: operations[\"billing/get-github-actions-billing-user\"];\n    };\n    \"/users/{username}/settings/billing/packages\": {\n        /**\n         * Gets the free and paid storage used for GitHub Packages in gigabytes.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * Access tokens must have the `user` scope.\n         */\n        get: operations[\"billing/get-github-packages-billing-user\"];\n    };\n    \"/users/{username}/settings/billing/shared-storage\": {\n        /**\n         * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * Access tokens must have the `user` scope.\n         */\n        get: operations[\"billing/get-shared-storage-billing-user\"];\n    };\n    \"/users/{username}/starred\": {\n        /**\n         * Lists repositories a user has starred.\n         *\n         * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n         */\n        get: operations[\"activity/list-repos-starred-by-user\"];\n    };\n    \"/users/{username}/subscriptions\": {\n        /** Lists repositories a user is watching. */\n        get: operations[\"activity/list-repos-watched-by-user\"];\n    };\n    \"/zen\": {\n        /** Get a random sentence from the Zen of GitHub */\n        get: operations[\"meta/get-zen\"];\n    };\n}\nexport interface components {\n    schemas: {\n        /** Simple User */\n        \"simple-user\": {\n            login: string;\n            id: number;\n            node_id: string;\n            avatar_url: string;\n            gravatar_id: string | null;\n            url: string;\n            html_url: string;\n            followers_url: string;\n            following_url: string;\n            gists_url: string;\n            starred_url: string;\n            subscriptions_url: string;\n            organizations_url: string;\n            repos_url: string;\n            events_url: string;\n            received_events_url: string;\n            type: string;\n            site_admin: boolean;\n            starred_at?: string;\n        } | null;\n        /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */\n        integration: {\n            /** Unique identifier of the GitHub app */\n            id: number;\n            /** The slug name of the GitHub app */\n            slug?: string;\n            node_id: string;\n            owner: components[\"schemas\"][\"simple-user\"] | null;\n            /** The name of the GitHub app */\n            name: string;\n            description: string | null;\n            external_url: string;\n            html_url: string;\n            created_at: string;\n            updated_at: string;\n            /** The set of permissions for the GitHub app */\n            permissions: {\n                issues?: string;\n                checks?: string;\n                metadata?: string;\n                contents?: string;\n                deployments?: string;\n            } & {\n                [key: string]: string;\n            };\n            /** The list of events for the GitHub app */\n            events: string[];\n            /** The number of installations associated with the GitHub app */\n            installations_count?: number;\n            client_id?: string;\n            client_secret?: string;\n            webhook_secret?: string;\n            pem?: string;\n        } & {\n            [key: string]: any;\n        };\n        /** Basic Error */\n        \"basic-error\": {\n            message?: string;\n            documentation_url?: string;\n        };\n        /** Validation Error Simple */\n        \"validation-error-simple\": {\n            message: string;\n            documentation_url: string;\n            errors?: string[];\n        };\n        /** The URL to which the payloads will be delivered. */\n        \"webhook-config-url\": string;\n        /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */\n        \"webhook-config-content-type\": string;\n        /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */\n        \"webhook-config-secret\": string;\n        /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */\n        \"webhook-config-insecure-ssl\": string;\n        /** Configuration object of the webhook */\n        \"webhook-config\": {\n            url?: components[\"schemas\"][\"webhook-config-url\"];\n            content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n            secret?: components[\"schemas\"][\"webhook-config-secret\"];\n            insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n        };\n        /** An enterprise account */\n        enterprise: {\n            /** A short description of the enterprise. */\n            description?: string | null;\n            html_url: string;\n            /** The enterprise's website URL. */\n            website_url?: string | null;\n            /** Unique identifier of the enterprise */\n            id: number;\n            node_id: string;\n            /** The name of the enterprise. */\n            name: string;\n            /** The slug url identifier for the enterprise. */\n            slug: string;\n            created_at: string | null;\n            updated_at: string | null;\n            avatar_url: string;\n        };\n        /** Installation */\n        installation: {\n            /** The ID of the installation. */\n            id: number;\n            account: (Partial<components[\"schemas\"][\"simple-user\"]> & Partial<components[\"schemas\"][\"enterprise\"]>) | null;\n            /** Describe whether all repositories have been selected or there's a selection involved */\n            repository_selection: \"all\" | \"selected\";\n            access_tokens_url: string;\n            repositories_url: string;\n            html_url: string;\n            app_id: number;\n            /** The ID of the user or organization this token is being scoped to. */\n            target_id: number;\n            target_type: string;\n            permissions: {\n                deployments?: string;\n                checks?: string;\n                metadata?: string;\n                contents?: string;\n                pull_requests?: string;\n                statuses?: string;\n                issues?: string;\n                organization_administration?: string;\n            };\n            events: string[];\n            created_at: string;\n            updated_at: string;\n            single_file_name: string | null;\n            has_multiple_single_files?: boolean;\n            single_file_paths?: string[];\n            app_slug: string;\n            suspended_by?: components[\"schemas\"][\"simple-user\"] | null;\n            suspended_at?: string | null;\n            contact_email?: string | null;\n        };\n        /** The permissions granted to the user-to-server access token. */\n        \"app-permissions\": {\n            /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`. */\n            actions?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`. */\n            administration?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`. */\n            checks?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`. */\n            content_references?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`. */\n            contents?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`. */\n            deployments?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`. */\n            environments?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`. */\n            issues?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`. */\n            metadata?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`. */\n            packages?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`. */\n            pages?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`. */\n            pull_requests?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`. */\n            repository_hooks?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`. */\n            repository_projects?: \"read\" | \"write\" | \"admin\";\n            /** The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`. */\n            secret_scanning_alerts?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`. */\n            secrets?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`. */\n            security_events?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`. */\n            single_file?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`. */\n            statuses?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`. */\n            vulnerability_alerts?: \"read\";\n            /** The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`. */\n            workflows?: \"write\";\n            /** The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`. */\n            members?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`. */\n            organization_administration?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`. */\n            organization_hooks?: \"read\" | \"write\";\n            /** The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`. */\n            organization_plan?: \"read\";\n            /** The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`. */\n            organization_projects?: \"read\" | \"write\" | \"admin\";\n            /** The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`. */\n            organization_secrets?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`. */\n            organization_self_hosted_runners?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`. */\n            organization_user_blocking?: \"read\" | \"write\";\n            /** The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`. */\n            team_discussions?: \"read\" | \"write\";\n        };\n        /** License Simple */\n        \"license-simple\": {\n            key: string;\n            name: string;\n            url: string | null;\n            spdx_id: string | null;\n            node_id: string;\n            html_url?: string;\n        };\n        /** A git repository */\n        repository: {\n            /** Unique identifier of the repository */\n            id: number;\n            node_id: string;\n            /** The name of the repository. */\n            name: string;\n            full_name: string;\n            license: components[\"schemas\"][\"license-simple\"] | null;\n            forks: number;\n            permissions?: {\n                admin: boolean;\n                pull: boolean;\n                triage?: boolean;\n                push: boolean;\n                maintain?: boolean;\n            };\n            owner: components[\"schemas\"][\"simple-user\"] | null;\n            /** Whether the repository is private or public. */\n            private: boolean;\n            html_url: string;\n            description: string | null;\n            fork: boolean;\n            url: string;\n            archive_url: string;\n            assignees_url: string;\n            blobs_url: string;\n            branches_url: string;\n            collaborators_url: string;\n            comments_url: string;\n            commits_url: string;\n            compare_url: string;\n            contents_url: string;\n            contributors_url: string;\n            deployments_url: string;\n            downloads_url: string;\n            events_url: string;\n            forks_url: string;\n            git_commits_url: string;\n            git_refs_url: string;\n            git_tags_url: string;\n            git_url: string;\n            issue_comment_url: string;\n            issue_events_url: string;\n            issues_url: string;\n            keys_url: string;\n            labels_url: string;\n            languages_url: string;\n            merges_url: string;\n            milestones_url: string;\n            notifications_url: string;\n            pulls_url: string;\n            releases_url: string;\n            ssh_url: string;\n            stargazers_url: string;\n            statuses_url: string;\n            subscribers_url: string;\n            subscription_url: string;\n            tags_url: string;\n            teams_url: string;\n            trees_url: string;\n            clone_url: string;\n            mirror_url: string | null;\n            hooks_url: string;\n            svn_url: string;\n            homepage: string | null;\n            language: string | null;\n            forks_count: number;\n            stargazers_count: number;\n            watchers_count: number;\n            size: number;\n            /** The default branch of the repository. */\n            default_branch: string;\n            open_issues_count: number;\n            /** Whether this repository acts as a template that can be used to generate new repositories. */\n            is_template?: boolean;\n            topics?: string[];\n            /** Whether issues are enabled. */\n            has_issues: boolean;\n            /** Whether projects are enabled. */\n            has_projects: boolean;\n            /** Whether the wiki is enabled. */\n            has_wiki: boolean;\n            has_pages: boolean;\n            /** Whether downloads are enabled. */\n            has_downloads: boolean;\n            /** Whether the repository is archived. */\n            archived: boolean;\n            /** Returns whether or not this repository disabled. */\n            disabled: boolean;\n            /** The repository visibility: public, private, or internal. */\n            visibility?: string;\n            pushed_at: string | null;\n            created_at: string | null;\n            updated_at: string | null;\n            /** Whether to allow rebase merges for pull requests. */\n            allow_rebase_merge?: boolean;\n            template_repository?: {\n                id?: number;\n                node_id?: string;\n                name?: string;\n                full_name?: string;\n                owner?: {\n                    login?: string;\n                    id?: number;\n                    node_id?: string;\n                    avatar_url?: string;\n                    gravatar_id?: string;\n                    url?: string;\n                    html_url?: string;\n                    followers_url?: string;\n                    following_url?: string;\n                    gists_url?: string;\n                    starred_url?: string;\n                    subscriptions_url?: string;\n                    organizations_url?: string;\n                    repos_url?: string;\n                    events_url?: string;\n                    received_events_url?: string;\n                    type?: string;\n                    site_admin?: boolean;\n                };\n                private?: boolean;\n                html_url?: string;\n                description?: string;\n                fork?: boolean;\n                url?: string;\n                archive_url?: string;\n                assignees_url?: string;\n                blobs_url?: string;\n                branches_url?: string;\n                collaborators_url?: string;\n                comments_url?: string;\n                commits_url?: string;\n                compare_url?: string;\n                contents_url?: string;\n                contributors_url?: string;\n                deployments_url?: string;\n                downloads_url?: string;\n                events_url?: string;\n                forks_url?: string;\n                git_commits_url?: string;\n                git_refs_url?: string;\n                git_tags_url?: string;\n                git_url?: string;\n                issue_comment_url?: string;\n                issue_events_url?: string;\n                issues_url?: string;\n                keys_url?: string;\n                labels_url?: string;\n                languages_url?: string;\n                merges_url?: string;\n                milestones_url?: string;\n                notifications_url?: string;\n                pulls_url?: string;\n                releases_url?: string;\n                ssh_url?: string;\n                stargazers_url?: string;\n                statuses_url?: string;\n                subscribers_url?: string;\n                subscription_url?: string;\n                tags_url?: string;\n                teams_url?: string;\n                trees_url?: string;\n                clone_url?: string;\n                mirror_url?: string;\n                hooks_url?: string;\n                svn_url?: string;\n                homepage?: string;\n                language?: string;\n                forks_count?: number;\n                stargazers_count?: number;\n                watchers_count?: number;\n                size?: number;\n                default_branch?: string;\n                open_issues_count?: number;\n                is_template?: boolean;\n                topics?: string[];\n                has_issues?: boolean;\n                has_projects?: boolean;\n                has_wiki?: boolean;\n                has_pages?: boolean;\n                has_downloads?: boolean;\n                archived?: boolean;\n                disabled?: boolean;\n                visibility?: string;\n                pushed_at?: string;\n                created_at?: string;\n                updated_at?: string;\n                permissions?: {\n                    admin?: boolean;\n                    push?: boolean;\n                    pull?: boolean;\n                };\n                allow_rebase_merge?: boolean;\n                temp_clone_token?: string;\n                allow_squash_merge?: boolean;\n                delete_branch_on_merge?: boolean;\n                allow_merge_commit?: boolean;\n                subscribers_count?: number;\n                network_count?: number;\n            } | null;\n            temp_clone_token?: string;\n            /** Whether to allow squash merges for pull requests. */\n            allow_squash_merge?: boolean;\n            /** Whether to delete head branches when pull requests are merged */\n            delete_branch_on_merge?: boolean;\n            /** Whether to allow merge commits for pull requests. */\n            allow_merge_commit?: boolean;\n            subscribers_count?: number;\n            network_count?: number;\n            open_issues: number;\n            watchers: number;\n            master_branch?: string;\n            starred_at?: string;\n        };\n        /** Authentication token for a GitHub App installed on a user or org. */\n        \"installation-token\": {\n            token: string;\n            expires_at: string;\n            permissions?: {\n                issues?: string;\n                contents?: string;\n                metadata?: string;\n                single_file?: string;\n            };\n            repository_selection?: \"all\" | \"selected\";\n            repositories?: components[\"schemas\"][\"repository\"][];\n            single_file?: string;\n            has_multiple_single_files?: boolean;\n            single_file_paths?: string[];\n        };\n        /** Validation Error */\n        \"validation-error\": {\n            message: string;\n            documentation_url: string;\n            errors?: {\n                resource?: string;\n                field?: string;\n                message?: string;\n                code: string;\n                index?: number;\n                value?: (string | null) | (number | null) | (string[] | null);\n            }[];\n        };\n        /** The authorization associated with an OAuth Access. */\n        \"application-grant\": {\n            id: number;\n            url: string;\n            app: {\n                client_id: string;\n                name: string;\n                url: string;\n            };\n            created_at: string;\n            updated_at: string;\n            scopes: string[];\n            user?: components[\"schemas\"][\"simple-user\"] | null;\n        };\n        \"scoped-installation\": {\n            permissions: components[\"schemas\"][\"app-permissions\"];\n            /** Describe whether all repositories have been selected or there's a selection involved */\n            repository_selection: \"all\" | \"selected\";\n            single_file_name: string | null;\n            has_multiple_single_files?: boolean;\n            single_file_paths?: string[];\n            repositories_url: string;\n            account: components[\"schemas\"][\"simple-user\"];\n        };\n        /** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */\n        authorization: {\n            id: number;\n            url: string;\n            /** A list of scopes that this authorization is in. */\n            scopes: string[] | null;\n            token: string;\n            token_last_eight: string | null;\n            hashed_token: string | null;\n            app: {\n                client_id: string;\n                name: string;\n                url: string;\n            };\n            note: string | null;\n            note_url: string | null;\n            updated_at: string;\n            created_at: string;\n            fingerprint: string | null;\n            user?: components[\"schemas\"][\"simple-user\"] | null;\n            installation?: components[\"schemas\"][\"scoped-installation\"] | null;\n        };\n        /** Code Of Conduct */\n        \"code-of-conduct\": {\n            key: string;\n            name: string;\n            url: string;\n            body?: string;\n            html_url: string | null;\n        };\n        /** Content Reference attachments allow you to provide context around URLs posted in comments */\n        \"content-reference-attachment\": {\n            /** The ID of the attachment */\n            id: number;\n            /** The title of the attachment */\n            title: string;\n            /** The body of the attachment */\n            body: string;\n            /** The node_id of the content attachment */\n            node_id?: string;\n        };\n        /** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */\n        \"enabled-organizations\": \"all\" | \"none\" | \"selected\";\n        /** The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */\n        \"allowed-actions\": \"all\" | \"local_only\" | \"selected\";\n        /** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */\n        \"selected-actions-url\": string;\n        \"actions-enterprise-permissions\": {\n            enabled_organizations: components[\"schemas\"][\"enabled-organizations\"];\n            /** The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */\n            selected_organizations_url?: string;\n            allowed_actions: components[\"schemas\"][\"allowed-actions\"];\n            selected_actions_url?: components[\"schemas\"][\"selected-actions-url\"];\n        };\n        /** Organization Simple */\n        \"organization-simple\": {\n            login: string;\n            id: number;\n            node_id: string;\n            url: string;\n            repos_url: string;\n            events_url: string;\n            hooks_url: string;\n            issues_url: string;\n            members_url: string;\n            public_members_url: string;\n            avatar_url: string;\n            description: string | null;\n        };\n        \"selected-actions\": {\n            /** Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */\n            github_owned_allowed: boolean;\n            /** Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators. */\n            verified_allowed: boolean;\n            /** Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\" */\n            patterns_allowed: string[];\n        };\n        \"runner-groups-enterprise\": {\n            id: number;\n            name: string;\n            visibility: string;\n            default: boolean;\n            selected_organizations_url?: string;\n            runners_url: string;\n            allows_public_repositories: boolean;\n        };\n        /** A self hosted runner */\n        runner: {\n            /** The id of the runner. */\n            id: number;\n            /** The name of the runner. */\n            name: string;\n            /** The Operating System of the runner. */\n            os: string;\n            /** The status of the runner. */\n            status: string;\n            busy: boolean;\n            labels: {\n                /** Unique identifier of the label. */\n                id?: number;\n                /** Name of the label. */\n                name?: string;\n                /** The type of label. Read-only labels are applied automatically when the runner is configured. */\n                type?: \"read-only\" | \"custom\";\n            }[];\n        };\n        /** Runner Application */\n        \"runner-application\": {\n            os: string;\n            architecture: string;\n            download_url: string;\n            filename: string;\n        };\n        /** Authentication Token */\n        \"authentication-token\": {\n            /** The token used for authentication */\n            token: string;\n            /** The time this token expires */\n            expires_at: string;\n            permissions?: {\n                [key: string]: any;\n            };\n            /** The repositories this token has access to */\n            repositories?: components[\"schemas\"][\"repository\"][];\n            single_file?: string | null;\n            /** Describe whether all repositories have been selected or there's a selection involved */\n            repository_selection?: \"all\" | \"selected\";\n        };\n        \"audit-log-event\": {\n            /** The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */\n            \"@timestamp\"?: number;\n            /** The name of the action that was performed, for example `user.login` or `repo.create`. */\n            action?: string;\n            active?: boolean;\n            active_was?: boolean;\n            /** The actor who performed the action. */\n            actor?: string;\n            /** The username of the account being blocked. */\n            blocked_user?: string;\n            business?: string;\n            config?: any[];\n            config_was?: any[];\n            content_type?: string;\n            /** The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */\n            created_at?: number;\n            deploy_key_fingerprint?: string;\n            emoji?: string;\n            events?: any[];\n            events_were?: any[];\n            explanation?: string;\n            fingerprint?: string;\n            hook_id?: number;\n            limited_availability?: boolean;\n            message?: string;\n            name?: string;\n            old_user?: string;\n            openssh_public_key?: string;\n            org?: string;\n            previous_visibility?: string;\n            read_only?: boolean;\n            /** The name of the repository. */\n            repo?: string;\n            /** The name of the repository. */\n            repository?: string;\n            repository_public?: boolean;\n            target_login?: string;\n            team?: string;\n            /** The type of protocol (for example, HTTP or SSH) used to transfer Git data. */\n            transport_protocol?: number;\n            /** A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */\n            transport_protocol_name?: string;\n            /** The user that was affected by the action performed (if available). */\n            user?: string;\n            /** The repository visibility, for example `public` or `private`. */\n            visibility?: string;\n        };\n        \"actions-billing-usage\": {\n            /** The sum of the free and paid GitHub Actions minutes used. */\n            total_minutes_used: number;\n            /** The total paid GitHub Actions minutes used. */\n            total_paid_minutes_used: number;\n            /** The amount of free GitHub Actions minutes available. */\n            included_minutes: number;\n            minutes_used_breakdown: {\n                /** Total minutes used on Ubuntu runner machines. */\n                UBUNTU?: number;\n                /** Total minutes used on macOS runner machines. */\n                MACOS?: number;\n                /** Total minutes used on Windows runner machines. */\n                WINDOWS?: number;\n            };\n        };\n        \"packages-billing-usage\": {\n            /** Sum of the free and paid storage space (GB) for GitHuub Packages. */\n            total_gigabytes_bandwidth_used: number;\n            /** Total paid storage space (GB) for GitHuub Packages. */\n            total_paid_gigabytes_bandwidth_used: number;\n            /** Free storage space (GB) for GitHub Packages. */\n            included_gigabytes_bandwidth: number;\n        };\n        \"combined-billing-usage\": {\n            /** Numbers of days left in billing cycle. */\n            days_left_in_billing_cycle: number;\n            /** Estimated storage space (GB) used in billing cycle. */\n            estimated_paid_storage_for_month: number;\n            /** Estimated sum of free and paid storage space (GB) used in billing cycle. */\n            estimated_storage_for_month: number;\n        };\n        /** Actor */\n        actor: {\n            id: number;\n            login: string;\n            display_login?: string;\n            gravatar_id: string | null;\n            url: string;\n            avatar_url: string;\n        };\n        /** Color-coded labels help you categorize and filter your issues (just like labels in Gmail). */\n        label: {\n            id: number;\n            node_id: string;\n            /** URL for the label */\n            url: string;\n            /** The name of the label. */\n            name: string;\n            description: string | null;\n            /** 6-character hex code, without the leading #, identifying the color */\n            color: string;\n            default: boolean;\n        };\n        /** A collection of related issues and pull requests. */\n        milestone: {\n            url: string;\n            html_url: string;\n            labels_url: string;\n            id: number;\n            node_id: string;\n            /** The number of the milestone. */\n            number: number;\n            /** The state of the milestone. */\n            state: \"open\" | \"closed\";\n            /** The title of the milestone. */\n            title: string;\n            description: string | null;\n            creator: components[\"schemas\"][\"simple-user\"] | null;\n            open_issues: number;\n            closed_issues: number;\n            created_at: string;\n            updated_at: string;\n            closed_at: string | null;\n            due_on: string | null;\n        };\n        /** How the author is associated with the repository. */\n        author_association: \"COLLABORATOR\" | \"CONTRIBUTOR\" | \"FIRST_TIMER\" | \"FIRST_TIME_CONTRIBUTOR\" | \"MANNEQUIN\" | \"MEMBER\" | \"NONE\" | \"OWNER\";\n        /** Issue Simple */\n        \"issue-simple\": {\n            id: number;\n            node_id: string;\n            url: string;\n            repository_url: string;\n            labels_url: string;\n            comments_url: string;\n            events_url: string;\n            html_url: string;\n            number: number;\n            state: string;\n            title: string;\n            body?: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            labels: components[\"schemas\"][\"label\"][];\n            assignee: components[\"schemas\"][\"simple-user\"] | null;\n            assignees?: components[\"schemas\"][\"simple-user\"][] | null;\n            milestone: components[\"schemas\"][\"milestone\"] | null;\n            locked: boolean;\n            active_lock_reason?: string | null;\n            comments: number;\n            pull_request?: {\n                merged_at?: string | null;\n                diff_url: string | null;\n                html_url: string | null;\n                patch_url: string | null;\n                url: string | null;\n            };\n            closed_at: string | null;\n            created_at: string;\n            updated_at: string;\n            author_association: components[\"schemas\"][\"author_association\"];\n            body_html?: string;\n            body_text?: string;\n            timeline_url?: string;\n            repository?: components[\"schemas\"][\"repository\"];\n            performed_via_github_app?: components[\"schemas\"][\"integration\"] | null;\n        };\n        \"reaction-rollup\": {\n            url: string;\n            total_count: number;\n            \"+1\": number;\n            \"-1\": number;\n            laugh: number;\n            confused: number;\n            heart: number;\n            hooray: number;\n            eyes: number;\n            rocket: number;\n        };\n        /** Comments provide a way for people to collaborate on an issue. */\n        \"issue-comment\": {\n            /** Unique identifier of the issue comment */\n            id: number;\n            node_id: string;\n            /** URL for the issue comment */\n            url: string;\n            /** Contents of the issue comment */\n            body?: string;\n            body_text?: string;\n            body_html?: string;\n            html_url: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            created_at: string;\n            updated_at: string;\n            issue_url: string;\n            author_association: components[\"schemas\"][\"author_association\"];\n            performed_via_github_app?: components[\"schemas\"][\"integration\"] | null;\n            reactions?: components[\"schemas\"][\"reaction-rollup\"];\n        };\n        /** Event */\n        event: {\n            id: string;\n            type: string | null;\n            actor: components[\"schemas\"][\"actor\"];\n            repo: {\n                id: number;\n                name: string;\n                url: string;\n            };\n            org?: components[\"schemas\"][\"actor\"];\n            payload: {\n                action: string;\n                issue?: components[\"schemas\"][\"issue-simple\"];\n                comment?: components[\"schemas\"][\"issue-comment\"];\n                pages?: {\n                    page_name?: string;\n                    title?: string;\n                    summary?: string | null;\n                    action?: string;\n                    sha?: string;\n                    html_url?: string;\n                }[];\n            };\n            public: boolean;\n            created_at: string | null;\n        };\n        /** Hypermedia Link with Type */\n        \"link-with-type\": {\n            href: string;\n            type: string;\n        };\n        /** Feed */\n        feed: {\n            timeline_url: string;\n            user_url: string;\n            current_user_public_url?: string;\n            current_user_url?: string;\n            current_user_actor_url?: string;\n            current_user_organization_url?: string;\n            current_user_organization_urls?: string[];\n            security_advisories_url?: string;\n            _links: {\n                timeline: components[\"schemas\"][\"link-with-type\"];\n                user: components[\"schemas\"][\"link-with-type\"];\n                security_advisories?: components[\"schemas\"][\"link-with-type\"];\n                current_user?: components[\"schemas\"][\"link-with-type\"];\n                current_user_public?: components[\"schemas\"][\"link-with-type\"];\n                current_user_actor?: components[\"schemas\"][\"link-with-type\"];\n                current_user_organization?: components[\"schemas\"][\"link-with-type\"];\n                current_user_organizations?: components[\"schemas\"][\"link-with-type\"][];\n            };\n        };\n        /** Base Gist */\n        \"base-gist\": {\n            url: string;\n            forks_url: string;\n            commits_url: string;\n            id: string;\n            node_id: string;\n            git_pull_url: string;\n            git_push_url: string;\n            html_url: string;\n            files: {\n                [key: string]: {\n                    filename?: string;\n                    type?: string;\n                    language?: string;\n                    raw_url?: string;\n                    size?: number;\n                };\n            };\n            public: boolean;\n            created_at: string;\n            updated_at: string;\n            description: string | null;\n            comments: number;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            comments_url: string;\n            owner?: components[\"schemas\"][\"simple-user\"] | null;\n            truncated?: boolean;\n            forks?: {\n                [key: string]: any;\n            }[];\n            history?: {\n                [key: string]: any;\n            }[];\n        };\n        /** Gist Simple */\n        \"gist-simple\": {\n            url?: string;\n            forks_url?: string;\n            commits_url?: string;\n            id?: string;\n            node_id?: string;\n            git_pull_url?: string;\n            git_push_url?: string;\n            html_url?: string;\n            files?: {\n                [key: string]: {\n                    filename?: string;\n                    type?: string;\n                    language?: string;\n                    raw_url?: string;\n                    size?: number;\n                    truncated?: boolean;\n                    content?: string;\n                } | null;\n            };\n            public?: boolean;\n            created_at?: string;\n            updated_at?: string;\n            description?: string | null;\n            comments?: number;\n            user?: string | null;\n            comments_url?: string;\n            owner?: components[\"schemas\"][\"simple-user\"];\n            truncated?: boolean;\n        };\n        /** A comment made to a gist. */\n        \"gist-comment\": {\n            id: number;\n            node_id: string;\n            url: string;\n            /** The comment text. */\n            body: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            created_at: string;\n            updated_at: string;\n            author_association: components[\"schemas\"][\"author_association\"];\n        };\n        /** Gist Commit */\n        \"gist-commit\": {\n            url: string;\n            version: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            change_status: {\n                total?: number;\n                additions?: number;\n                deletions?: number;\n            };\n            committed_at: string;\n        };\n        /** Gitignore Template */\n        \"gitignore-template\": {\n            name: string;\n            source: string;\n        };\n        /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */\n        issue: {\n            id: number;\n            node_id: string;\n            /** URL for the issue */\n            url: string;\n            repository_url: string;\n            labels_url: string;\n            comments_url: string;\n            events_url: string;\n            html_url: string;\n            /** Number uniquely identifying the issue within its repository */\n            number: number;\n            /** State of the issue; either 'open' or 'closed' */\n            state: string;\n            /** Title of the issue */\n            title: string;\n            /** Contents of the issue */\n            body?: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            /** Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */\n            labels: (string | {\n                id?: number;\n                node_id?: string;\n                url?: string;\n                name?: string;\n                description?: string | null;\n                color?: string | null;\n                default?: boolean;\n            })[];\n            assignee: components[\"schemas\"][\"simple-user\"] | null;\n            assignees?: components[\"schemas\"][\"simple-user\"][] | null;\n            milestone: components[\"schemas\"][\"milestone\"] | null;\n            locked: boolean;\n            active_lock_reason?: string | null;\n            comments: number;\n            pull_request?: {\n                merged_at?: string | null;\n                diff_url: string | null;\n                html_url: string | null;\n                patch_url: string | null;\n                url: string | null;\n            };\n            closed_at: string | null;\n            created_at: string;\n            updated_at: string;\n            closed_by?: components[\"schemas\"][\"simple-user\"] | null;\n            body_html?: string;\n            body_text?: string;\n            timeline_url?: string;\n            repository?: components[\"schemas\"][\"repository\"];\n            performed_via_github_app?: components[\"schemas\"][\"integration\"] | null;\n            author_association: components[\"schemas\"][\"author_association\"];\n            reactions?: components[\"schemas\"][\"reaction-rollup\"];\n        };\n        /** License */\n        license: {\n            key: string;\n            name: string;\n            spdx_id: string | null;\n            url: string | null;\n            node_id: string;\n            html_url: string;\n            description: string;\n            implementation: string;\n            permissions: string[];\n            conditions: string[];\n            limitations: string[];\n            body: string;\n            featured: boolean;\n        };\n        /** Marketplace Listing Plan */\n        \"marketplace-listing-plan\": {\n            url: string;\n            accounts_url: string;\n            id: number;\n            number: number;\n            name: string;\n            description: string;\n            monthly_price_in_cents: number;\n            yearly_price_in_cents: number;\n            price_model: string;\n            has_free_trial: boolean;\n            unit_name: string | null;\n            state: string;\n            bullets: string[];\n        };\n        /** Marketplace Purchase */\n        \"marketplace-purchase\": {\n            url: string;\n            type: string;\n            id: number;\n            login: string;\n            organization_billing_email?: string;\n            marketplace_pending_change?: {\n                is_installed?: boolean;\n                effective_date?: string;\n                unit_count?: number | null;\n                id?: number;\n                plan?: components[\"schemas\"][\"marketplace-listing-plan\"];\n            } | null;\n            marketplace_purchase: {\n                billing_cycle?: string;\n                next_billing_date?: string | null;\n                is_installed?: boolean;\n                unit_count?: number | null;\n                on_free_trial?: boolean;\n                free_trial_ends_on?: string | null;\n                updated_at?: string;\n                plan?: components[\"schemas\"][\"marketplace-listing-plan\"];\n            };\n        };\n        /** Api Overview */\n        \"api-overview\": {\n            verifiable_password_authentication: boolean;\n            ssh_key_fingerprints?: {\n                SHA256_RSA?: string;\n                SHA256_DSA?: string;\n            };\n            hooks?: string[];\n            web?: string[];\n            api?: string[];\n            git?: string[];\n            pages?: string[];\n            importer?: string[];\n            actions?: string[];\n        };\n        /** Minimal Repository */\n        \"minimal-repository\": {\n            id: number;\n            node_id: string;\n            name: string;\n            full_name: string;\n            owner: components[\"schemas\"][\"simple-user\"] | null;\n            private: boolean;\n            html_url: string;\n            description: string | null;\n            fork: boolean;\n            url: string;\n            archive_url: string;\n            assignees_url: string;\n            blobs_url: string;\n            branches_url: string;\n            collaborators_url: string;\n            comments_url: string;\n            commits_url: string;\n            compare_url: string;\n            contents_url: string;\n            contributors_url: string;\n            deployments_url: string;\n            downloads_url: string;\n            events_url: string;\n            forks_url: string;\n            git_commits_url: string;\n            git_refs_url: string;\n            git_tags_url: string;\n            git_url?: string;\n            issue_comment_url: string;\n            issue_events_url: string;\n            issues_url: string;\n            keys_url: string;\n            labels_url: string;\n            languages_url: string;\n            merges_url: string;\n            milestones_url: string;\n            notifications_url: string;\n            pulls_url: string;\n            releases_url: string;\n            ssh_url?: string;\n            stargazers_url: string;\n            statuses_url: string;\n            subscribers_url: string;\n            subscription_url: string;\n            tags_url: string;\n            teams_url: string;\n            trees_url: string;\n            clone_url?: string;\n            mirror_url?: string | null;\n            hooks_url: string;\n            svn_url?: string;\n            homepage?: string | null;\n            language?: string | null;\n            forks_count?: number;\n            stargazers_count?: number;\n            watchers_count?: number;\n            size?: number;\n            default_branch?: string;\n            open_issues_count?: number;\n            is_template?: boolean;\n            topics?: string[];\n            has_issues?: boolean;\n            has_projects?: boolean;\n            has_wiki?: boolean;\n            has_pages?: boolean;\n            has_downloads?: boolean;\n            archived?: boolean;\n            disabled?: boolean;\n            visibility?: string;\n            pushed_at?: string | null;\n            created_at?: string | null;\n            updated_at?: string | null;\n            permissions?: {\n                admin?: boolean;\n                push?: boolean;\n                pull?: boolean;\n            };\n            template_repository?: components[\"schemas\"][\"repository\"] | null;\n            temp_clone_token?: string;\n            delete_branch_on_merge?: boolean;\n            subscribers_count?: number;\n            network_count?: number;\n            license?: {\n                key?: string;\n                name?: string;\n                spdx_id?: string;\n                url?: string;\n                node_id?: string;\n            } | null;\n            forks?: number;\n            open_issues?: number;\n            watchers?: number;\n        };\n        /** Thread */\n        thread: {\n            id: string;\n            repository: components[\"schemas\"][\"minimal-repository\"];\n            subject: {\n                title: string;\n                url: string;\n                latest_comment_url: string;\n                type: string;\n            };\n            reason: string;\n            unread: boolean;\n            updated_at: string;\n            last_read_at: string | null;\n            url: string;\n            subscription_url: string;\n        };\n        /** Thread Subscription */\n        \"thread-subscription\": {\n            subscribed: boolean;\n            ignored: boolean;\n            reason: string | null;\n            created_at: string | null;\n            url: string;\n            thread_url?: string;\n            repository_url?: string;\n        };\n        /** Organization Full */\n        \"organization-full\": {\n            login: string;\n            id: number;\n            node_id: string;\n            url: string;\n            repos_url: string;\n            events_url: string;\n            hooks_url: string;\n            issues_url: string;\n            members_url: string;\n            public_members_url: string;\n            avatar_url: string;\n            description: string | null;\n            name?: string;\n            company?: string;\n            blog?: string;\n            location?: string;\n            email?: string;\n            twitter_username?: string | null;\n            is_verified?: boolean;\n            has_organization_projects: boolean;\n            has_repository_projects: boolean;\n            public_repos: number;\n            public_gists: number;\n            followers: number;\n            following: number;\n            html_url: string;\n            created_at: string;\n            type: string;\n            total_private_repos?: number;\n            owned_private_repos?: number;\n            private_gists?: number | null;\n            disk_usage?: number | null;\n            collaborators?: number | null;\n            billing_email?: string | null;\n            plan?: {\n                name: string;\n                space: number;\n                private_repos: number;\n                filled_seats?: number;\n                seats?: number;\n            };\n            default_repository_permission?: string | null;\n            members_can_create_repositories?: boolean | null;\n            two_factor_requirement_enabled?: boolean | null;\n            members_allowed_repository_creation_type?: string;\n            members_can_create_public_repositories?: boolean;\n            members_can_create_private_repositories?: boolean;\n            members_can_create_internal_repositories?: boolean;\n            members_can_create_pages?: boolean;\n            updated_at: string;\n        };\n        /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */\n        \"enabled-repositories\": \"all\" | \"none\" | \"selected\";\n        \"actions-organization-permissions\": {\n            enabled_repositories: components[\"schemas\"][\"enabled-repositories\"];\n            /** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */\n            selected_repositories_url?: string;\n            allowed_actions: components[\"schemas\"][\"allowed-actions\"];\n            selected_actions_url?: components[\"schemas\"][\"selected-actions-url\"];\n        };\n        \"runner-groups-org\": {\n            id: number;\n            name: string;\n            visibility: string;\n            default: boolean;\n            /** Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */\n            selected_repositories_url?: string;\n            runners_url: string;\n            inherited: boolean;\n            inherited_allows_public_repositories?: boolean;\n            allows_public_repositories: boolean;\n        };\n        /** Secrets for GitHub Actions for an organization. */\n        \"organization-actions-secret\": {\n            /** The name of the secret. */\n            name: string;\n            created_at: string;\n            updated_at: string;\n            /** Visibility of a secret */\n            visibility: \"all\" | \"private\" | \"selected\";\n            selected_repositories_url?: string;\n        };\n        /** The public key used for setting Actions Secrets. */\n        \"actions-public-key\": {\n            /** The identifier for the key. */\n            key_id: string;\n            /** The Base64 encoded public key. */\n            key: string;\n            id?: number;\n            url?: string;\n            title?: string;\n            created_at?: string;\n        };\n        /** Credential Authorization */\n        \"credential-authorization\": {\n            /** User login that owns the underlying credential. */\n            login: string;\n            /** Unique identifier for the credential. */\n            credential_id: number;\n            /** Human-readable description of the credential type. */\n            credential_type: string;\n            /** Last eight characters of the credential. Only included in responses with credential_type of personal access token. */\n            token_last_eight?: string;\n            /** Date when the credential was authorized for use. */\n            credential_authorized_at: string;\n            /** List of oauth scopes the token has been granted. */\n            scopes?: string[];\n            /** Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key. */\n            fingerprint?: string;\n            /** Date when the credential was last accessed. May be null if it was never accessed */\n            credential_accessed_at?: string | null;\n            authorized_credential_id?: number | null;\n            /** The title given to the ssh key. This will only be present when the credential is an ssh key. */\n            authorized_credential_title?: string | null;\n            /** The note given to the token. This will only be present when the credential is a token. */\n            authorized_credential_note?: string | null;\n        };\n        /** Organization Invitation */\n        \"organization-invitation\": {\n            id: number;\n            login: string | null;\n            email: string | null;\n            role: string;\n            created_at: string;\n            failed_at?: string;\n            failed_reason?: string;\n            inviter: components[\"schemas\"][\"simple-user\"];\n            team_count: number;\n            invitation_team_url: string;\n            node_id: string;\n            invitation_teams_url?: string;\n        };\n        /** Org Hook */\n        \"org-hook\": {\n            id: number;\n            url: string;\n            ping_url: string;\n            name: string;\n            events: string[];\n            active: boolean;\n            config: {\n                url?: string;\n                insecure_ssl?: string;\n                content_type?: string;\n                secret?: string;\n            };\n            updated_at: string;\n            created_at: string;\n            type: string;\n        };\n        /** The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`. */\n        \"interaction-group\": \"existing_users\" | \"contributors_only\" | \"collaborators_only\";\n        /** Interaction limit settings. */\n        \"interaction-limit-response\": {\n            limit: components[\"schemas\"][\"interaction-group\"];\n            origin: string;\n            expires_at: string;\n        };\n        /** The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`, `one_month`, `six_months`. Default: `one_day`. */\n        \"interaction-expiry\": \"one_day\" | \"three_days\" | \"one_week\" | \"one_month\" | \"six_months\";\n        /** Limit interactions to a specific type of user for a specified duration */\n        \"interaction-limit\": {\n            limit: components[\"schemas\"][\"interaction-group\"];\n            expiry?: components[\"schemas\"][\"interaction-expiry\"];\n        };\n        /** Groups of organization members that gives permissions on specified repositories. */\n        \"team-simple\": {\n            /** Unique identifier of the team */\n            id: number;\n            node_id: string;\n            /** URL for the team */\n            url: string;\n            members_url: string;\n            /** Name of the team */\n            name: string;\n            /** Description of the team */\n            description: string | null;\n            /** Permission that the team will have for its repositories */\n            permission: string;\n            /** The level of privacy this team should have */\n            privacy?: string;\n            html_url: string;\n            repositories_url: string;\n            slug: string;\n            /** Distinguished Name (DN) that team maps to within LDAP environment */\n            ldap_dn?: string;\n        } | null;\n        /** Groups of organization members that gives permissions on specified repositories. */\n        team: {\n            id: number;\n            node_id: string;\n            name: string;\n            slug: string;\n            description: string | null;\n            privacy?: string;\n            permission: string;\n            url: string;\n            html_url: string;\n            members_url: string;\n            repositories_url: string;\n            parent?: components[\"schemas\"][\"team-simple\"] | null;\n        };\n        /** Org Membership */\n        \"org-membership\": {\n            url: string;\n            state: string;\n            role: string;\n            organization_url: string;\n            organization: components[\"schemas\"][\"organization-simple\"];\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            permissions?: {\n                can_create_repository: boolean;\n            };\n        };\n        /** A migration. */\n        migration: {\n            id: number;\n            owner: components[\"schemas\"][\"simple-user\"] | null;\n            guid: string;\n            state: string;\n            lock_repositories: boolean;\n            exclude_attachments: boolean;\n            repositories: components[\"schemas\"][\"repository\"][];\n            url: string;\n            created_at: string;\n            updated_at: string;\n            node_id: string;\n            archive_url?: string;\n            exclude?: {\n                [key: string]: any;\n            }[];\n        };\n        /** Projects are a way to organize columns and cards of work. */\n        project: {\n            owner_url: string;\n            url: string;\n            html_url: string;\n            columns_url: string;\n            id: number;\n            node_id: string;\n            /** Name of the project */\n            name: string;\n            /** Body of the project */\n            body: string | null;\n            number: number;\n            /** State of the project; either 'open' or 'closed' */\n            state: string;\n            creator: components[\"schemas\"][\"simple-user\"] | null;\n            created_at: string;\n            updated_at: string;\n            /** The baseline permission that all organization members have on this project. Only present if owner is an organization. */\n            organization_permission?: \"read\" | \"write\" | \"admin\" | \"none\";\n            /** Whether or not this project can be seen by everyone. Only present if owner is an organization. */\n            private?: boolean;\n        };\n        /** External Groups to be mapped to a team for membership */\n        \"group-mapping\": {\n            /** Array of groups to be mapped to this team */\n            groups?: {\n                /** The ID of the group */\n                group_id: string;\n                /** The name of the group */\n                group_name: string;\n                /** a description of the group */\n                group_description: string;\n                /** synchronization status for this group mapping */\n                status?: string;\n                /** the time of the last sync for this group-mapping */\n                synced_at?: string;\n            }[];\n        };\n        /** Groups of organization members that gives permissions on specified repositories. */\n        \"team-full\": {\n            /** Unique identifier of the team */\n            id: number;\n            node_id: string;\n            /** URL for the team */\n            url: string;\n            html_url: string;\n            /** Name of the team */\n            name: string;\n            slug: string;\n            description: string | null;\n            /** The level of privacy this team should have */\n            privacy?: \"closed\" | \"secret\";\n            /** Permission that the team will have for its repositories */\n            permission: string;\n            members_url: string;\n            repositories_url: string;\n            parent?: components[\"schemas\"][\"team-simple\"] | null;\n            members_count: number;\n            repos_count: number;\n            created_at: string;\n            updated_at: string;\n            organization: components[\"schemas\"][\"organization-full\"];\n            /** Distinguished Name (DN) that team maps to within LDAP environment */\n            ldap_dn?: string;\n        };\n        /** A team discussion is a persistent record of a free-form conversation within a team. */\n        \"team-discussion\": {\n            author: components[\"schemas\"][\"simple-user\"] | null;\n            /** The main text of the discussion. */\n            body: string;\n            body_html: string;\n            /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */\n            body_version: string;\n            comments_count: number;\n            comments_url: string;\n            created_at: string;\n            last_edited_at: string | null;\n            html_url: string;\n            node_id: string;\n            /** The unique sequence number of a team discussion. */\n            number: number;\n            /** Whether or not this discussion should be pinned for easy retrieval. */\n            pinned: boolean;\n            /** Whether or not this discussion should be restricted to team members and organization administrators. */\n            private: boolean;\n            team_url: string;\n            /** The title of the discussion. */\n            title: string;\n            updated_at: string;\n            url: string;\n            reactions?: components[\"schemas\"][\"reaction-rollup\"];\n        };\n        /** A reply to a discussion within a team. */\n        \"team-discussion-comment\": {\n            author: components[\"schemas\"][\"simple-user\"] | null;\n            /** The main text of the comment. */\n            body: string;\n            body_html: string;\n            /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */\n            body_version: string;\n            created_at: string;\n            last_edited_at: string | null;\n            discussion_url: string;\n            html_url: string;\n            node_id: string;\n            /** The unique sequence number of a team discussion comment. */\n            number: number;\n            updated_at: string;\n            url: string;\n            reactions?: components[\"schemas\"][\"reaction-rollup\"];\n        };\n        /** Reactions to conversations provide a way to help people express their feelings more simply and effectively. */\n        reaction: {\n            id: number;\n            node_id: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            /** The reaction to use */\n            content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n            created_at: string;\n        };\n        /** Team Membership */\n        \"team-membership\": {\n            url: string;\n            /** The role of the user in the team. */\n            role: \"member\" | \"maintainer\";\n            state: string;\n        };\n        /** A team's access to a project. */\n        \"team-project\": {\n            owner_url: string;\n            url: string;\n            html_url: string;\n            columns_url: string;\n            id: number;\n            node_id: string;\n            name: string;\n            body: string | null;\n            number: number;\n            state: string;\n            creator: components[\"schemas\"][\"simple-user\"];\n            created_at: string;\n            updated_at: string;\n            /** The organization permission for this project. Only present when owner is an organization. */\n            organization_permission?: string;\n            /** Whether the project is private or not. Only present when owner is an organization. */\n            private?: boolean;\n            permissions: {\n                read: boolean;\n                write: boolean;\n                admin: boolean;\n            };\n        };\n        /** A team's access to a repository. */\n        \"team-repository\": {\n            /** Unique identifier of the repository */\n            id: number;\n            node_id: string;\n            /** The name of the repository. */\n            name: string;\n            full_name: string;\n            license: components[\"schemas\"][\"license-simple\"] | null;\n            forks: number;\n            permissions?: {\n                admin: boolean;\n                pull: boolean;\n                triage?: boolean;\n                push: boolean;\n                maintain?: boolean;\n            };\n            owner: components[\"schemas\"][\"simple-user\"] | null;\n            /** Whether the repository is private or public. */\n            private: boolean;\n            html_url: string;\n            description: string | null;\n            fork: boolean;\n            url: string;\n            archive_url: string;\n            assignees_url: string;\n            blobs_url: string;\n            branches_url: string;\n            collaborators_url: string;\n            comments_url: string;\n            commits_url: string;\n            compare_url: string;\n            contents_url: string;\n            contributors_url: string;\n            deployments_url: string;\n            downloads_url: string;\n            events_url: string;\n            forks_url: string;\n            git_commits_url: string;\n            git_refs_url: string;\n            git_tags_url: string;\n            git_url: string;\n            issue_comment_url: string;\n            issue_events_url: string;\n            issues_url: string;\n            keys_url: string;\n            labels_url: string;\n            languages_url: string;\n            merges_url: string;\n            milestones_url: string;\n            notifications_url: string;\n            pulls_url: string;\n            releases_url: string;\n            ssh_url: string;\n            stargazers_url: string;\n            statuses_url: string;\n            subscribers_url: string;\n            subscription_url: string;\n            tags_url: string;\n            teams_url: string;\n            trees_url: string;\n            clone_url: string;\n            mirror_url: string | null;\n            hooks_url: string;\n            svn_url: string;\n            homepage: string | null;\n            language: string | null;\n            forks_count: number;\n            stargazers_count: number;\n            watchers_count: number;\n            size: number;\n            /** The default branch of the repository. */\n            default_branch: string;\n            open_issues_count: number;\n            /** Whether this repository acts as a template that can be used to generate new repositories. */\n            is_template?: boolean;\n            topics?: string[];\n            /** Whether issues are enabled. */\n            has_issues: boolean;\n            /** Whether projects are enabled. */\n            has_projects: boolean;\n            /** Whether the wiki is enabled. */\n            has_wiki: boolean;\n            has_pages: boolean;\n            /** Whether downloads are enabled. */\n            has_downloads: boolean;\n            /** Whether the repository is archived. */\n            archived: boolean;\n            /** Returns whether or not this repository disabled. */\n            disabled: boolean;\n            /** The repository visibility: public, private, or internal. */\n            visibility?: string;\n            pushed_at: string | null;\n            created_at: string | null;\n            updated_at: string | null;\n            /** Whether to allow rebase merges for pull requests. */\n            allow_rebase_merge?: boolean;\n            template_repository?: components[\"schemas\"][\"repository\"] | null;\n            temp_clone_token?: string;\n            /** Whether to allow squash merges for pull requests. */\n            allow_squash_merge?: boolean;\n            /** Whether to delete head branches when pull requests are merged */\n            delete_branch_on_merge?: boolean;\n            /** Whether to allow merge commits for pull requests. */\n            allow_merge_commit?: boolean;\n            subscribers_count?: number;\n            network_count?: number;\n            open_issues: number;\n            watchers: number;\n            master_branch?: string;\n        };\n        /** Project cards represent a scope of work. */\n        \"project-card\": {\n            url: string;\n            /** The project card's ID */\n            id: number;\n            node_id: string;\n            note: string | null;\n            creator: components[\"schemas\"][\"simple-user\"] | null;\n            created_at: string;\n            updated_at: string;\n            /** Whether or not the card is archived */\n            archived?: boolean;\n            column_url: string;\n            content_url?: string;\n            project_url: string;\n        };\n        /** Project columns contain cards of work. */\n        \"project-column\": {\n            url: string;\n            project_url: string;\n            cards_url: string;\n            /** The unique identifier of the project column */\n            id: number;\n            node_id: string;\n            /** Name of the project column */\n            name: string;\n            created_at: string;\n            updated_at: string;\n        };\n        /** Repository Collaborator Permission */\n        \"repository-collaborator-permission\": {\n            permission: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n        };\n        \"rate-limit\": {\n            limit: number;\n            remaining: number;\n            reset: number;\n        };\n        /** Rate Limit Overview */\n        \"rate-limit-overview\": {\n            resources: {\n                core: components[\"schemas\"][\"rate-limit\"];\n                graphql?: components[\"schemas\"][\"rate-limit\"];\n                search: components[\"schemas\"][\"rate-limit\"];\n                source_import?: components[\"schemas\"][\"rate-limit\"];\n                integration_manifest?: components[\"schemas\"][\"rate-limit\"];\n                code_scanning_upload?: components[\"schemas\"][\"rate-limit\"];\n            };\n            rate: components[\"schemas\"][\"rate-limit\"];\n        };\n        /** Code of Conduct Simple */\n        \"code-of-conduct-simple\": {\n            url: string;\n            key: string;\n            name: string;\n            html_url: string | null;\n        };\n        /** Full Repository */\n        \"full-repository\": {\n            id: number;\n            node_id: string;\n            name: string;\n            full_name: string;\n            owner: components[\"schemas\"][\"simple-user\"] | null;\n            private: boolean;\n            html_url: string;\n            description: string | null;\n            fork: boolean;\n            url: string;\n            archive_url: string;\n            assignees_url: string;\n            blobs_url: string;\n            branches_url: string;\n            collaborators_url: string;\n            comments_url: string;\n            commits_url: string;\n            compare_url: string;\n            contents_url: string;\n            contributors_url: string;\n            deployments_url: string;\n            downloads_url: string;\n            events_url: string;\n            forks_url: string;\n            git_commits_url: string;\n            git_refs_url: string;\n            git_tags_url: string;\n            git_url: string;\n            issue_comment_url: string;\n            issue_events_url: string;\n            issues_url: string;\n            keys_url: string;\n            labels_url: string;\n            languages_url: string;\n            merges_url: string;\n            milestones_url: string;\n            notifications_url: string;\n            pulls_url: string;\n            releases_url: string;\n            ssh_url: string;\n            stargazers_url: string;\n            statuses_url: string;\n            subscribers_url: string;\n            subscription_url: string;\n            tags_url: string;\n            teams_url: string;\n            trees_url: string;\n            clone_url: string;\n            mirror_url: string | null;\n            hooks_url: string;\n            svn_url: string;\n            homepage: string | null;\n            language: string | null;\n            forks_count: number;\n            stargazers_count: number;\n            watchers_count: number;\n            size: number;\n            default_branch: string;\n            open_issues_count: number;\n            is_template?: boolean;\n            topics?: string[];\n            has_issues: boolean;\n            has_projects: boolean;\n            has_wiki: boolean;\n            has_pages: boolean;\n            has_downloads: boolean;\n            archived: boolean;\n            /** Returns whether or not this repository disabled. */\n            disabled: boolean;\n            /** The repository visibility: public, private, or internal. */\n            visibility?: string;\n            pushed_at: string;\n            created_at: string;\n            updated_at: string;\n            permissions?: {\n                admin: boolean;\n                pull: boolean;\n                push: boolean;\n            };\n            allow_rebase_merge?: boolean;\n            template_repository?: components[\"schemas\"][\"repository\"] | null;\n            temp_clone_token?: string | null;\n            allow_squash_merge?: boolean;\n            delete_branch_on_merge?: boolean;\n            allow_merge_commit?: boolean;\n            subscribers_count: number;\n            network_count: number;\n            license: components[\"schemas\"][\"license-simple\"] | null;\n            organization?: components[\"schemas\"][\"simple-user\"] | null;\n            parent?: components[\"schemas\"][\"repository\"];\n            source?: components[\"schemas\"][\"repository\"];\n            forks: number;\n            master_branch?: string;\n            open_issues: number;\n            watchers: number;\n            /** Whether anonymous git access is allowed. */\n            anonymous_access_enabled?: boolean;\n            code_of_conduct?: components[\"schemas\"][\"code-of-conduct-simple\"];\n        };\n        /** An artifact */\n        artifact: {\n            id: number;\n            node_id: string;\n            /** The name of the artifact. */\n            name: string;\n            /** The size in bytes of the artifact. */\n            size_in_bytes: number;\n            url: string;\n            archive_download_url: string;\n            /** Whether or not the artifact has expired. */\n            expired: boolean;\n            created_at: string | null;\n            expires_at: string;\n            updated_at: string | null;\n        };\n        /** Information of a job execution in a workflow run */\n        job: {\n            /** The id of the job. */\n            id: number;\n            /** The id of the associated workflow run. */\n            run_id: number;\n            run_url: string;\n            node_id: string;\n            /** The SHA of the commit that is being run. */\n            head_sha: string;\n            url: string;\n            html_url: string | null;\n            /** The phase of the lifecycle that the job is currently in. */\n            status: \"queued\" | \"in_progress\" | \"completed\";\n            /** The outcome of the job. */\n            conclusion: string | null;\n            /** The time that the job started, in ISO 8601 format. */\n            started_at: string;\n            /** The time that the job finished, in ISO 8601 format. */\n            completed_at: string | null;\n            /** The name of the job. */\n            name: string;\n            /** Steps in this job. */\n            steps?: {\n                /** The phase of the lifecycle that the job is currently in. */\n                status: \"queued\" | \"in_progress\" | \"completed\";\n                /** The outcome of the job. */\n                conclusion: string | null;\n                /** The name of the job. */\n                name: string;\n                number: number;\n                /** The time that the step started, in ISO 8601 format. */\n                started_at?: string | null;\n                /** The time that the job finished, in ISO 8601 format. */\n                completed_at?: string | null;\n            }[];\n            check_run_url: string;\n        };\n        /** Whether GitHub Actions is enabled on the repository. */\n        \"actions-enabled\": boolean;\n        \"actions-repository-permissions\": {\n            enabled: components[\"schemas\"][\"actions-enabled\"];\n            allowed_actions: components[\"schemas\"][\"allowed-actions\"];\n            selected_actions_url?: components[\"schemas\"][\"selected-actions-url\"];\n        };\n        \"pull-request-minimal\": {\n            id: number;\n            number: number;\n            url: string;\n            head: {\n                ref: string;\n                sha: string;\n                repo: {\n                    id: number;\n                    url: string;\n                    name: string;\n                };\n            };\n            base: {\n                ref: string;\n                sha: string;\n                repo: {\n                    id: number;\n                    url: string;\n                    name: string;\n                };\n            };\n        };\n        /** Simple Commit */\n        \"simple-commit\": {\n            id: string;\n            tree_id: string;\n            message: string;\n            timestamp: string;\n            author: {\n                name: string;\n                email: string;\n            } | null;\n            committer: {\n                name: string;\n                email: string;\n            } | null;\n        };\n        /** An invocation of a workflow */\n        \"workflow-run\": {\n            /** The ID of the workflow run. */\n            id: number;\n            /** The name of the workflow run. */\n            name?: string;\n            node_id: string;\n            head_branch: string | null;\n            /** The SHA of the head commit that points to the version of the worflow being run. */\n            head_sha: string;\n            /** The auto incrementing run number for the workflow run. */\n            run_number: number;\n            event: string;\n            status: string | null;\n            conclusion: string | null;\n            /** The ID of the parent workflow. */\n            workflow_id: number;\n            /** The URL to the workflow run. */\n            url: string;\n            html_url: string;\n            pull_requests: components[\"schemas\"][\"pull-request-minimal\"][] | null;\n            created_at: string;\n            updated_at: string;\n            /** The URL to the jobs for the workflow run. */\n            jobs_url: string;\n            /** The URL to download the logs for the workflow run. */\n            logs_url: string;\n            /** The URL to the associated check suite. */\n            check_suite_url: string;\n            /** The URL to the artifacts for the workflow run. */\n            artifacts_url: string;\n            /** The URL to cancel the workflow run. */\n            cancel_url: string;\n            /** The URL to rerun the workflow run. */\n            rerun_url: string;\n            /** The URL to the workflow. */\n            workflow_url: string;\n            head_commit: components[\"schemas\"][\"simple-commit\"];\n            repository: components[\"schemas\"][\"minimal-repository\"];\n            head_repository: components[\"schemas\"][\"minimal-repository\"];\n            head_repository_id?: number;\n        };\n        /** Workflow Run Usage */\n        \"workflow-run-usage\": {\n            billable: {\n                UBUNTU?: {\n                    total_ms: number;\n                    jobs: number;\n                };\n                MACOS?: {\n                    total_ms: number;\n                    jobs: number;\n                };\n                WINDOWS?: {\n                    total_ms: number;\n                    jobs: number;\n                };\n            };\n            run_duration_ms: number;\n        };\n        /** Set secrets for GitHub Actions. */\n        \"actions-secret\": {\n            /** The name of the secret. */\n            name: string;\n            created_at: string;\n            updated_at: string;\n        };\n        /** A GitHub Actions workflow */\n        workflow: {\n            id: number;\n            node_id: string;\n            name: string;\n            path: string;\n            state: \"active\" | \"deleted\";\n            created_at: string;\n            updated_at: string;\n            url: string;\n            html_url: string;\n            badge_url: string;\n            deleted_at?: string;\n        };\n        /** Workflow Usage */\n        \"workflow-usage\": {\n            billable: {\n                UBUNTU?: {\n                    total_ms?: number;\n                };\n                MACOS?: {\n                    total_ms?: number;\n                };\n                WINDOWS?: {\n                    total_ms?: number;\n                };\n            };\n        };\n        /** Protected Branch Admin Enforced */\n        \"protected-branch-admin-enforced\": {\n            url: string;\n            enabled: boolean;\n        };\n        /** Protected Branch Pull Request Review */\n        \"protected-branch-pull-request-review\": {\n            url?: string;\n            dismissal_restrictions?: {\n                /** The list of users with review dismissal access. */\n                users?: components[\"schemas\"][\"simple-user\"][];\n                /** The list of teams with review dismissal access. */\n                teams?: components[\"schemas\"][\"team\"][];\n                url?: string;\n                users_url?: string;\n                teams_url?: string;\n            };\n            dismiss_stale_reviews: boolean;\n            require_code_owner_reviews: boolean;\n            required_approving_review_count?: number;\n        };\n        /** Branch Restriction Policy */\n        \"branch-restriction-policy\": {\n            url: string;\n            users_url: string;\n            teams_url: string;\n            apps_url: string;\n            users: {\n                login?: string;\n                id?: number;\n                node_id?: string;\n                avatar_url?: string;\n                gravatar_id?: string;\n                url?: string;\n                html_url?: string;\n                followers_url?: string;\n                following_url?: string;\n                gists_url?: string;\n                starred_url?: string;\n                subscriptions_url?: string;\n                organizations_url?: string;\n                repos_url?: string;\n                events_url?: string;\n                received_events_url?: string;\n                type?: string;\n                site_admin?: boolean;\n            }[];\n            teams: {\n                id?: number;\n                node_id?: string;\n                url?: string;\n                html_url?: string;\n                name?: string;\n                slug?: string;\n                description?: string | null;\n                privacy?: string;\n                permission?: string;\n                members_url?: string;\n                repositories_url?: string;\n                parent?: string | null;\n            }[];\n            apps: {\n                id?: number;\n                slug?: string;\n                node_id?: string;\n                owner?: {\n                    login?: string;\n                    id?: number;\n                    node_id?: string;\n                    url?: string;\n                    repos_url?: string;\n                    events_url?: string;\n                    hooks_url?: string;\n                    issues_url?: string;\n                    members_url?: string;\n                    public_members_url?: string;\n                    avatar_url?: string;\n                    description?: string;\n                    gravatar_id?: string;\n                    html_url?: string;\n                    followers_url?: string;\n                    following_url?: string;\n                    gists_url?: string;\n                    starred_url?: string;\n                    subscriptions_url?: string;\n                    organizations_url?: string;\n                    received_events_url?: string;\n                    type?: string;\n                };\n                name?: string;\n                description?: string;\n                external_url?: string;\n                html_url?: string;\n                created_at?: string;\n                updated_at?: string;\n                permissions?: {\n                    metadata?: string;\n                    contents?: string;\n                    issues?: string;\n                    single_file?: string;\n                };\n                events?: string[];\n            }[];\n        };\n        /** Branch Protection */\n        \"branch-protection\": {\n            url?: string;\n            required_status_checks: {\n                url?: string;\n                enforcement_level: string;\n                contexts: string[];\n                contexts_url?: string;\n            };\n            enforce_admins?: components[\"schemas\"][\"protected-branch-admin-enforced\"];\n            required_pull_request_reviews?: components[\"schemas\"][\"protected-branch-pull-request-review\"];\n            restrictions?: components[\"schemas\"][\"branch-restriction-policy\"];\n            required_linear_history?: {\n                enabled?: boolean;\n            };\n            allow_force_pushes?: {\n                enabled?: boolean;\n            };\n            allow_deletions?: {\n                enabled?: boolean;\n            };\n            enabled: boolean;\n            name?: string;\n            protection_url?: string;\n        };\n        /** Short Branch */\n        \"short-branch\": {\n            name: string;\n            commit: {\n                sha: string;\n                url: string;\n            };\n            protected: boolean;\n            protection?: components[\"schemas\"][\"branch-protection\"];\n            protection_url?: string;\n        };\n        /** Metaproperties for Git author/committer information. */\n        \"git-user\": {\n            name?: string;\n            email?: string;\n            date?: string;\n        };\n        verification: {\n            verified: boolean;\n            reason: string;\n            payload: string | null;\n            signature: string | null;\n        };\n        /** Commit */\n        commit: {\n            url: string;\n            sha: string;\n            node_id: string;\n            html_url: string;\n            comments_url: string;\n            commit: {\n                url: string;\n                author: components[\"schemas\"][\"git-user\"] | null;\n                committer: components[\"schemas\"][\"git-user\"] | null;\n                message: string;\n                comment_count: number;\n                tree: {\n                    sha: string;\n                    url: string;\n                };\n                verification?: components[\"schemas\"][\"verification\"];\n            };\n            author: components[\"schemas\"][\"simple-user\"] | null;\n            committer: components[\"schemas\"][\"simple-user\"] | null;\n            parents: {\n                sha: string;\n                url: string;\n                html_url?: string;\n            }[];\n            stats?: {\n                additions?: number;\n                deletions?: number;\n                total?: number;\n            };\n            files?: {\n                filename?: string;\n                additions?: number;\n                deletions?: number;\n                changes?: number;\n                status?: string;\n                raw_url?: string;\n                blob_url?: string;\n                patch?: string;\n                sha?: string;\n                contents_url?: string;\n                previous_filename?: string;\n            }[];\n        };\n        /** Branch With Protection */\n        \"branch-with-protection\": {\n            name: string;\n            commit: components[\"schemas\"][\"commit\"];\n            _links: {\n                html: string;\n                self: string;\n            };\n            protected: boolean;\n            protection: components[\"schemas\"][\"branch-protection\"];\n            protection_url: string;\n            pattern?: string;\n            required_approving_review_count?: number;\n        };\n        /** Status Check Policy */\n        \"status-check-policy\": {\n            url: string;\n            strict: boolean;\n            contexts: string[];\n            contexts_url: string;\n        };\n        /** Branch protections protect branches */\n        \"protected-branch\": {\n            url: string;\n            required_status_checks?: components[\"schemas\"][\"status-check-policy\"];\n            required_pull_request_reviews?: {\n                url: string;\n                dismiss_stale_reviews?: boolean;\n                require_code_owner_reviews?: boolean;\n                required_approving_review_count?: number;\n                dismissal_restrictions?: {\n                    url: string;\n                    users_url: string;\n                    teams_url: string;\n                    users: components[\"schemas\"][\"simple-user\"][];\n                    teams: components[\"schemas\"][\"team\"][];\n                };\n            };\n            required_signatures?: {\n                url: string;\n                enabled: boolean;\n            };\n            enforce_admins?: {\n                url: string;\n                enabled: boolean;\n            };\n            required_linear_history?: {\n                enabled: boolean;\n            };\n            allow_force_pushes?: {\n                enabled: boolean;\n            };\n            allow_deletions?: {\n                enabled: boolean;\n            };\n            restrictions?: components[\"schemas\"][\"branch-restriction-policy\"];\n        };\n        /** A check performed on the code of a given code change */\n        \"check-run\": {\n            /** The id of the check. */\n            id: number;\n            /** The SHA of the commit that is being checked. */\n            head_sha: string;\n            node_id: string;\n            external_id: string | null;\n            url: string;\n            html_url: string | null;\n            details_url: string | null;\n            /** The phase of the lifecycle that the check is currently in. */\n            status: \"queued\" | \"in_progress\" | \"completed\";\n            conclusion: (\"success\" | \"failure\" | \"neutral\" | \"cancelled\" | \"skipped\" | \"timed_out\" | \"action_required\") | null;\n            started_at: string | null;\n            completed_at: string | null;\n            output: {\n                title: string | null;\n                summary: string | null;\n                text: string | null;\n                annotations_count: number;\n                annotations_url: string;\n            };\n            /** The name of the check. */\n            name: string;\n            check_suite: {\n                id: number;\n            } | null;\n            app: components[\"schemas\"][\"integration\"] | null;\n            pull_requests: components[\"schemas\"][\"pull-request-minimal\"][];\n        };\n        /** Check Annotation */\n        \"check-annotation\": {\n            path: string;\n            start_line: number;\n            end_line: number;\n            start_column: number | null;\n            end_column: number | null;\n            annotation_level: string | null;\n            title: string | null;\n            message: string | null;\n            raw_details: string | null;\n            blob_href: string;\n        };\n        /** A suite of checks performed on the code of a given code change */\n        \"check-suite\": {\n            id: number;\n            node_id: string;\n            head_branch: string | null;\n            /** The SHA of the head commit that is being checked. */\n            head_sha: string;\n            status: (\"queued\" | \"in_progress\" | \"completed\") | null;\n            conclusion: (\"success\" | \"failure\" | \"neutral\" | \"cancelled\" | \"skipped\" | \"timed_out\" | \"action_required\") | null;\n            url: string | null;\n            before: string | null;\n            after: string | null;\n            pull_requests: components[\"schemas\"][\"pull-request-minimal\"][] | null;\n            app: components[\"schemas\"][\"integration\"] | null;\n            repository: components[\"schemas\"][\"minimal-repository\"];\n            created_at: string | null;\n            updated_at: string | null;\n            head_commit: components[\"schemas\"][\"simple-commit\"];\n            latest_check_runs_count: number;\n            check_runs_url: string;\n        };\n        /** Check suite configuration preferences for a repository. */\n        \"check-suite-preference\": {\n            preferences: {\n                auto_trigger_checks?: {\n                    app_id: number;\n                    setting: boolean;\n                }[];\n            };\n            repository: components[\"schemas\"][\"repository\"];\n        };\n        /** State of a code scanning alert. */\n        \"code-scanning-alert-state\": \"open\" | \"dismissed\" | \"fixed\";\n        /** The full Git reference, formatted as `refs/heads/<branch name>`. */\n        \"code-scanning-alert-ref\": string;\n        /** The security alert number. */\n        \"alert-number\": number;\n        /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */\n        \"alert-created-at\": string;\n        /** The REST API URL of the alert resource. */\n        \"alert-url\": string;\n        /** The GitHub URL of the alert resource. */\n        \"alert-html-url\": string;\n        /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */\n        \"code-scanning-alert-dismissed-at\": string | null;\n        /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */\n        \"code-scanning-alert-dismissed-reason\": string | null;\n        \"code-scanning-alert-rule\": {\n            /** A unique identifier for the rule used to detect the alert. */\n            id?: string | null;\n            /** The severity of the alert. */\n            severity?: (\"none\" | \"note\" | \"warning\" | \"error\") | null;\n            /** A short description of the rule used to detect the alert. */\n            description?: string;\n        };\n        /** The name of the tool used to generate the code scanning analysis alert. */\n        \"code-scanning-analysis-tool-name\": string;\n        \"code-scanning-analysis-tool\": {\n            name?: components[\"schemas\"][\"code-scanning-analysis-tool-name\"];\n            /** The version of the tool used to detect the alert. */\n            version?: string | null;\n        };\n        \"code-scanning-alert-code-scanning-alert-items\": {\n            number: components[\"schemas\"][\"alert-number\"];\n            created_at: components[\"schemas\"][\"alert-created-at\"];\n            url: components[\"schemas\"][\"alert-url\"];\n            html_url: components[\"schemas\"][\"alert-html-url\"];\n            state: components[\"schemas\"][\"code-scanning-alert-state\"];\n            dismissed_by: components[\"schemas\"][\"simple-user\"];\n            dismissed_at: components[\"schemas\"][\"code-scanning-alert-dismissed-at\"];\n            dismissed_reason: components[\"schemas\"][\"code-scanning-alert-dismissed-reason\"];\n            rule: components[\"schemas\"][\"code-scanning-alert-rule\"];\n            tool: components[\"schemas\"][\"code-scanning-analysis-tool\"];\n        };\n        /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */\n        \"code-scanning-analysis-analysis-key\": string;\n        /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */\n        \"code-scanning-alert-environment\": string;\n        \"code-scanning-alert-instances\": {\n            ref?: components[\"schemas\"][\"code-scanning-alert-ref\"];\n            analysis_key?: components[\"schemas\"][\"code-scanning-analysis-analysis-key\"];\n            environment?: components[\"schemas\"][\"code-scanning-alert-environment\"];\n            matrix_vars?: string | null;\n            state?: components[\"schemas\"][\"code-scanning-alert-state\"];\n        }[] | null;\n        \"code-scanning-alert-code-scanning-alert\": {\n            number: components[\"schemas\"][\"alert-number\"];\n            created_at: components[\"schemas\"][\"alert-created-at\"];\n            url: components[\"schemas\"][\"alert-url\"];\n            html_url: components[\"schemas\"][\"alert-html-url\"];\n            instances: components[\"schemas\"][\"code-scanning-alert-instances\"];\n            state: components[\"schemas\"][\"code-scanning-alert-state\"];\n            dismissed_by: components[\"schemas\"][\"simple-user\"];\n            dismissed_at: components[\"schemas\"][\"code-scanning-alert-dismissed-at\"];\n            dismissed_reason: components[\"schemas\"][\"code-scanning-alert-dismissed-reason\"];\n            rule: components[\"schemas\"][\"code-scanning-alert-rule\"];\n            tool: components[\"schemas\"][\"code-scanning-analysis-tool\"];\n        };\n        /** Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`. */\n        \"code-scanning-alert-set-state\": \"open\" | \"dismissed\";\n        /** The full Git reference of the code scanning analysis file, formatted as `refs/heads/<branch name>`. */\n        \"code-scanning-analysis-ref\": string;\n        /** The commit SHA of the code scanning analysis file. */\n        \"code-scanning-analysis-commit-sha\": string;\n        /** The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */\n        \"code-scanning-analysis-created-at\": string;\n        /** Identifies the variable values associated with the environment in which this analysis was performed. */\n        \"code-scanning-analysis-environment\": string;\n        \"code-scanning-analysis-code-scanning-analysis\": {\n            commit_sha: components[\"schemas\"][\"code-scanning-analysis-commit-sha\"];\n            ref: components[\"schemas\"][\"code-scanning-analysis-ref\"];\n            analysis_key: components[\"schemas\"][\"code-scanning-analysis-analysis-key\"];\n            created_at: components[\"schemas\"][\"code-scanning-analysis-created-at\"];\n            tool_name: components[\"schemas\"][\"code-scanning-analysis-tool-name\"];\n            error: string;\n            environment: components[\"schemas\"][\"code-scanning-analysis-environment\"];\n        };\n        /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. */\n        \"code-scanning-analysis-sarif-file\": string;\n        /** Collaborator */\n        collaborator: {\n            login: string;\n            id: number;\n            node_id: string;\n            avatar_url: string;\n            gravatar_id: string | null;\n            url: string;\n            html_url: string;\n            followers_url: string;\n            following_url: string;\n            gists_url: string;\n            starred_url: string;\n            subscriptions_url: string;\n            organizations_url: string;\n            repos_url: string;\n            events_url: string;\n            received_events_url: string;\n            type: string;\n            site_admin: boolean;\n            permissions?: {\n                pull: boolean;\n                push: boolean;\n                admin: boolean;\n            };\n        };\n        /** Repository invitations let you manage who you collaborate with. */\n        \"repository-invitation\": {\n            /** Unique identifier of the repository invitation. */\n            id: number;\n            repository: components[\"schemas\"][\"minimal-repository\"];\n            invitee: components[\"schemas\"][\"simple-user\"] | null;\n            inviter: components[\"schemas\"][\"simple-user\"] | null;\n            /** The permission associated with the invitation. */\n            permissions: \"read\" | \"write\" | \"admin\";\n            created_at: string;\n            /** Whether or not the invitation has expired */\n            expired?: boolean;\n            /** URL for the repository invitation */\n            url: string;\n            html_url: string;\n            node_id: string;\n        };\n        /** Commit Comment */\n        \"commit-comment\": {\n            html_url: string;\n            url: string;\n            id: number;\n            node_id: string;\n            body: string;\n            path: string | null;\n            position: number | null;\n            line: number | null;\n            commit_id: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            created_at: string;\n            updated_at: string;\n            author_association: components[\"schemas\"][\"author_association\"];\n            reactions?: components[\"schemas\"][\"reaction-rollup\"];\n        };\n        /** Scim Error */\n        \"scim-error\": {\n            message?: string | null;\n            documentation_url?: string | null;\n            detail?: string | null;\n            status?: number;\n            scimType?: string | null;\n            schemas?: string[];\n        };\n        /** Branch Short */\n        \"branch-short\": {\n            name: string;\n            commit: {\n                sha: string;\n                url: string;\n            };\n            protected: boolean;\n        };\n        /** Hypermedia Link */\n        link: {\n            href: string;\n        };\n        /** The status of auto merging a pull request. */\n        auto_merge: {\n            enabled_by: components[\"schemas\"][\"simple-user\"];\n            /** The merge method to use. */\n            merge_method: \"merge\" | \"squash\" | \"rebase\";\n            /** Title for the merge commit message. */\n            commit_title: string;\n            /** Commit message for the merge commit. */\n            commit_message: string;\n        } | null;\n        /** Pull Request Simple */\n        \"pull-request-simple\": {\n            url: string;\n            id: number;\n            node_id: string;\n            html_url: string;\n            diff_url: string;\n            patch_url: string;\n            issue_url: string;\n            commits_url: string;\n            review_comments_url: string;\n            review_comment_url: string;\n            comments_url: string;\n            statuses_url: string;\n            number: number;\n            state: string;\n            locked: boolean;\n            title: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            body: string | null;\n            labels: {\n                id?: number;\n                node_id?: string;\n                url?: string;\n                name?: string;\n                description?: string;\n                color?: string;\n                default?: boolean;\n            }[];\n            milestone: components[\"schemas\"][\"milestone\"] | null;\n            active_lock_reason?: string | null;\n            created_at: string;\n            updated_at: string;\n            closed_at: string | null;\n            merged_at: string | null;\n            merge_commit_sha: string | null;\n            assignee: components[\"schemas\"][\"simple-user\"] | null;\n            assignees?: components[\"schemas\"][\"simple-user\"][] | null;\n            requested_reviewers?: components[\"schemas\"][\"simple-user\"][] | null;\n            requested_teams?: components[\"schemas\"][\"team-simple\"][] | null;\n            head: {\n                label: string;\n                ref: string;\n                repo: components[\"schemas\"][\"repository\"];\n                sha: string;\n                user: components[\"schemas\"][\"simple-user\"] | null;\n            };\n            base: {\n                label: string;\n                ref: string;\n                repo: components[\"schemas\"][\"repository\"];\n                sha: string;\n                user: components[\"schemas\"][\"simple-user\"] | null;\n            };\n            _links: {\n                comments: components[\"schemas\"][\"link\"];\n                commits: components[\"schemas\"][\"link\"];\n                statuses: components[\"schemas\"][\"link\"];\n                html: components[\"schemas\"][\"link\"];\n                issue: components[\"schemas\"][\"link\"];\n                review_comments: components[\"schemas\"][\"link\"];\n                review_comment: components[\"schemas\"][\"link\"];\n                self: components[\"schemas\"][\"link\"];\n            };\n            author_association: components[\"schemas\"][\"author_association\"];\n            auto_merge: components[\"schemas\"][\"auto_merge\"];\n            /** Indicates whether or not the pull request is a draft. */\n            draft?: boolean;\n        };\n        \"simple-commit-status\": {\n            description: string | null;\n            id: number;\n            node_id: string;\n            state: string;\n            context: string;\n            target_url: string;\n            required?: boolean | null;\n            avatar_url: string | null;\n            url: string;\n            created_at: string;\n            updated_at: string;\n        };\n        /** Combined Commit Status */\n        \"combined-commit-status\": {\n            state: string;\n            statuses: components[\"schemas\"][\"simple-commit-status\"][];\n            sha: string;\n            total_count: number;\n            repository: components[\"schemas\"][\"minimal-repository\"];\n            commit_url: string;\n            url: string;\n        };\n        /** The status of a commit. */\n        status: {\n            url: string;\n            avatar_url: string | null;\n            id: number;\n            node_id: string;\n            state: string;\n            description: string;\n            target_url: string;\n            context: string;\n            created_at: string;\n            updated_at: string;\n            creator: components[\"schemas\"][\"simple-user\"];\n        };\n        \"community-health-file\": {\n            url: string;\n            html_url: string;\n        };\n        /** Community Profile */\n        \"community-profile\": {\n            health_percentage: number;\n            description: string | null;\n            documentation: string | null;\n            files: {\n                code_of_conduct: components[\"schemas\"][\"code-of-conduct-simple\"] | null;\n                license: components[\"schemas\"][\"license-simple\"] | null;\n                contributing: components[\"schemas\"][\"community-health-file\"] | null;\n                readme: components[\"schemas\"][\"community-health-file\"] | null;\n                issue_template: components[\"schemas\"][\"community-health-file\"] | null;\n                pull_request_template: components[\"schemas\"][\"community-health-file\"] | null;\n            };\n            updated_at: string | null;\n            content_reports_enabled?: boolean;\n        };\n        /** Diff Entry */\n        \"diff-entry\": {\n            sha: string;\n            filename: string;\n            status: string;\n            additions: number;\n            deletions: number;\n            changes: number;\n            blob_url: string;\n            raw_url: string;\n            contents_url: string;\n            patch?: string;\n            previous_filename?: string;\n        };\n        /** Commit Comparison */\n        \"commit-comparison\": {\n            url: string;\n            html_url: string;\n            permalink_url: string;\n            diff_url: string;\n            patch_url: string;\n            base_commit: components[\"schemas\"][\"commit\"];\n            merge_base_commit: components[\"schemas\"][\"commit\"];\n            status: \"diverged\" | \"ahead\" | \"behind\" | \"identical\";\n            ahead_by: number;\n            behind_by: number;\n            total_commits: number;\n            commits: components[\"schemas\"][\"commit\"][];\n            files: components[\"schemas\"][\"diff-entry\"][];\n        };\n        /** Content Tree */\n        \"content-tree\": {\n            type: string;\n            size: number;\n            name: string;\n            path: string;\n            sha: string;\n            url: string;\n            git_url: string | null;\n            html_url: string | null;\n            download_url: string | null;\n            entries?: {\n                type: string;\n                size: number;\n                name: string;\n                path: string;\n                content?: string;\n                sha: string;\n                url: string;\n                git_url: string | null;\n                html_url: string | null;\n                download_url: string | null;\n                _links: {\n                    git: string | null;\n                    html: string | null;\n                    self: string;\n                };\n            }[];\n            _links: {\n                git: string | null;\n                html: string | null;\n                self: string;\n            };\n        };\n        /** A list of directory items */\n        \"content-directory\": {\n            type: string;\n            size: number;\n            name: string;\n            path: string;\n            content?: string;\n            sha: string;\n            url: string;\n            git_url: string | null;\n            html_url: string | null;\n            download_url: string | null;\n            _links: {\n                git: string | null;\n                html: string | null;\n                self: string;\n            };\n        }[];\n        /** Content File */\n        \"content-file\": {\n            type: string;\n            encoding: string;\n            size: number;\n            name: string;\n            path: string;\n            content: string;\n            sha: string;\n            url: string;\n            git_url: string | null;\n            html_url: string | null;\n            download_url: string | null;\n            _links: {\n                git: string | null;\n                html: string | null;\n                self: string;\n            };\n            target?: string;\n            submodule_git_url?: string;\n        };\n        /** An object describing a symlink */\n        \"content-symlink\": {\n            type: string;\n            target: string;\n            size: number;\n            name: string;\n            path: string;\n            sha: string;\n            url: string;\n            git_url: string | null;\n            html_url: string | null;\n            download_url: string | null;\n            _links: {\n                git: string | null;\n                html: string | null;\n                self: string;\n            };\n        };\n        /** An object describing a symlink */\n        \"content-submodule\": {\n            type: string;\n            submodule_git_url: string;\n            size: number;\n            name: string;\n            path: string;\n            sha: string;\n            url: string;\n            git_url: string | null;\n            html_url: string | null;\n            download_url: string | null;\n            _links: {\n                git: string | null;\n                html: string | null;\n                self: string;\n            };\n        };\n        /** File Commit */\n        \"file-commit\": {\n            content: {\n                name?: string;\n                path?: string;\n                sha?: string;\n                size?: number;\n                url?: string;\n                html_url?: string;\n                git_url?: string;\n                download_url?: string;\n                type?: string;\n                _links?: {\n                    self?: string;\n                    git?: string;\n                    html?: string;\n                };\n            } | null;\n            commit: {\n                sha?: string;\n                node_id?: string;\n                url?: string;\n                html_url?: string;\n                author?: {\n                    date?: string;\n                    name?: string;\n                    email?: string;\n                };\n                committer?: {\n                    date?: string;\n                    name?: string;\n                    email?: string;\n                };\n                message?: string;\n                tree?: {\n                    url?: string;\n                    sha?: string;\n                };\n                parents?: {\n                    url?: string;\n                    html_url?: string;\n                    sha?: string;\n                }[];\n                verification?: {\n                    verified?: boolean;\n                    reason?: string;\n                    signature?: string | null;\n                    payload?: string | null;\n                };\n            };\n        };\n        /** Contributor */\n        contributor: {\n            login?: string;\n            id?: number;\n            node_id?: string;\n            avatar_url?: string;\n            gravatar_id?: string | null;\n            url?: string;\n            html_url?: string;\n            followers_url?: string;\n            following_url?: string;\n            gists_url?: string;\n            starred_url?: string;\n            subscriptions_url?: string;\n            organizations_url?: string;\n            repos_url?: string;\n            events_url?: string;\n            received_events_url?: string;\n            type: string;\n            site_admin?: boolean;\n            contributions: number;\n            email?: string;\n            name?: string;\n        };\n        /** A request for a specific ref(branch,sha,tag) to be deployed */\n        deployment: {\n            url: string;\n            /** Unique identifier of the deployment */\n            id: number;\n            node_id: string;\n            sha: string;\n            /** The ref to deploy. This can be a branch, tag, or sha. */\n            ref: string;\n            /** Parameter to specify a task to execute */\n            task: string;\n            payload: {\n                [key: string]: any;\n            };\n            original_environment?: string;\n            /** Name for the target deployment environment. */\n            environment: string;\n            description: string | null;\n            creator: components[\"schemas\"][\"simple-user\"] | null;\n            created_at: string;\n            updated_at: string;\n            statuses_url: string;\n            repository_url: string;\n            /** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */\n            transient_environment?: boolean;\n            /** Specifies if the given environment is one that end-users directly interact with. Default: false. */\n            production_environment?: boolean;\n            performed_via_github_app?: components[\"schemas\"][\"integration\"] | null;\n        };\n        /** The status of a deployment. */\n        \"deployment-status\": {\n            url: string;\n            id: number;\n            node_id: string;\n            /** The state of the status. */\n            state: \"error\" | \"failure\" | \"inactive\" | \"pending\" | \"success\" | \"queued\" | \"in_progress\";\n            creator: components[\"schemas\"][\"simple-user\"] | null;\n            /** A short description of the status. */\n            description: string;\n            /** The environment of the deployment that the status is for. */\n            environment?: string;\n            /** Deprecated: the URL to associate with this status. */\n            target_url: string;\n            created_at: string;\n            updated_at: string;\n            deployment_url: string;\n            repository_url: string;\n            /** The URL for accessing your environment. */\n            environment_url?: string;\n            /** The URL to associate with this status. */\n            log_url?: string;\n            performed_via_github_app?: components[\"schemas\"][\"integration\"] | null;\n        };\n        /** Short Blob */\n        \"short-blob\": {\n            url: string;\n            sha: string;\n        };\n        /** Blob */\n        blob: {\n            content: string;\n            encoding: string;\n            url: string;\n            sha: string;\n            size: number | null;\n            node_id: string;\n            highlighted_content?: string;\n        };\n        /** Low-level Git commit operations within a repository */\n        \"git-commit\": {\n            /** SHA for the commit */\n            sha: string;\n            node_id: string;\n            url: string;\n            /** Identifying information for the git-user */\n            author: {\n                /** Timestamp of the commit */\n                date: string;\n                /** Git email address of the user */\n                email: string;\n                /** Name of the git user */\n                name: string;\n            };\n            /** Identifying information for the git-user */\n            committer: {\n                /** Timestamp of the commit */\n                date: string;\n                /** Git email address of the user */\n                email: string;\n                /** Name of the git user */\n                name: string;\n            };\n            /** Message describing the purpose of the commit */\n            message: string;\n            tree: {\n                /** SHA for the commit */\n                sha: string;\n                url: string;\n            };\n            parents: {\n                /** SHA for the commit */\n                sha: string;\n                url: string;\n                html_url: string;\n            }[];\n            verification: {\n                verified: boolean;\n                reason: string;\n                signature: string | null;\n                payload: string | null;\n            };\n            html_url: string;\n        };\n        /** Git references within a repository */\n        \"git-ref\": {\n            ref: string;\n            node_id: string;\n            url: string;\n            object: {\n                type: string;\n                /** SHA for the reference */\n                sha: string;\n                url: string;\n            };\n        };\n        /** Metadata for a Git tag */\n        \"git-tag\": {\n            node_id: string;\n            /** Name of the tag */\n            tag: string;\n            sha: string;\n            /** URL for the tag */\n            url: string;\n            /** Message describing the purpose of the tag */\n            message: string;\n            tagger: {\n                date: string;\n                email: string;\n                name: string;\n            };\n            object: {\n                sha: string;\n                type: string;\n                url: string;\n            };\n            verification?: components[\"schemas\"][\"verification\"];\n        };\n        /** The hierarchy between files in a Git repository. */\n        \"git-tree\": {\n            sha: string;\n            url: string;\n            truncated: boolean;\n            /** Objects specifying a tree structure */\n            tree: {\n                path?: string;\n                mode?: string;\n                type?: string;\n                sha?: string;\n                size?: number;\n                url?: string;\n            }[];\n        };\n        \"hook-response\": {\n            code: number | null;\n            status: string | null;\n            message: string | null;\n        };\n        /** Webhooks for repositories. */\n        hook: {\n            type: string;\n            /** Unique identifier of the webhook. */\n            id: number;\n            /** The name of a valid service, use 'web' for a webhook. */\n            name: string;\n            /** Determines whether the hook is actually triggered on pushes. */\n            active: boolean;\n            /** Determines what events the hook is triggered for. Default: ['push']. */\n            events: string[];\n            config: {\n                email?: string;\n                password?: string;\n                room?: string;\n                subdomain?: string;\n                url?: components[\"schemas\"][\"webhook-config-url\"];\n                insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n                content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n                digest?: string;\n                secret?: components[\"schemas\"][\"webhook-config-secret\"];\n                token?: string;\n            };\n            updated_at: string;\n            created_at: string;\n            url: string;\n            test_url: string;\n            ping_url: string;\n            last_response: components[\"schemas\"][\"hook-response\"];\n        };\n        /** A repository import from an external source. */\n        import: {\n            vcs: string | null;\n            use_lfs?: string;\n            /** The URL of the originating repository. */\n            vcs_url: string;\n            svc_root?: string;\n            tfvc_project?: string;\n            status: \"auth\" | \"error\" | \"none\" | \"detecting\" | \"choose\" | \"auth_failed\" | \"importing\" | \"mapping\" | \"waiting_to_push\" | \"pushing\" | \"complete\" | \"setup\" | \"unknown\" | \"detection_found_multiple\" | \"detection_found_nothing\" | \"detection_needs_auth\";\n            status_text?: string | null;\n            failed_step?: string | null;\n            error_message?: string | null;\n            import_percent?: number | null;\n            commit_count?: number | null;\n            push_percent?: number | null;\n            has_large_files?: boolean;\n            large_files_size?: number;\n            large_files_count?: number;\n            project_choices?: {\n                vcs?: string;\n                tfvc_project?: string;\n                human_name?: string;\n            }[];\n            message?: string;\n            authors_count?: number | null;\n            url: string;\n            html_url: string;\n            authors_url: string;\n            repository_url: string;\n            svn_root?: string;\n        };\n        /** Porter Author */\n        \"porter-author\": {\n            id: number;\n            remote_id: string;\n            remote_name: string;\n            email: string;\n            name: string;\n            url: string;\n            import_url: string;\n        };\n        /** Porter Large File */\n        \"porter-large-file\": {\n            ref_name: string;\n            path: string;\n            oid: string;\n            size: number;\n        };\n        /** Issue Event Label */\n        \"issue-event-label\": {\n            name: string | null;\n            color: string | null;\n        };\n        \"issue-event-dismissed-review\": {\n            state: string;\n            review_id: number;\n            dismissal_message: string | null;\n            dismissal_commit_id?: string | null;\n        };\n        /** Issue Event Milestone */\n        \"issue-event-milestone\": {\n            title: string;\n        };\n        /** Issue Event Project Card */\n        \"issue-event-project-card\": {\n            url: string;\n            id: number;\n            project_url: string;\n            project_id: number;\n            column_name: string;\n            previous_column_name?: string;\n        };\n        /** Issue Event Rename */\n        \"issue-event-rename\": {\n            from: string;\n            to: string;\n        };\n        /** Issue Event */\n        \"issue-event\": {\n            id: number;\n            node_id: string;\n            url: string;\n            actor: components[\"schemas\"][\"simple-user\"] | null;\n            event: string;\n            commit_id: string | null;\n            commit_url: string | null;\n            created_at: string;\n            issue?: components[\"schemas\"][\"issue-simple\"];\n            label?: components[\"schemas\"][\"issue-event-label\"];\n            assignee?: components[\"schemas\"][\"simple-user\"] | null;\n            assigner?: components[\"schemas\"][\"simple-user\"] | null;\n            review_requester?: components[\"schemas\"][\"simple-user\"] | null;\n            requested_reviewer?: components[\"schemas\"][\"simple-user\"] | null;\n            requested_team?: components[\"schemas\"][\"team\"];\n            dismissed_review?: components[\"schemas\"][\"issue-event-dismissed-review\"];\n            milestone?: components[\"schemas\"][\"issue-event-milestone\"];\n            project_card?: components[\"schemas\"][\"issue-event-project-card\"];\n            rename?: components[\"schemas\"][\"issue-event-rename\"];\n            author_association?: components[\"schemas\"][\"author_association\"];\n            lock_reason?: string | null;\n        };\n        /** Issue Event for Issue */\n        \"issue-event-for-issue\": {\n            id?: number;\n            node_id?: string;\n            url?: string;\n            actor?: components[\"schemas\"][\"simple-user\"];\n            event?: string;\n            commit_id?: string | null;\n            commit_url?: string | null;\n            created_at?: string;\n            sha?: string;\n            html_url?: string;\n            message?: string;\n            issue_url?: string;\n            updated_at?: string;\n            author_association?: components[\"schemas\"][\"author_association\"];\n            body?: string;\n            lock_reason?: string;\n            submitted_at?: string;\n            state?: string;\n            pull_request_url?: string;\n            body_html?: string;\n            body_text?: string;\n        };\n        /** An SSH key granting access to a single repository. */\n        \"deploy-key\": {\n            id: number;\n            key: string;\n            url: string;\n            title: string;\n            verified: boolean;\n            created_at: string;\n            read_only: boolean;\n        };\n        /** Language */\n        language: {\n            [key: string]: number;\n        };\n        /** License Content */\n        \"license-content\": {\n            name: string;\n            path: string;\n            sha: string;\n            size: number;\n            url: string;\n            html_url: string | null;\n            git_url: string | null;\n            download_url: string | null;\n            type: string;\n            content: string;\n            encoding: string;\n            _links: {\n                git: string | null;\n                html: string | null;\n                self: string;\n            };\n            license: components[\"schemas\"][\"license-simple\"] | null;\n        };\n        \"pages-source-hash\": {\n            branch: string;\n            path: string;\n        };\n        /** The configuration for GitHub Pages for a repository. */\n        page: {\n            /** The API address for accessing this Page resource. */\n            url: string;\n            /** The status of the most recent build of the Page. */\n            status: (\"built\" | \"building\" | \"errored\") | null;\n            /** The Pages site's custom domain */\n            cname: string | null;\n            /** Whether the Page has a custom 404 page. */\n            custom_404: boolean;\n            /** The web address the Page can be accessed from. */\n            html_url?: string;\n            source?: components[\"schemas\"][\"pages-source-hash\"];\n            /** Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. */\n            public: boolean;\n        };\n        /** Page Build */\n        \"page-build\": {\n            url: string;\n            status: string;\n            error: {\n                message: string | null;\n            };\n            pusher: components[\"schemas\"][\"simple-user\"] | null;\n            commit: string;\n            duration: number;\n            created_at: string;\n            updated_at: string;\n        };\n        /** Page Build Status */\n        \"page-build-status\": {\n            url: string;\n            status: string;\n        };\n        /** Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary. */\n        \"pull-request\": {\n            url: string;\n            id: number;\n            node_id: string;\n            html_url: string;\n            diff_url: string;\n            patch_url: string;\n            issue_url: string;\n            commits_url: string;\n            review_comments_url: string;\n            review_comment_url: string;\n            comments_url: string;\n            statuses_url: string;\n            /** Number uniquely identifying the pull request within its repository. */\n            number: number;\n            /** State of this Pull Request. Either `open` or `closed`. */\n            state: \"open\" | \"closed\";\n            locked: boolean;\n            /** The title of the pull request. */\n            title: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            body: string | null;\n            labels: {\n                id?: number;\n                node_id?: string;\n                url?: string;\n                name?: string;\n                description?: string | null;\n                color?: string;\n                default?: boolean;\n            }[];\n            milestone: components[\"schemas\"][\"milestone\"] | null;\n            active_lock_reason?: string | null;\n            created_at: string;\n            updated_at: string;\n            closed_at: string | null;\n            merged_at: string | null;\n            merge_commit_sha: string | null;\n            assignee: components[\"schemas\"][\"simple-user\"] | null;\n            assignees?: components[\"schemas\"][\"simple-user\"][] | null;\n            requested_reviewers?: components[\"schemas\"][\"simple-user\"][] | null;\n            requested_teams?: components[\"schemas\"][\"team-simple\"][] | null;\n            head: {\n                label: string;\n                ref: string;\n                repo: {\n                    archive_url: string;\n                    assignees_url: string;\n                    blobs_url: string;\n                    branches_url: string;\n                    collaborators_url: string;\n                    comments_url: string;\n                    commits_url: string;\n                    compare_url: string;\n                    contents_url: string;\n                    contributors_url: string;\n                    deployments_url: string;\n                    description: string | null;\n                    downloads_url: string;\n                    events_url: string;\n                    fork: boolean;\n                    forks_url: string;\n                    full_name: string;\n                    git_commits_url: string;\n                    git_refs_url: string;\n                    git_tags_url: string;\n                    hooks_url: string;\n                    html_url: string;\n                    id: number;\n                    node_id: string;\n                    issue_comment_url: string;\n                    issue_events_url: string;\n                    issues_url: string;\n                    keys_url: string;\n                    labels_url: string;\n                    languages_url: string;\n                    merges_url: string;\n                    milestones_url: string;\n                    name: string;\n                    notifications_url: string;\n                    owner: {\n                        avatar_url: string;\n                        events_url: string;\n                        followers_url: string;\n                        following_url: string;\n                        gists_url: string;\n                        gravatar_id: string | null;\n                        html_url: string;\n                        id: number;\n                        node_id: string;\n                        login: string;\n                        organizations_url: string;\n                        received_events_url: string;\n                        repos_url: string;\n                        site_admin: boolean;\n                        starred_url: string;\n                        subscriptions_url: string;\n                        type: string;\n                        url: string;\n                    };\n                    private: boolean;\n                    pulls_url: string;\n                    releases_url: string;\n                    stargazers_url: string;\n                    statuses_url: string;\n                    subscribers_url: string;\n                    subscription_url: string;\n                    tags_url: string;\n                    teams_url: string;\n                    trees_url: string;\n                    url: string;\n                    clone_url: string;\n                    default_branch: string;\n                    forks: number;\n                    forks_count: number;\n                    git_url: string;\n                    has_downloads: boolean;\n                    has_issues: boolean;\n                    has_projects: boolean;\n                    has_wiki: boolean;\n                    has_pages: boolean;\n                    homepage: string | null;\n                    language: string | null;\n                    master_branch?: string;\n                    archived: boolean;\n                    disabled: boolean;\n                    mirror_url: string | null;\n                    open_issues: number;\n                    open_issues_count: number;\n                    permissions?: {\n                        admin: boolean;\n                        pull: boolean;\n                        push: boolean;\n                    };\n                    temp_clone_token?: string;\n                    allow_merge_commit?: boolean;\n                    allow_squash_merge?: boolean;\n                    allow_rebase_merge?: boolean;\n                    license: {\n                        key: string;\n                        name: string;\n                        url: string | null;\n                        spdx_id: string | null;\n                        node_id: string;\n                    } | null;\n                    pushed_at: string;\n                    size: number;\n                    ssh_url: string;\n                    stargazers_count: number;\n                    svn_url: string;\n                    topics?: string[];\n                    watchers: number;\n                    watchers_count: number;\n                    created_at: string;\n                    updated_at: string;\n                };\n                sha: string;\n                user: {\n                    avatar_url: string;\n                    events_url: string;\n                    followers_url: string;\n                    following_url: string;\n                    gists_url: string;\n                    gravatar_id: string | null;\n                    html_url: string;\n                    id: number;\n                    node_id: string;\n                    login: string;\n                    organizations_url: string;\n                    received_events_url: string;\n                    repos_url: string;\n                    site_admin: boolean;\n                    starred_url: string;\n                    subscriptions_url: string;\n                    type: string;\n                    url: string;\n                };\n            };\n            base: {\n                label: string;\n                ref: string;\n                repo: {\n                    archive_url: string;\n                    assignees_url: string;\n                    blobs_url: string;\n                    branches_url: string;\n                    collaborators_url: string;\n                    comments_url: string;\n                    commits_url: string;\n                    compare_url: string;\n                    contents_url: string;\n                    contributors_url: string;\n                    deployments_url: string;\n                    description: string | null;\n                    downloads_url: string;\n                    events_url: string;\n                    fork: boolean;\n                    forks_url: string;\n                    full_name: string;\n                    git_commits_url: string;\n                    git_refs_url: string;\n                    git_tags_url: string;\n                    hooks_url: string;\n                    html_url: string;\n                    id: number;\n                    node_id: string;\n                    issue_comment_url: string;\n                    issue_events_url: string;\n                    issues_url: string;\n                    keys_url: string;\n                    labels_url: string;\n                    languages_url: string;\n                    merges_url: string;\n                    milestones_url: string;\n                    name: string;\n                    notifications_url: string;\n                    owner: {\n                        avatar_url: string;\n                        events_url: string;\n                        followers_url: string;\n                        following_url: string;\n                        gists_url: string;\n                        gravatar_id: string | null;\n                        html_url: string;\n                        id: number;\n                        node_id: string;\n                        login: string;\n                        organizations_url: string;\n                        received_events_url: string;\n                        repos_url: string;\n                        site_admin: boolean;\n                        starred_url: string;\n                        subscriptions_url: string;\n                        type: string;\n                        url: string;\n                    };\n                    private: boolean;\n                    pulls_url: string;\n                    releases_url: string;\n                    stargazers_url: string;\n                    statuses_url: string;\n                    subscribers_url: string;\n                    subscription_url: string;\n                    tags_url: string;\n                    teams_url: string;\n                    trees_url: string;\n                    url: string;\n                    clone_url: string;\n                    default_branch: string;\n                    forks: number;\n                    forks_count: number;\n                    git_url: string;\n                    has_downloads: boolean;\n                    has_issues: boolean;\n                    has_projects: boolean;\n                    has_wiki: boolean;\n                    has_pages: boolean;\n                    homepage: string | null;\n                    language: string | null;\n                    master_branch?: string;\n                    archived: boolean;\n                    disabled: boolean;\n                    mirror_url: string | null;\n                    open_issues: number;\n                    open_issues_count: number;\n                    permissions?: {\n                        admin: boolean;\n                        pull: boolean;\n                        push: boolean;\n                    };\n                    temp_clone_token?: string;\n                    allow_merge_commit?: boolean;\n                    allow_squash_merge?: boolean;\n                    allow_rebase_merge?: boolean;\n                    license: components[\"schemas\"][\"license-simple\"] | null;\n                    pushed_at: string;\n                    size: number;\n                    ssh_url: string;\n                    stargazers_count: number;\n                    svn_url: string;\n                    topics?: string[];\n                    watchers: number;\n                    watchers_count: number;\n                    created_at: string;\n                    updated_at: string;\n                };\n                sha: string;\n                user: {\n                    avatar_url: string;\n                    events_url: string;\n                    followers_url: string;\n                    following_url: string;\n                    gists_url: string;\n                    gravatar_id: string | null;\n                    html_url: string;\n                    id: number;\n                    node_id: string;\n                    login: string;\n                    organizations_url: string;\n                    received_events_url: string;\n                    repos_url: string;\n                    site_admin: boolean;\n                    starred_url: string;\n                    subscriptions_url: string;\n                    type: string;\n                    url: string;\n                };\n            };\n            _links: {\n                comments: components[\"schemas\"][\"link\"];\n                commits: components[\"schemas\"][\"link\"];\n                statuses: components[\"schemas\"][\"link\"];\n                html: components[\"schemas\"][\"link\"];\n                issue: components[\"schemas\"][\"link\"];\n                review_comments: components[\"schemas\"][\"link\"];\n                review_comment: components[\"schemas\"][\"link\"];\n                self: components[\"schemas\"][\"link\"];\n            };\n            author_association: components[\"schemas\"][\"author_association\"];\n            auto_merge: components[\"schemas\"][\"auto_merge\"];\n            /** Indicates whether or not the pull request is a draft. */\n            draft?: boolean;\n            merged: boolean;\n            mergeable: boolean | null;\n            rebaseable?: boolean | null;\n            mergeable_state: string;\n            merged_by: components[\"schemas\"][\"simple-user\"] | null;\n            comments: number;\n            review_comments: number;\n            /** Indicates whether maintainers can modify the pull request. */\n            maintainer_can_modify: boolean;\n            commits: number;\n            additions: number;\n            deletions: number;\n            changed_files: number;\n        };\n        /** Pull Request Review Comments are comments on a portion of the Pull Request's diff. */\n        \"pull-request-review-comment\": {\n            /** URL for the pull request review comment */\n            url: string;\n            /** The ID of the pull request review to which the comment belongs. */\n            pull_request_review_id: number | null;\n            /** The ID of the pull request review comment. */\n            id: number;\n            /** The node ID of the pull request review comment. */\n            node_id: string;\n            /** The diff of the line that the comment refers to. */\n            diff_hunk: string;\n            /** The relative path of the file to which the comment applies. */\n            path: string;\n            /** The line index in the diff to which the comment applies. */\n            position: number;\n            /** The index of the original line in the diff to which the comment applies. */\n            original_position: number;\n            /** The SHA of the commit to which the comment applies. */\n            commit_id: string;\n            /** The SHA of the original commit to which the comment applies. */\n            original_commit_id: string;\n            /** The comment ID to reply to. */\n            in_reply_to_id?: number;\n            user: components[\"schemas\"][\"simple-user\"];\n            /** The text of the comment. */\n            body: string;\n            created_at: string;\n            updated_at: string;\n            /** HTML URL for the pull request review comment. */\n            html_url: string;\n            /** URL for the pull request that the review comment belongs to. */\n            pull_request_url: string;\n            author_association: components[\"schemas\"][\"author_association\"];\n            _links: {\n                self: {\n                    href: string;\n                };\n                html: {\n                    href: string;\n                };\n                pull_request: {\n                    href: string;\n                };\n            };\n            /** The first line of the range for a multi-line comment. */\n            start_line?: number | null;\n            /** The first line of the range for a multi-line comment. */\n            original_start_line?: number | null;\n            /** The side of the first line of the range for a multi-line comment. */\n            start_side?: (\"LEFT\" | \"RIGHT\") | null;\n            /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */\n            line?: number;\n            /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */\n            original_line?: number;\n            /** The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment */\n            side?: \"LEFT\" | \"RIGHT\";\n            reactions?: components[\"schemas\"][\"reaction-rollup\"];\n            body_html?: string;\n            body_text?: string;\n        };\n        /** Pull Request Merge Result */\n        \"pull-request-merge-result\": {\n            sha: string;\n            merged: boolean;\n            message: string;\n        };\n        /** Pull Request Review Request */\n        \"pull-request-review-request\": {\n            users: components[\"schemas\"][\"simple-user\"][];\n            teams: components[\"schemas\"][\"team-simple\"][];\n        };\n        /** Pull Request Reviews are reviews on pull requests. */\n        \"pull-request-review\": {\n            /** Unique identifier of the review */\n            id: number;\n            node_id: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            /** The text of the review. */\n            body: string;\n            state: string;\n            html_url: string;\n            pull_request_url: string;\n            _links: {\n                html: {\n                    href: string;\n                };\n                pull_request: {\n                    href: string;\n                };\n            };\n            submitted_at?: string;\n            /** A commit SHA for the review. */\n            commit_id: string;\n            body_html?: string;\n            body_text?: string;\n            author_association: components[\"schemas\"][\"author_association\"];\n        };\n        /** Legacy Review Comment */\n        \"review-comment\": {\n            url: string;\n            pull_request_review_id: number | null;\n            id: number;\n            node_id: string;\n            diff_hunk: string;\n            path: string;\n            position: number | null;\n            original_position: number;\n            commit_id: string;\n            original_commit_id: string;\n            in_reply_to_id?: number;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            body: string;\n            created_at: string;\n            updated_at: string;\n            html_url: string;\n            pull_request_url: string;\n            author_association: components[\"schemas\"][\"author_association\"];\n            _links: {\n                self: components[\"schemas\"][\"link\"];\n                html: components[\"schemas\"][\"link\"];\n                pull_request: components[\"schemas\"][\"link\"];\n            };\n            body_text?: string;\n            body_html?: string;\n            /** The side of the first line of the range for a multi-line comment. */\n            side?: \"LEFT\" | \"RIGHT\";\n            /** The side of the first line of the range for a multi-line comment. */\n            start_side?: (\"LEFT\" | \"RIGHT\") | null;\n            /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */\n            line?: number;\n            /** The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */\n            original_line?: number;\n            /** The first line of the range for a multi-line comment. */\n            start_line?: number | null;\n            /** The original first line of the range for a multi-line comment. */\n            original_start_line?: number | null;\n        };\n        /** Data related to a release. */\n        \"release-asset\": {\n            url: string;\n            browser_download_url: string;\n            id: number;\n            node_id: string;\n            /** The file name of the asset. */\n            name: string;\n            label: string | null;\n            /** State of the release asset. */\n            state: \"uploaded\" | \"open\";\n            content_type: string;\n            size: number;\n            download_count: number;\n            created_at: string;\n            updated_at: string;\n            uploader: components[\"schemas\"][\"simple-user\"] | null;\n        };\n        /** A release. */\n        release: {\n            url: string;\n            html_url: string;\n            assets_url: string;\n            upload_url: string;\n            tarball_url: string | null;\n            zipball_url: string | null;\n            id: number;\n            node_id: string;\n            /** The name of the tag. */\n            tag_name: string;\n            /** Specifies the commitish value that determines where the Git tag is created from. */\n            target_commitish: string;\n            name: string | null;\n            body?: string | null;\n            /** true to create a draft (unpublished) release, false to create a published one. */\n            draft: boolean;\n            /** Whether to identify the release as a prerelease or a full release. */\n            prerelease: boolean;\n            created_at: string;\n            published_at: string | null;\n            author: components[\"schemas\"][\"simple-user\"];\n            assets: components[\"schemas\"][\"release-asset\"][];\n            body_html?: string;\n            body_text?: string;\n        };\n        /** Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */\n        \"secret-scanning-alert-state\": \"open\" | \"resolved\";\n        /** **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`. */\n        \"secret-scanning-alert-resolution\": string | null;\n        \"secret-scanning-alert\": {\n            number?: components[\"schemas\"][\"alert-number\"];\n            created_at?: components[\"schemas\"][\"alert-created-at\"];\n            url?: components[\"schemas\"][\"alert-url\"];\n            html_url?: components[\"schemas\"][\"alert-html-url\"];\n            state?: components[\"schemas\"][\"secret-scanning-alert-state\"];\n            resolution?: components[\"schemas\"][\"secret-scanning-alert-resolution\"];\n            /** The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */\n            resolved_at?: string | null;\n            resolved_by?: components[\"schemas\"][\"simple-user\"];\n            /** The type of secret that secret scanning detected. */\n            secret_type?: string;\n            /** The secret that was detected. */\n            secret?: string;\n        };\n        /** Stargazer */\n        stargazer: {\n            starred_at: string;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n        };\n        /** Code Frequency Stat */\n        \"code-frequency-stat\": number[];\n        /** Commit Activity */\n        \"commit-activity\": {\n            days: number[];\n            total: number;\n            week: number;\n        };\n        /** Contributor Activity */\n        \"contributor-activity\": {\n            author: components[\"schemas\"][\"simple-user\"] | null;\n            total: number;\n            weeks: {\n                w?: string;\n                a?: number;\n                d?: number;\n                c?: number;\n            }[];\n        };\n        \"participation-stats\": {\n            all: number[];\n            owner: number[];\n        };\n        /** Repository invitations let you manage who you collaborate with. */\n        \"repository-subscription\": {\n            /** Determines if notifications should be received from this repository. */\n            subscribed: boolean;\n            /** Determines if all notifications should be blocked from this repository. */\n            ignored: boolean;\n            reason: string | null;\n            created_at: string;\n            url: string;\n            repository_url: string;\n        };\n        /** Tag */\n        tag: {\n            name: string;\n            commit: {\n                sha: string;\n                url: string;\n            };\n            zipball_url: string;\n            tarball_url: string;\n            node_id: string;\n        };\n        /** A topic aggregates entities that are related to a subject. */\n        topic: {\n            names: string[];\n        };\n        traffic: {\n            timestamp: string;\n            uniques: number;\n            count: number;\n        };\n        /** Clone Traffic */\n        \"clone-traffic\": {\n            count: number;\n            uniques: number;\n            clones: components[\"schemas\"][\"traffic\"][];\n        };\n        /** Content Traffic */\n        \"content-traffic\": {\n            path: string;\n            title: string;\n            count: number;\n            uniques: number;\n        };\n        /** Referrer Traffic */\n        \"referrer-traffic\": {\n            referrer: string;\n            count: number;\n            uniques: number;\n        };\n        /** View Traffic */\n        \"view-traffic\": {\n            count: number;\n            uniques: number;\n            views: components[\"schemas\"][\"traffic\"][];\n        };\n        \"scim-group-list-enterprise\": {\n            schemas: string[];\n            totalResults: number;\n            itemsPerPage: number;\n            startIndex: number;\n            Resources: {\n                schemas: string[];\n                id: string;\n                externalId?: string | null;\n                displayName?: string;\n                members?: {\n                    value?: string;\n                    $ref?: string;\n                    display?: string;\n                }[];\n                meta?: {\n                    resourceType?: string;\n                    created?: string;\n                    lastModified?: string;\n                    location?: string;\n                };\n            }[];\n        };\n        \"scim-enterprise-group\": {\n            schemas: string[];\n            id: string;\n            externalId?: string | null;\n            displayName?: string;\n            members?: {\n                value?: string;\n                $ref?: string;\n                display?: string;\n            }[];\n            meta?: {\n                resourceType?: string;\n                created?: string;\n                lastModified?: string;\n                location?: string;\n            };\n        };\n        \"scim-user-list-enterprise\": {\n            schemas: string[];\n            totalResults: number;\n            itemsPerPage: number;\n            startIndex: number;\n            Resources: {\n                schemas: string[];\n                id: string;\n                externalId?: string;\n                userName?: string;\n                name?: {\n                    givenName?: string;\n                    familyName?: string;\n                };\n                emails?: {\n                    value?: string;\n                    primary?: boolean;\n                    type?: string;\n                }[];\n                groups?: {\n                    value?: string;\n                }[];\n                active?: boolean;\n                meta?: {\n                    resourceType?: string;\n                    created?: string;\n                    lastModified?: string;\n                    location?: string;\n                };\n            }[];\n        };\n        \"scim-enterprise-user\": {\n            schemas: string[];\n            id: string;\n            externalId?: string;\n            userName?: string;\n            name?: {\n                givenName?: string;\n                familyName?: string;\n            };\n            emails?: {\n                value?: string;\n                type?: string;\n                primary?: boolean;\n            }[];\n            groups?: {\n                value?: string;\n            }[];\n            active?: boolean;\n            meta?: {\n                resourceType?: string;\n                created?: string;\n                lastModified?: string;\n                location?: string;\n            };\n        };\n        /** SCIM /Users provisioning endpoints */\n        \"scim-user\": {\n            /** SCIM schema used. */\n            schemas: string[];\n            /** Unique identifier of an external identity */\n            id: string;\n            /** The ID of the User. */\n            externalId: string | null;\n            /** Configured by the admin. Could be an email, login, or username */\n            userName: string | null;\n            /** The name of the user, suitable for display to end-users */\n            displayName?: string | null;\n            name: {\n                givenName: string | null;\n                familyName: string | null;\n                formatted?: string | null;\n            };\n            /** user emails */\n            emails: {\n                value: string;\n                primary?: boolean;\n            }[];\n            /** The active status of the User. */\n            active: boolean;\n            meta: {\n                resourceType?: string;\n                created?: string;\n                lastModified?: string;\n                location?: string;\n            };\n            /** The ID of the organization. */\n            organization_id?: number;\n            /** Set of operations to be performed */\n            operations?: {\n                op: \"add\" | \"remove\" | \"replace\";\n                path?: string;\n                value?: string | {\n                    [key: string]: any;\n                } | {\n                    [key: string]: any;\n                }[];\n            }[];\n            /** associated groups */\n            groups?: {\n                value?: string;\n                display?: string;\n            }[];\n        };\n        /** SCIM User List */\n        \"scim-user-list\": {\n            /** SCIM schema used. */\n            schemas: string[];\n            totalResults: number;\n            itemsPerPage: number;\n            startIndex: number;\n            Resources: components[\"schemas\"][\"scim-user\"][];\n        };\n        \"search-result-text-matches\": {\n            object_url?: string;\n            object_type?: string | null;\n            property?: string;\n            fragment?: string;\n            matches?: {\n                text?: string;\n                indices?: number[];\n            }[];\n        }[];\n        /** Code Search Result Item */\n        \"code-search-result-item\": {\n            name: string;\n            path: string;\n            sha: string;\n            url: string;\n            git_url: string;\n            html_url: string;\n            repository: components[\"schemas\"][\"minimal-repository\"];\n            score: number;\n            file_size?: number;\n            language?: string | null;\n            last_modified_at?: string;\n            line_numbers?: string[];\n            text_matches?: components[\"schemas\"][\"search-result-text-matches\"];\n        };\n        /** Commit Search Result Item */\n        \"commit-search-result-item\": {\n            url: string;\n            sha: string;\n            html_url: string;\n            comments_url: string;\n            commit: {\n                author: {\n                    name: string;\n                    email: string;\n                    date: string;\n                };\n                committer: components[\"schemas\"][\"git-user\"] | null;\n                comment_count: number;\n                message: string;\n                tree: {\n                    sha: string;\n                    url: string;\n                };\n                url: string;\n                verification?: components[\"schemas\"][\"verification\"];\n            };\n            author: components[\"schemas\"][\"simple-user\"] | null;\n            committer: components[\"schemas\"][\"git-user\"] | null;\n            parents: {\n                url?: string;\n                html_url?: string;\n                sha?: string;\n            }[];\n            repository: components[\"schemas\"][\"minimal-repository\"];\n            score: number;\n            node_id: string;\n            text_matches?: components[\"schemas\"][\"search-result-text-matches\"];\n        };\n        /** Issue Search Result Item */\n        \"issue-search-result-item\": {\n            url: string;\n            repository_url: string;\n            labels_url: string;\n            comments_url: string;\n            events_url: string;\n            html_url: string;\n            id: number;\n            node_id: string;\n            number: number;\n            title: string;\n            locked: boolean;\n            active_lock_reason?: string | null;\n            assignees?: components[\"schemas\"][\"simple-user\"][] | null;\n            user: components[\"schemas\"][\"simple-user\"] | null;\n            labels: {\n                id?: number;\n                node_id?: string;\n                url?: string;\n                name?: string;\n                color?: string;\n                default?: boolean;\n                description?: string | null;\n            }[];\n            state: string;\n            assignee: components[\"schemas\"][\"simple-user\"] | null;\n            milestone: components[\"schemas\"][\"milestone\"] | null;\n            comments: number;\n            created_at: string;\n            updated_at: string;\n            closed_at: string | null;\n            text_matches?: components[\"schemas\"][\"search-result-text-matches\"];\n            pull_request?: {\n                merged_at?: string | null;\n                diff_url: string | null;\n                html_url: string | null;\n                patch_url: string | null;\n                url: string | null;\n            };\n            body?: string;\n            score: number;\n            author_association: components[\"schemas\"][\"author_association\"];\n            draft?: boolean;\n            repository?: components[\"schemas\"][\"repository\"];\n            body_html?: string;\n            body_text?: string;\n            timeline_url?: string;\n            performed_via_github_app?: components[\"schemas\"][\"integration\"] | null;\n        };\n        /** Label Search Result Item */\n        \"label-search-result-item\": {\n            id: number;\n            node_id: string;\n            url: string;\n            name: string;\n            color: string;\n            default: boolean;\n            description: string | null;\n            score: number;\n            text_matches?: components[\"schemas\"][\"search-result-text-matches\"];\n        };\n        /** Repo Search Result Item */\n        \"repo-search-result-item\": {\n            id: number;\n            node_id: string;\n            name: string;\n            full_name: string;\n            owner: components[\"schemas\"][\"simple-user\"] | null;\n            private: boolean;\n            html_url: string;\n            description: string | null;\n            fork: boolean;\n            url: string;\n            created_at: string;\n            updated_at: string;\n            pushed_at: string;\n            homepage: string | null;\n            size: number;\n            stargazers_count: number;\n            watchers_count: number;\n            language: string | null;\n            forks_count: number;\n            open_issues_count: number;\n            master_branch?: string;\n            default_branch: string;\n            score: number;\n            forks_url: string;\n            keys_url: string;\n            collaborators_url: string;\n            teams_url: string;\n            hooks_url: string;\n            issue_events_url: string;\n            events_url: string;\n            assignees_url: string;\n            branches_url: string;\n            tags_url: string;\n            blobs_url: string;\n            git_tags_url: string;\n            git_refs_url: string;\n            trees_url: string;\n            statuses_url: string;\n            languages_url: string;\n            stargazers_url: string;\n            contributors_url: string;\n            subscribers_url: string;\n            subscription_url: string;\n            commits_url: string;\n            git_commits_url: string;\n            comments_url: string;\n            issue_comment_url: string;\n            contents_url: string;\n            compare_url: string;\n            merges_url: string;\n            archive_url: string;\n            downloads_url: string;\n            issues_url: string;\n            pulls_url: string;\n            milestones_url: string;\n            notifications_url: string;\n            labels_url: string;\n            releases_url: string;\n            deployments_url: string;\n            git_url: string;\n            ssh_url: string;\n            clone_url: string;\n            svn_url: string;\n            forks: number;\n            open_issues: number;\n            watchers: number;\n            topics?: string[];\n            mirror_url: string | null;\n            has_issues: boolean;\n            has_projects: boolean;\n            has_pages: boolean;\n            has_wiki: boolean;\n            has_downloads: boolean;\n            archived: boolean;\n            /** Returns whether or not this repository disabled. */\n            disabled: boolean;\n            license: components[\"schemas\"][\"license-simple\"] | null;\n            permissions?: {\n                admin: boolean;\n                pull: boolean;\n                push: boolean;\n            };\n            text_matches?: components[\"schemas\"][\"search-result-text-matches\"];\n            temp_clone_token?: string;\n            allow_merge_commit?: boolean;\n            allow_squash_merge?: boolean;\n            allow_rebase_merge?: boolean;\n            delete_branch_on_merge?: boolean;\n        };\n        /** Topic Search Result Item */\n        \"topic-search-result-item\": {\n            name: string;\n            display_name: string | null;\n            short_description: string | null;\n            description: string | null;\n            created_by: string | null;\n            released: string | null;\n            created_at: string;\n            updated_at: string;\n            featured: boolean;\n            curated: boolean;\n            score: number;\n            repository_count?: number | null;\n            logo_url?: string | null;\n            text_matches?: components[\"schemas\"][\"search-result-text-matches\"];\n            related?: {\n                topic_relation?: {\n                    id?: number;\n                    name?: string;\n                    topic_id?: number;\n                    relation_type?: string;\n                };\n            }[] | null;\n            aliases?: {\n                topic_relation?: {\n                    id?: number;\n                    name?: string;\n                    topic_id?: number;\n                    relation_type?: string;\n                };\n            }[] | null;\n        };\n        /** User Search Result Item */\n        \"user-search-result-item\": {\n            login: string;\n            id: number;\n            node_id: string;\n            avatar_url: string;\n            gravatar_id: string | null;\n            url: string;\n            html_url: string;\n            followers_url: string;\n            subscriptions_url: string;\n            organizations_url: string;\n            repos_url: string;\n            received_events_url: string;\n            type: string;\n            score: number;\n            following_url: string;\n            gists_url: string;\n            starred_url: string;\n            events_url: string;\n            public_repos?: number;\n            public_gists?: number;\n            followers?: number;\n            following?: number;\n            created_at?: string;\n            updated_at?: string;\n            name?: string | null;\n            bio?: string | null;\n            email?: string | null;\n            location?: string | null;\n            site_admin: boolean;\n            hireable?: boolean | null;\n            text_matches?: components[\"schemas\"][\"search-result-text-matches\"];\n            blog?: string | null;\n            company?: string | null;\n            suspended_at?: string | null;\n        };\n        /** Private User */\n        \"private-user\": {\n            login: string;\n            id: number;\n            node_id: string;\n            avatar_url: string;\n            gravatar_id: string | null;\n            url: string;\n            html_url: string;\n            followers_url: string;\n            following_url: string;\n            gists_url: string;\n            starred_url: string;\n            subscriptions_url: string;\n            organizations_url: string;\n            repos_url: string;\n            events_url: string;\n            received_events_url: string;\n            type: string;\n            site_admin: boolean;\n            name: string | null;\n            company: string | null;\n            blog: string | null;\n            location: string | null;\n            email: string | null;\n            hireable: boolean | null;\n            bio: string | null;\n            twitter_username?: string | null;\n            public_repos: number;\n            public_gists: number;\n            followers: number;\n            following: number;\n            created_at: string;\n            updated_at: string;\n            private_gists: number;\n            total_private_repos: number;\n            owned_private_repos: number;\n            disk_usage: number;\n            collaborators: number;\n            two_factor_authentication: boolean;\n            plan?: {\n                collaborators: number;\n                name: string;\n                space: number;\n                private_repos: number;\n            };\n            suspended_at?: string | null;\n            business_plus?: boolean;\n            ldap_dn?: string;\n        };\n        /** Public User */\n        \"public-user\": {\n            login: string;\n            id: number;\n            node_id: string;\n            avatar_url: string;\n            gravatar_id: string | null;\n            url: string;\n            html_url: string;\n            followers_url: string;\n            following_url: string;\n            gists_url: string;\n            starred_url: string;\n            subscriptions_url: string;\n            organizations_url: string;\n            repos_url: string;\n            events_url: string;\n            received_events_url: string;\n            type: string;\n            site_admin: boolean;\n            name: string | null;\n            company: string | null;\n            blog: string | null;\n            location: string | null;\n            email: string | null;\n            hireable: boolean | null;\n            bio: string | null;\n            twitter_username?: string | null;\n            public_repos: number;\n            public_gists: number;\n            followers: number;\n            following: number;\n            created_at: string;\n            updated_at: string;\n            plan?: {\n                collaborators: number;\n                name: string;\n                space: number;\n                private_repos: number;\n            };\n            suspended_at?: string | null;\n            private_gists?: number;\n            total_private_repos?: number;\n            owned_private_repos?: number;\n            disk_usage?: number;\n            collaborators?: number;\n        };\n        /** Email */\n        email: {\n            email: string;\n            primary: boolean;\n            verified: boolean;\n            visibility: string | null;\n        };\n        /** A unique encryption key */\n        \"gpg-key\": {\n            id: number;\n            primary_key_id: number | null;\n            key_id: string;\n            public_key: string;\n            emails: {\n                email?: string;\n                verified?: boolean;\n            }[];\n            subkeys: {\n                id?: number;\n                primary_key_id?: number;\n                key_id?: string;\n                public_key?: string;\n                emails?: {\n                    [key: string]: any;\n                }[];\n                subkeys?: {\n                    [key: string]: any;\n                }[];\n                can_sign?: boolean;\n                can_encrypt_comms?: boolean;\n                can_encrypt_storage?: boolean;\n                can_certify?: boolean;\n                created_at?: string;\n                expires_at?: string | null;\n                raw_key?: string | null;\n            }[];\n            can_sign: boolean;\n            can_encrypt_comms: boolean;\n            can_encrypt_storage: boolean;\n            can_certify: boolean;\n            created_at: string;\n            expires_at: string | null;\n            raw_key: string | null;\n        };\n        /** Key */\n        key: {\n            key_id: string;\n            key: string;\n            id: number;\n            url: string;\n            title: string;\n            created_at: string;\n            verified: boolean;\n            read_only: boolean;\n        };\n        \"marketplace-account\": {\n            url: string;\n            id: number;\n            type: string;\n            node_id?: string;\n            login: string;\n            email?: string | null;\n            organization_billing_email?: string | null;\n        };\n        /** User Marketplace Purchase */\n        \"user-marketplace-purchase\": {\n            billing_cycle: string;\n            next_billing_date: string | null;\n            unit_count: number | null;\n            on_free_trial: boolean;\n            free_trial_ends_on: string | null;\n            updated_at: string | null;\n            account: components[\"schemas\"][\"marketplace-account\"];\n            plan: components[\"schemas\"][\"marketplace-listing-plan\"];\n        };\n        /** Starred Repository */\n        \"starred-repository\": {\n            starred_at: string;\n            repo: components[\"schemas\"][\"repository\"];\n        };\n        /** Hovercard */\n        hovercard: {\n            contexts: {\n                message: string;\n                octicon: string;\n            }[];\n        };\n        /** Key Simple */\n        \"key-simple\": {\n            id: number;\n            key: string;\n        };\n    };\n    responses: {\n        /** Resource Not Found */\n        not_found: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"basic-error\"];\n            };\n        };\n        /** Validation Failed */\n        validation_failed_simple: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"validation-error-simple\"];\n            };\n        };\n        /** Preview Header Missing */\n        preview_header_missing: {\n            content: {\n                \"application/json\": {\n                    message: string;\n                    documentation_url: string;\n                };\n            };\n        };\n        /** Forbidden */\n        forbidden: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"basic-error\"];\n            };\n        };\n        /** Requires Authentication */\n        requires_authentication: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"basic-error\"];\n            };\n        };\n        /** Validation Failed */\n        validation_failed: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"validation-error\"];\n            };\n        };\n        /** Not Modified */\n        not_modified: unknown;\n        /** Gone */\n        gone: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"basic-error\"];\n            };\n        };\n        /** Service Unavailable */\n        service_unavailable: {\n            content: {\n                \"application/json\": {\n                    code?: string;\n                    message?: string;\n                    documentation_url?: string;\n                };\n            };\n        };\n        /** Forbidden Gist */\n        forbidden_gist: {\n            content: {\n                \"application/json\": {\n                    block?: {\n                        reason?: string;\n                        created_at?: string;\n                        html_url?: string | null;\n                    };\n                    message?: string;\n                    documentation_url?: string;\n                };\n            };\n        };\n        /** Moved Permanently */\n        moved_permanently: unknown;\n        /** Conflict */\n        conflict: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"basic-error\"];\n            };\n        };\n        /** Internal Error */\n        internal_error: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"basic-error\"];\n            };\n        };\n        /** Bad Request */\n        bad_request: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"basic-error\"];\n                \"application/scim+json\": components[\"schemas\"][\"scim-error\"];\n            };\n        };\n        /** Found */\n        found: unknown;\n        /** Resource Not Found */\n        scim_not_found: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"scim-error\"];\n                \"application/scim+json\": components[\"schemas\"][\"scim-error\"];\n            };\n        };\n        /** Forbidden */\n        scim_forbidden: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"scim-error\"];\n                \"application/scim+json\": components[\"schemas\"][\"scim-error\"];\n            };\n        };\n        /** Bad Request */\n        scim_bad_request: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"scim-error\"];\n                \"application/scim+json\": components[\"schemas\"][\"scim-error\"];\n            };\n        };\n        /** Internal Error */\n        scim_internal_error: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"scim-error\"];\n                \"application/scim+json\": components[\"schemas\"][\"scim-error\"];\n            };\n        };\n        /** Conflict */\n        scim_conflict: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"scim-error\"];\n                \"application/scim+json\": components[\"schemas\"][\"scim-error\"];\n            };\n        };\n    };\n    parameters: {\n        /** Results per page (max 100) */\n        per_page: number;\n        /** Page number of the results to fetch. */\n        page: number;\n        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n        since: string;\n        /** installation_id parameter */\n        installation_id: number;\n        /** grant_id parameter */\n        grant_id: number;\n        /** The client ID of your GitHub app. */\n        \"client-id\": string;\n        \"access-token\": string;\n        app_slug: string;\n        /** authorization_id parameter */\n        authorization_id: number;\n        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n        enterprise: string;\n        /** Unique identifier of an organization. */\n        org_id: number;\n        /** Unique identifier of the self-hosted runner group. */\n        runner_group_id: number;\n        /** Unique identifier of the self-hosted runner. */\n        runner_id: number;\n        /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */\n        \"audit-log-phrase\": string;\n        /**\n         * The event types to include:\n         *\n         * - `web` - returns web (non-Git) events\n         * - `git` - returns Git events\n         * - `all` - returns both web and Git events\n         *\n         * The default is `web`.\n         */\n        \"audit-log-include\": \"web\" | \"git\" | \"all\";\n        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */\n        \"audit-log-after\": string;\n        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */\n        \"audit-log-before\": string;\n        /**\n         * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.\n         *\n         * The default is `desc`.\n         */\n        \"audit-log-order\": \"desc\" | \"asc\";\n        /** gist_id parameter */\n        gist_id: string;\n        /** comment_id parameter */\n        comment_id: number;\n        /** A list of comma separated label names. Example: `bug,ui,@high` */\n        labels: string;\n        /** One of `asc` (ascending) or `desc` (descending). */\n        direction: \"asc\" | \"desc\";\n        /** account_id parameter */\n        account_id: number;\n        /** plan_id parameter */\n        plan_id: number;\n        /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n        sort: \"created\" | \"updated\";\n        owner: string;\n        repo: string;\n        /** If `true`, show notifications marked as read. */\n        all: boolean;\n        /** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n        participating: boolean;\n        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n        before: string;\n        /** thread_id parameter */\n        thread_id: number;\n        /** An organization ID. Only return organizations with an ID greater than this ID. */\n        \"since-org\": number;\n        org: string;\n        repository_id: number;\n        /** secret_name parameter */\n        secret_name: string;\n        username: string;\n        \"hook-id\": number;\n        /** invitation_id parameter */\n        invitation_id: number;\n        /** migration_id parameter */\n        migration_id: number;\n        /** repo_name parameter */\n        repo_name: string;\n        /** team_slug parameter */\n        team_slug: string;\n        \"discussion-number\": number;\n        \"comment-number\": number;\n        \"reaction-id\": number;\n        \"project-id\": number;\n        /** card_id parameter */\n        card_id: number;\n        /** column_id parameter */\n        column_id: number;\n        /** artifact_id parameter */\n        artifact_id: number;\n        /** job_id parameter */\n        job_id: number;\n        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n        actor: string;\n        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n        \"workflow-run-branch\": string;\n        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n        event: string;\n        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see \"[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run).\" */\n        \"workflow-run-status\": \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\";\n        \"run-id\": number;\n        /** The ID of the workflow. You can also pass the workflow file name as a string. */\n        \"workflow-id\": number | string;\n        /** The name of the branch. */\n        branch: string;\n        /** check_run_id parameter */\n        check_run_id: number;\n        /** check_suite_id parameter */\n        check_suite_id: number;\n        /** Returns check runs with the specified `name`. */\n        check_name: string;\n        /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */\n        status: \"queued\" | \"in_progress\" | \"completed\";\n        /** The security alert number, found at the end of the security alert's URL. */\n        alert_number: components[\"schemas\"][\"alert-number\"];\n        /** commit_sha parameter */\n        commit_sha: string;\n        /** deployment_id parameter */\n        deployment_id: number;\n        /** A user ID. Only return users with an ID greater than this ID. */\n        \"since-user\": number;\n        /** issue_number parameter */\n        issue_number: number;\n        /** key_id parameter */\n        key_id: number;\n        /** milestone_number parameter */\n        milestone_number: number;\n        \"pull-number\": number;\n        /** review_id parameter */\n        review_id: number;\n        /** asset_id parameter */\n        asset_id: number;\n        /** release_id parameter */\n        release_id: number;\n        /** Must be one of: `day`, `week`. */\n        per: \"day\" | \"week\";\n        /** A repository ID. Only return repositories with an ID greater than this ID. */\n        \"since-repo\": number;\n        /** Used for pagination: the index of the first result to return. */\n        start_index: number;\n        /** Used for pagination: the number of results to return. */\n        count: number;\n        /** Identifier generated by the GitHub SCIM endpoint. */\n        scim_group_id: string;\n        /** scim_user_id parameter */\n        scim_user_id: string;\n        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n        order: \"desc\" | \"asc\";\n        \"team-id\": number;\n        /** gpg_key_id parameter */\n        gpg_key_id: number;\n    };\n    headers: {\n        link?: string;\n        \"content-type\"?: string;\n        \"x-common-marker-version\"?: string;\n        \"x-rate-limit-limit\"?: number;\n        \"x-rate-limit-remaining\"?: number;\n        \"x-rate-limit-reset\"?: number;\n        location?: string;\n    };\n}\nexport interface operations {\n    /** Get Hypermedia links to resources accessible in GitHub's REST API */\n    \"meta/root\": {\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        current_user_url: string;\n                        current_user_authorizations_html_url: string;\n                        authorizations_url: string;\n                        code_search_url: string;\n                        commit_search_url: string;\n                        emails_url: string;\n                        emojis_url: string;\n                        events_url: string;\n                        feeds_url: string;\n                        followers_url: string;\n                        following_url: string;\n                        gists_url: string;\n                        hub_url: string;\n                        issue_search_url: string;\n                        issues_url: string;\n                        keys_url: string;\n                        label_search_url: string;\n                        notifications_url: string;\n                        organization_url: string;\n                        organization_repositories_url: string;\n                        organization_teams_url: string;\n                        public_gists_url: string;\n                        rate_limit_url: string;\n                        repository_url: string;\n                        repository_search_url: string;\n                        current_user_repositories_url: string;\n                        starred_url: string;\n                        starred_gists_url: string;\n                        topic_search_url?: string;\n                        user_url: string;\n                        user_organizations_url: string;\n                        user_repositories_url: string;\n                        user_search_url: string;\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)\" endpoint.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/get-authenticated\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"integration\"];\n                };\n            };\n        };\n    };\n    /** Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`. */\n    \"apps/create-from-manifest\": {\n        parameters: {\n            path: {\n                code: string;\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"integration\"] & ({\n                        client_id: string;\n                        client_secret: string;\n                        webhook_secret: string;\n                        pem: string;\n                    } & {\n                        [key: string]: any;\n                    });\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n    };\n    /**\n     * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/get-webhook-config-for-app\": {\n        responses: {\n            /** Default response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"webhook-config\"];\n                };\n            };\n        };\n    };\n    /**\n     * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/update-webhook-config-for-app\": {\n        responses: {\n            /** Default response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"webhook-config\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    url?: components[\"schemas\"][\"webhook-config-url\"];\n                    content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n                    secret?: components[\"schemas\"][\"webhook-config-secret\"];\n                    insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n                };\n            };\n        };\n    };\n    /**\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     *\n     * The permissions the installation has are included under the `permissions` key.\n     */\n    \"apps/list-installations\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                outdated?: string;\n            };\n        };\n        responses: {\n            /** The permissions the installation has are included under the `permissions` key. */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"installation\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/get-installation\": {\n        parameters: {\n            path: {\n                /** installation_id parameter */\n                installation_id: components[\"parameters\"][\"installation_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"installation\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://docs.github.com/v3/apps/#suspend-an-app-installation)\" endpoint.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/delete-installation\": {\n        parameters: {\n            path: {\n                /** installation_id parameter */\n                installation_id: components[\"parameters\"][\"installation_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/create-installation-access-token\": {\n        parameters: {\n            path: {\n                /** installation_id parameter */\n                installation_id: components[\"parameters\"][\"installation_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"installation-token\"];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** List of repository names that the token should have access to */\n                    repositories?: string[];\n                    /** List of repository IDs that the token should have access to */\n                    repository_ids?: number[];\n                    permissions?: components[\"schemas\"][\"app-permissions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/suspend-installation\": {\n        parameters: {\n            path: {\n                /** installation_id parameter */\n                installation_id: components[\"parameters\"][\"installation_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Removes a GitHub App installation suspension.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/unsuspend-installation\": {\n        parameters: {\n            path: {\n                /** installation_id parameter */\n                installation_id: components[\"parameters\"][\"installation_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n     *\n     * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`.\n     */\n    \"oauth-authorizations/list-grants\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"application-grant\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n    \"oauth-authorizations/get-grant\": {\n        parameters: {\n            path: {\n                /** grant_id parameter */\n                grant_id: components[\"parameters\"][\"grant_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"application-grant\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n     *\n     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).\n     */\n    \"oauth-authorizations/delete-grant\": {\n        parameters: {\n            path: {\n                /** grant_id parameter */\n                grant_id: components[\"parameters\"][\"grant_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\n     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).\n     */\n    \"apps/delete-authorization\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The OAuth access token used to authenticate to the GitHub API. */\n                    access_token?: string;\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n     *\n     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.\n     *\n     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under \"Authorized OAuth Apps\" on GitHub](https://github.com/settings/applications#authorized).\n     */\n    \"apps/revoke-grant-for-application\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n                access_token: components[\"parameters\"][\"access-token\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`. */\n    \"apps/check-token\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The access_token of the OAuth application. */\n                    access_token: string;\n                };\n            };\n        };\n    };\n    /** OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. */\n    \"apps/delete-token\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The OAuth access token used to authenticate to the GitHub API. */\n                    access_token?: string;\n                };\n            };\n        };\n    };\n    /** OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */\n    \"apps/reset-token\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The access_token of the OAuth application. */\n                    access_token: string;\n                };\n            };\n        };\n    };\n    /** Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */\n    \"apps/scope-token\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** **Required.** The OAuth access token used to authenticate to the GitHub API. */\n                    access_token?: string;\n                    /** The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified. */\n                    target?: string;\n                    /** The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified. */\n                    target_id?: number;\n                    /** The list of repository IDs to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified. */\n                    repositories?: string[];\n                    /** The list of repository names to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified. */\n                    repository_ids?: number[];\n                    permissions?: components[\"schemas\"][\"app-permissions\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n     *\n     * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.\n     */\n    \"apps/check-authorization\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n                access_token: components[\"parameters\"][\"access-token\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"] | null;\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n     *\n     * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.\n     */\n    \"apps/reset-authorization\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n                access_token: components[\"parameters\"][\"access-token\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n     *\n     * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.\n     */\n    \"apps/revoke-authorization-for-application\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n                access_token: components[\"parameters\"][\"access-token\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n     *\n     * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n     */\n    \"apps/get-by-slug\": {\n        parameters: {\n            path: {\n                app_slug: components[\"parameters\"][\"app_slug\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"integration\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n    \"oauth-authorizations/list-authorizations\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n     *\n     * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n     *\n     * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n     *\n     * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.\n     *\n     * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).\n     *\n     * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).\n     */\n    \"oauth-authorizations/create-authorization\": {\n        parameters: {};\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** A list of scopes that this authorization is in. */\n                    scopes?: string[] | null;\n                    /** A note to remind you what the OAuth token is for. */\n                    note?: string;\n                    /** A URL to remind you what app the OAuth token is for. */\n                    note_url?: string;\n                    /** The OAuth app client key for which to create the token. */\n                    client_id?: string;\n                    /** The OAuth app client secret for which to create the token. */\n                    client_secret?: string;\n                    /** A unique string to distinguish an authorization from others created for the same client ID and user. */\n                    fingerprint?: string;\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n     *\n     * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n     *\n     * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n     *\n     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n     *\n     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n     */\n    \"oauth-authorizations/get-or-create-authorization-for-app\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n            };\n        };\n        responses: {\n            /** Response if returning an existing token */\n            200: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The OAuth app client secret for which to create the token. */\n                    client_secret: string;\n                    /** A list of scopes that this authorization is in. */\n                    scopes?: string[] | null;\n                    /** A note to remind you what the OAuth token is for. */\n                    note?: string;\n                    /** A URL to remind you what app the OAuth token is for. */\n                    note_url?: string;\n                    /** A unique string to distinguish an authorization from others created for the same client ID and user. */\n                    fingerprint?: string;\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n     *\n     * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n     *\n     * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n     *\n     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n     */\n    \"oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint\": {\n        parameters: {\n            path: {\n                /** The client ID of your GitHub app. */\n                client_id: components[\"parameters\"][\"client-id\"];\n                fingerprint: string;\n            };\n        };\n        responses: {\n            /** Response if returning an existing token */\n            200: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            /** Response if returning a new token */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The OAuth app client secret for which to create the token. */\n                    client_secret: string;\n                    /** A list of scopes that this authorization is in. */\n                    scopes?: string[] | null;\n                    /** A note to remind you what the OAuth token is for. */\n                    note?: string;\n                    /** A URL to remind you what app the OAuth token is for. */\n                    note_url?: string;\n                };\n            };\n        };\n    };\n    /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n    \"oauth-authorizations/get-authorization\": {\n        parameters: {\n            path: {\n                /** authorization_id parameter */\n                authorization_id: components[\"parameters\"][\"authorization_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */\n    \"oauth-authorizations/delete-authorization\": {\n        parameters: {\n            path: {\n                /** authorization_id parameter */\n                authorization_id: components[\"parameters\"][\"authorization_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n     *\n     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"\n     *\n     * You can only send one of these scope keys at a time.\n     */\n    \"oauth-authorizations/update-authorization\": {\n        parameters: {\n            path: {\n                /** authorization_id parameter */\n                authorization_id: components[\"parameters\"][\"authorization_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authorization\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** A list of scopes that this authorization is in. */\n                    scopes?: string[] | null;\n                    /** A list of scopes to add to this authorization. */\n                    add_scopes?: string[];\n                    /** A list of scopes to remove from this authorization. */\n                    remove_scopes?: string[];\n                    /** A note to remind you what the OAuth token is for. */\n                    note?: string;\n                    /** A URL to remind you what app the OAuth token is for. */\n                    note_url?: string;\n                    /** A unique string to distinguish an authorization from others created for the same client ID and user. */\n                    fingerprint?: string;\n                };\n            };\n        };\n    };\n    \"codes-of-conduct/get-all-codes-of-conduct\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-of-conduct\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    \"codes-of-conduct/get-conduct-code\": {\n        parameters: {\n            path: {\n                key: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-of-conduct\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.\n     *\n     * The app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://docs.github.com/apps/using-content-attachments/)\" for details about content attachments.\n     *\n     * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n     */\n    \"apps/create-content-attachment\": {\n        parameters: {\n            path: {\n                content_reference_id: number;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"content-reference-attachment\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The title of the attachment */\n                    title: string;\n                    /** The body of the attachment */\n                    body: string;\n                };\n            };\n        };\n    };\n    /** Lists all the emojis available to use on GitHub. */\n    \"emojis/get\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        [key: string]: string;\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n    };\n    /**\n     * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/get-github-actions-permissions-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-enterprise-permissions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/set-github-actions-permissions-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    enabled_organizations: components[\"schemas\"][\"enabled-organizations\"];\n                    allowed_actions?: components[\"schemas\"][\"allowed-actions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        organizations: components[\"schemas\"][\"organization-simple\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** List of organization IDs to enable for GitHub Actions. */\n                    selected_organization_ids: number[];\n                };\n            };\n        };\n    };\n    /**\n     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/enable-selected-organization-github-actions-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of an organization. */\n                org_id: components[\"parameters\"][\"org_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/disable-selected-organization-github-actions-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of an organization. */\n                org_id: components[\"parameters\"][\"org_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/get-allowed-actions-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"selected-actions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/set-allowed-actions-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"selected-actions\"];\n            };\n        };\n    };\n    /**\n     * Lists all self-hosted runner groups for an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/list-self-hosted-runner-groups-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        runner_groups: components[\"schemas\"][\"runner-groups-enterprise\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Creates a new self-hosted runner group for an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/create-self-hosted-runner-group-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-groups-enterprise\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Name of the runner group. */\n                    name: string;\n                    /** Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected` */\n                    visibility?: \"selected\" | \"all\";\n                    /** List of organization IDs that can access the runner group. */\n                    selected_organization_ids?: number[];\n                    /** List of runner IDs to add to the runner group. */\n                    runners?: number[];\n                };\n            };\n        };\n    };\n    /**\n     * Gets a specific self-hosted runner group for an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/get-self-hosted-runner-group-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-groups-enterprise\"];\n                };\n            };\n        };\n    };\n    /**\n     * Deletes a self-hosted runner group for an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/delete-self-hosted-runner-group-from-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/update-self-hosted-runner-group-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-groups-enterprise\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Name of the runner group. */\n                    name?: string;\n                    /** Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected` */\n                    visibility?: \"selected\" | \"all\";\n                };\n            };\n        };\n    };\n    /**\n     * Lists the organizations with access to a self-hosted runner group.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        organizations: components[\"schemas\"][\"organization-simple\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** List of organization IDs that can access the runner group. */\n                    selected_organization_ids: number[];\n                };\n            };\n        };\n    };\n    /**\n     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n                /** Unique identifier of an organization. */\n                org_id: components[\"parameters\"][\"org_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n                /** Unique identifier of an organization. */\n                org_id: components[\"parameters\"][\"org_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Lists the self-hosted runners that are in a specific enterprise group.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/list-self-hosted-runners-in-group-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        runners: components[\"schemas\"][\"runner\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Replaces the list of self-hosted runners that are part of an enterprise runner group.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/set-self-hosted-runners-in-group-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** List of runner IDs to add to the runner group. */\n                    runners: number[];\n                };\n            };\n        };\n    };\n    /**\n     * Adds a self-hosted runner to a runner group configured in an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise`\n     * scope to use this endpoint.\n     */\n    \"enterprise-admin/add-self-hosted-runner-to-group-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Lists all self-hosted runners configured for an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/list-self-hosted-runners-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count?: number;\n                        runners?: components[\"schemas\"][\"runner\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Lists binaries for the runner application that you can download and run.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/list-runner-applications-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-application\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Returns a token that you can pass to the `config` script. The token expires after one hour.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     *\n     * #### Example using registration token\n     *\n     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n     *\n     * ```\n     * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN\n     * ```\n     */\n    \"enterprise-admin/create-registration-token-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authentication-token\"];\n                };\n            };\n        };\n    };\n    /**\n     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     *\n     * #### Example using remove token\n     *\n     * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this\n     * endpoint.\n     *\n     * ```\n     * ./config.sh remove --token TOKEN\n     * ```\n     */\n    \"enterprise-admin/create-remove-token-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authentication-token\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets a specific self-hosted runner configured in an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/get-self-hosted-runner-for-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner\"];\n                };\n            };\n        };\n    };\n    /**\n     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n     *\n     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n     */\n    \"enterprise-admin/delete-self-hosted-runner-from-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * **Note:** The audit log REST API is currently in beta and is subject to change.\n     *\n     * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.\n     */\n    \"audit-log/get-audit-log\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n            query: {\n                /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */\n                phrase?: components[\"parameters\"][\"audit-log-phrase\"];\n                /**\n                 * The event types to include:\n                 *\n                 * - `web` - returns web (non-Git) events\n                 * - `git` - returns Git events\n                 * - `all` - returns both web and Git events\n                 *\n                 * The default is `web`.\n                 */\n                include?: components[\"parameters\"][\"audit-log-include\"];\n                /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */\n                after?: components[\"parameters\"][\"audit-log-after\"];\n                /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */\n                before?: components[\"parameters\"][\"audit-log-before\"];\n                /**\n                 * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.\n                 *\n                 * The default is `desc`.\n                 */\n                order?: components[\"parameters\"][\"audit-log-order\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n            };\n        };\n        responses: {\n            /** Response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"audit-log-event\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the summary of the free and paid GitHub Actions minutes used.\n     *\n     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n     *\n     * The authenticated user must be an enterprise admin.\n     */\n    \"billing/get-github-actions-billing-ghe\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-billing-usage\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the free and paid storage used for GitHub Packages in gigabytes.\n     *\n     * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n     *\n     * The authenticated user must be an enterprise admin.\n     */\n    \"billing/get-github-packages-billing-ghe\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"packages-billing-usage\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n     *\n     * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n     *\n     * The authenticated user must be an enterprise admin.\n     */\n    \"billing/get-shared-storage-billing-ghe\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"combined-billing-usage\"];\n                };\n            };\n        };\n    };\n    /** We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago. */\n    \"activity/list-public-events\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /**\n     * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n     *\n     * *   **Timeline**: The GitHub global public timeline\n     * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)\n     * *   **Current user public**: The public timeline for the authenticated user\n     * *   **Current user**: The private timeline for the authenticated user\n     * *   **Current user actor**: The private timeline for activity created by the authenticated user\n     * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n     * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n     *\n     * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.\n     */\n    \"activity/get-feeds\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"feed\"];\n                };\n            };\n        };\n    };\n    /** Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists: */\n    \"gists/list\": {\n        parameters: {\n            query: {\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"base-gist\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * Allows you to add a new gist with one or more files.\n     *\n     * **Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.\n     */\n    \"gists/create\": {\n        parameters: {};\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-simple\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Description of the gist */\n                    description?: string;\n                    /** Names and content for the files that make up the gist */\n                    files: {\n                        [key: string]: {\n                            /** Content of the file */\n                            content: string;\n                        };\n                    };\n                    public?: boolean | (\"true\" | \"false\");\n                };\n            };\n        };\n    };\n    /**\n     * List public gists sorted by most recently updated to least recently updated.\n     *\n     * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.\n     */\n    \"gists/list-public\": {\n        parameters: {\n            query: {\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"base-gist\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** List the authenticated user's starred gists: */\n    \"gists/list-starred\": {\n        parameters: {\n            query: {\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"base-gist\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    \"gists/get\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-simple\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden_gist\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"gists/delete\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. */\n    \"gists/update\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-simple\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": (Partial<{\n                    [key: string]: any;\n                }> & Partial<{\n                    [key: string]: any;\n                }>) | null;\n            };\n        };\n    };\n    \"gists/list-comments\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-comment\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"gists/create-comment\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-comment\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The comment text. */\n                    body: string;\n                };\n            };\n        };\n    };\n    \"gists/get-comment\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-comment\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden_gist\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"gists/delete-comment\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"gists/update-comment\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-comment\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The comment text. */\n                    body: string;\n                };\n            };\n        };\n    };\n    \"gists/list-commits\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {\n                    Link?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-commit\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"gists/list-forks\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-simple\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** **Note**: This was previously `/gists/:gist_id/fork`. */\n    \"gists/fork\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"base-gist\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"gists/check-is-starred\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n        };\n        responses: {\n            /** Response if gist is starred */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            /** Response if gist is not starred */\n            404: {\n                content: {\n                    \"application/json\": {\n                        [key: string]: any;\n                    };\n                };\n            };\n        };\n    };\n    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\" */\n    \"gists/star\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"gists/unstar\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"gists/get-revision\": {\n        parameters: {\n            path: {\n                /** gist_id parameter */\n                gist_id: components[\"parameters\"][\"gist_id\"];\n                sha: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gist-simple\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user). */\n    \"gitignore/get-all-templates\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": string[];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n    };\n    /**\n     * The API also allows fetching the source of a single template.\n     * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.\n     */\n    \"gitignore/get-template\": {\n        parameters: {\n            path: {\n                name: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gitignore-template\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n    };\n    /**\n     * List repositories that an app installation can access.\n     *\n     * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n     */\n    \"apps/list-repos-accessible-to-installation\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        repositories: components[\"schemas\"][\"repository\"][];\n                        repository_selection?: string;\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * Revokes the installation token you're using to authenticate as an installation and access this endpoint.\n     *\n     * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)\" endpoint.\n     *\n     * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n     */\n    \"apps/revoke-installation-access-token\": {\n        parameters: {};\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member\n     * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\n     * necessarily assigned to you.\n     *\n     *\n     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n     * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n     * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n     * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n     */\n    \"issues/list\": {\n        parameters: {\n            query: {\n                /**\n                 * Indicates which sorts of issues to return. Can be one of:\n                 * \\* `assigned`: Issues assigned to you\n                 * \\* `created`: Issues created by you\n                 * \\* `mentioned`: Issues mentioning you\n                 * \\* `subscribed`: Issues you're subscribed to updates for\n                 * \\* `all`: All issues the authenticated user can see, regardless of participation or creation\n                 */\n                filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"all\";\n                /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** A list of comma separated label names. Example: `bug,ui,@high` */\n                labels?: components[\"parameters\"][\"labels\"];\n                /** What to sort results by. Can be either `created`, `updated`, `comments`. */\n                sort?: \"created\" | \"updated\" | \"comments\";\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                collab?: boolean;\n                orgs?: boolean;\n                owned?: boolean;\n                pulls?: boolean;\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"licenses/get-all-commonly-used\": {\n        parameters: {\n            query: {\n                featured?: boolean;\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"license-simple\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n    };\n    \"licenses/get\": {\n        parameters: {\n            path: {\n                license: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"license\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"markdown/render\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                headers: {\n                    \"Content-Length\"?: string;\n                };\n                content: {\n                    \"text/html\": string;\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The Markdown text to render in HTML. */\n                    text: string;\n                    /** The rendering mode. */\n                    mode?: \"markdown\" | \"gfm\";\n                    /** The repository context to use when creating references in `gfm` mode. */\n                    context?: string;\n                };\n            };\n        };\n    };\n    /** You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less. */\n    \"markdown/render-raw\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"text/html\": string;\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n        requestBody: {\n            content: {\n                \"text/plain\": string;\n                \"text/x-markdown\": string;\n            };\n        };\n    };\n    /**\n     * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n     *\n     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n     */\n    \"apps/get-subscription-plan-for-account\": {\n        parameters: {\n            path: {\n                /** account_id parameter */\n                account_id: components[\"parameters\"][\"account_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"marketplace-purchase\"];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            /** Response when the account has not purchased the listing */\n            404: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"basic-error\"];\n                };\n            };\n        };\n    };\n    /**\n     * Lists all plans that are part of your GitHub Marketplace listing.\n     *\n     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n     */\n    \"apps/list-plans\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"marketplace-listing-plan\"][];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n     *\n     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n     */\n    \"apps/list-accounts-for-plan\": {\n        parameters: {\n            path: {\n                /** plan_id parameter */\n                plan_id: components[\"parameters\"][\"plan_id\"];\n            };\n            query: {\n                /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n                sort?: components[\"parameters\"][\"sort\"];\n                /** To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter. */\n                direction?: \"asc\" | \"desc\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"marketplace-purchase\"][];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n     *\n     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n     */\n    \"apps/get-subscription-plan-for-account-stubbed\": {\n        parameters: {\n            path: {\n                /** account_id parameter */\n                account_id: components[\"parameters\"][\"account_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"marketplace-purchase\"];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            /** Response when the account has not purchased the listing */\n            404: unknown;\n        };\n    };\n    /**\n     * Lists all plans that are part of your GitHub Marketplace listing.\n     *\n     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n     */\n    \"apps/list-plans-stubbed\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"marketplace-listing-plan\"][];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n        };\n    };\n    /**\n     * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n     *\n     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n     */\n    \"apps/list-accounts-for-plan-stubbed\": {\n        parameters: {\n            path: {\n                /** plan_id parameter */\n                plan_id: components[\"parameters\"][\"plan_id\"];\n            };\n            query: {\n                /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n                sort?: components[\"parameters\"][\"sort\"];\n                /** To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter. */\n                direction?: \"asc\" | \"desc\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"marketplace-purchase\"][];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n        };\n    };\n    /**\n     * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/).\"\n     *\n     * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.\n     */\n    \"meta/get\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"api-overview\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n    };\n    \"activity/list-public-events-for-repo-network\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n            301: components[\"responses\"][\"moved_permanently\"];\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** List all notifications for the current user, sorted by most recently updated. */\n    \"activity/list-notifications-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** If `true`, show notifications marked as read. */\n                all?: components[\"parameters\"][\"all\"];\n                /** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n                participating?: components[\"parameters\"][\"participating\"];\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                before?: components[\"parameters\"][\"before\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"thread\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** Marks all notifications as \"read\" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */\n    \"activity/mark-notifications-as-read\": {\n        parameters: {};\n        responses: {\n            /** response */\n            202: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                    };\n                };\n            };\n            /** response */\n            205: unknown;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Describes the last point that notifications were checked. */\n                    last_read_at?: string;\n                    /** Whether the notification has been read. */\n                    read?: boolean;\n                };\n            };\n        };\n    };\n    \"activity/get-thread\": {\n        parameters: {\n            path: {\n                /** thread_id parameter */\n                thread_id: components[\"parameters\"][\"thread_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"thread\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    \"activity/mark-thread-as-read\": {\n        parameters: {\n            path: {\n                /** thread_id parameter */\n                thread_id: components[\"parameters\"][\"thread_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            205: unknown;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).\n     *\n     * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.\n     */\n    \"activity/get-thread-subscription-for-authenticated-user\": {\n        parameters: {\n            path: {\n                /** thread_id parameter */\n                thread_id: components[\"parameters\"][\"thread_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"thread-subscription\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n     *\n     * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n     *\n     * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.\n     */\n    \"activity/set-thread-subscription\": {\n        parameters: {\n            path: {\n                /** thread_id parameter */\n                thread_id: components[\"parameters\"][\"thread_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"thread-subscription\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Whether to block all notifications from a thread. */\n                    ignored?: boolean;\n                };\n            };\n        };\n    };\n    /** Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`. */\n    \"activity/delete-thread-subscription\": {\n        parameters: {\n            path: {\n                /** thread_id parameter */\n                thread_id: components[\"parameters\"][\"thread_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Get the octocat as ASCII art */\n    \"meta/get-octocat\": {\n        parameters: {\n            query: {\n                /** The words to show in Octocat's speech bubble */\n                s?: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/octocat-stream\": string;\n                };\n            };\n        };\n    };\n    /**\n     * Lists all organizations, in the order that they were created on GitHub.\n     *\n     * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.\n     */\n    \"orgs/list\": {\n        parameters: {\n            query: {\n                /** An organization ID. Only return organizations with an ID greater than this ID. */\n                since?: components[\"parameters\"][\"since-org\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {\n                    Link?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-simple\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n    };\n    /**\n     * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n     *\n     * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See \"[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see 'Response with GitHub plan information' below.\"\n     */\n    \"orgs/get\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-full\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n     *\n     * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.\n     */\n    \"orgs/update\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-full\"];\n                };\n            };\n            409: components[\"responses\"][\"conflict\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            /** Validation Failed */\n            422: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"validation-error\"] | components[\"schemas\"][\"validation-error-simple\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Billing email address. This address is not publicized. */\n                    billing_email?: string;\n                    /** The company name. */\n                    company?: string;\n                    /** The publicly visible email address. */\n                    email?: string;\n                    /** The Twitter username of the company. */\n                    twitter_username?: string;\n                    /** The location. */\n                    location?: string;\n                    /** The shorthand name of the company. */\n                    name?: string;\n                    /** The description of the company. */\n                    description?: string;\n                    /** Toggles whether an organization can use organization projects. */\n                    has_organization_projects?: boolean;\n                    /** Toggles whether repositories that belong to the organization can use repository projects. */\n                    has_repository_projects?: boolean;\n                    /**\n                     * Default permission level members have for organization repositories:\n                     * \\* `read` - can pull, but not push to or administer this repository.\n                     * \\* `write` - can pull and push, but not administer this repository.\n                     * \\* `admin` - can pull, push, and administer this repository.\n                     * \\* `none` - no permissions granted by default.\n                     */\n                    default_repository_permission?: \"read\" | \"write\" | \"admin\" | \"none\";\n                    /**\n                     * Toggles the ability of non-admin organization members to create repositories. Can be one of:\n                     * \\* `true` - all organization members can create repositories.\n                     * \\* `false` - only organization owners can create repositories.\n                     * Default: `true`\n                     * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.\n                     */\n                    members_can_create_repositories?: boolean;\n                    /**\n                     * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:\n                     * \\* `true` - all organization members can create internal repositories.\n                     * \\* `false` - only organization owners can create internal repositories.\n                     * Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.\n                     */\n                    members_can_create_internal_repositories?: boolean;\n                    /**\n                     * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:\n                     * \\* `true` - all organization members can create private repositories.\n                     * \\* `false` - only organization owners can create private repositories.\n                     * Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.\n                     */\n                    members_can_create_private_repositories?: boolean;\n                    /**\n                     * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:\n                     * \\* `true` - all organization members can create public repositories.\n                     * \\* `false` - only organization owners can create public repositories.\n                     * Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.\n                     */\n                    members_can_create_public_repositories?: boolean;\n                    /**\n                     * Specifies which types of repositories non-admin organization members can create. Can be one of:\n                     * \\* `all` - all organization members can create public and private repositories.\n                     * \\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.\n                     * \\* `none` - only admin members can create repositories.\n                     * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.\n                     */\n                    members_allowed_repository_creation_type?: \"all\" | \"private\" | \"none\";\n                    /**\n                     * Toggles whether organization members can create GitHub Pages sites. Can be one of:\n                     * \\* `true` - all organization members can create GitHub Pages sites.\n                     * \\* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.\n                     */\n                    members_can_create_pages?: boolean;\n                    /**\n                     * Toggles whether organization members can create public GitHub Pages sites. Can be one of:\n                     * \\* `true` - all organization members can create public GitHub Pages sites.\n                     * \\* `false` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.\n                     */\n                    members_can_create_public_pages?: boolean;\n                    /**\n                     * Toggles whether organization members can create private GitHub Pages sites. Can be one of:\n                     * \\* `true` - all organization members can create private GitHub Pages sites.\n                     * \\* `false` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.\n                     */\n                    members_can_create_private_pages?: boolean;\n                    blog?: string;\n                };\n            };\n        };\n    };\n    /**\n     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n     */\n    \"actions/get-github-actions-permissions-organization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-organization-permissions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.\n     *\n     * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n     */\n    \"actions/set-github-actions-permissions-organization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    enabled_repositories: components[\"schemas\"][\"enabled-repositories\"];\n                    allowed_actions?: components[\"schemas\"][\"allowed-actions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n     */\n    \"actions/list-selected-repositories-enabled-github-actions-organization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        repositories: components[\"schemas\"][\"repository\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n     */\n    \"actions/set-selected-repositories-enabled-github-actions-organization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** List of repository IDs to enable for GitHub Actions. */\n                    selected_repository_ids: number[];\n                };\n            };\n        };\n    };\n    /**\n     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n     */\n    \"actions/enable-selected-repository-github-actions-organization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                repository_id: components[\"parameters\"][\"repository_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n     */\n    \"actions/disable-selected-repository-github-actions-organization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                repository_id: components[\"parameters\"][\"repository_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n     */\n    \"actions/get-allowed-actions-organization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"selected-actions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n     *\n     * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.\n     *\n     * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n     */\n    \"actions/set-allowed-actions-organization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"selected-actions\"];\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/list-self-hosted-runner-groups-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        runner_groups: components[\"schemas\"][\"runner-groups-org\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Creates a new self-hosted runner group for an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/create-self-hosted-runner-group-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-groups-org\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Name of the runner group. */\n                    name: string;\n                    /** Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`. */\n                    visibility?: \"selected\" | \"all\" | \"private\";\n                    /** List of repository IDs that can access the runner group. */\n                    selected_repository_ids?: number[];\n                    /** List of runner IDs to add to the runner group. */\n                    runners?: number[];\n                };\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Gets a specific self-hosted runner group for an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/get-self-hosted-runner-group-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-groups-org\"];\n                };\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Deletes a self-hosted runner group for an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/delete-self-hosted-runner-group-from-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Updates the `name` and `visibility` of a self-hosted runner group in an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/update-self-hosted-runner-group-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-groups-org\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Name of the runner group. */\n                    name?: string;\n                    /** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`. */\n                    visibility?: \"selected\" | \"all\" | \"private\";\n                };\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Lists the repositories with access to a self-hosted runner group configured in an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/list-repo-access-to-self-hosted-runner-group-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        repositories: components[\"schemas\"][\"repository\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/set-repo-access-to-self-hosted-runner-group-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** List of repository IDs that can access the runner group. */\n                    selected_repository_ids: number[];\n                };\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     *\n     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"\n     *\n     * You must authenticate using an access token with the `admin:org`\n     * scope to use this endpoint.\n     */\n    \"actions/add-repo-access-to-self-hosted-runner-group-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n                repository_id: components[\"parameters\"][\"repository_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     *\n     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/remove-repo-access-to-self-hosted-runner-group-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n                repository_id: components[\"parameters\"][\"repository_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Lists self-hosted runners that are in a specific organization group.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/list-self-hosted-runners-in-group-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        runners: components[\"schemas\"][\"runner\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     * Replaces the list of self-hosted runners that are part of an organization runner group.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/set-self-hosted-runners-in-group-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** List of runner IDs to add to the runner group. */\n                    runners: number[];\n                };\n            };\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     *\n     * Adds a self-hosted runner to a runner group configured in an organization.\n     *\n     * You must authenticate using an access token with the `admin:org`\n     * scope to use this endpoint.\n     */\n    \"actions/add-self-hosted-runner-to-group-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"\n     *\n     *\n     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/remove-self-hosted-runner-from-group-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner group. */\n                runner_group_id: components[\"parameters\"][\"runner_group_id\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Lists all self-hosted runners configured in an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/list-self-hosted-runners-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        runners: components[\"schemas\"][\"runner\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Lists binaries for the runner application that you can download and run.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/list-runner-applications-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-application\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Returns a token that you can pass to the `config` script. The token expires after one hour.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     *\n     * #### Example using registration token\n     *\n     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n     *\n     * ```\n     * ./config.sh --url https://github.com/octo-org --token TOKEN\n     * ```\n     */\n    \"actions/create-registration-token-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authentication-token\"];\n                };\n            };\n        };\n    };\n    /**\n     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     *\n     * #### Example using remove token\n     *\n     * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this\n     * endpoint.\n     *\n     * ```\n     * ./config.sh remove --token TOKEN\n     * ```\n     */\n    \"actions/create-remove-token-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authentication-token\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets a specific self-hosted runner configured in an organization.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/get-self-hosted-runner-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner\"];\n                };\n            };\n        };\n    };\n    /**\n     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n     *\n     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n     */\n    \"actions/delete-self-hosted-runner-from-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n    \"actions/list-org-secrets\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        secrets: components[\"schemas\"][\"organization-actions-secret\"][];\n                    };\n                };\n            };\n        };\n    };\n    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n    \"actions/get-org-public-key\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-public-key\"];\n                };\n            };\n        };\n    };\n    /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n    \"actions/get-org-secret\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-actions-secret\"];\n                };\n            };\n        };\n    };\n    /**\n     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\n     * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to\n     * use this endpoint.\n     *\n     * #### Example encrypting a secret using Node.js\n     *\n     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n     *\n     * ```\n     * const sodium = require('tweetsodium');\n     *\n     * const key = \"base64-encoded-public-key\";\n     * const value = \"plain-text-secret\";\n     *\n     * // Convert the message and key to Uint8Array's (Buffer implements that interface)\n     * const messageBytes = Buffer.from(value);\n     * const keyBytes = Buffer.from(key, 'base64');\n     *\n     * // Encrypt using LibSodium.\n     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);\n     *\n     * // Base64 the encrypted secret\n     * const encrypted = Buffer.from(encryptedBytes).toString('base64');\n     *\n     * console.log(encrypted);\n     * ```\n     *\n     *\n     * #### Example encrypting a secret using Python\n     *\n     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n     *\n     * ```\n     * from base64 import b64encode\n     * from nacl import encoding, public\n     *\n     * def encrypt(public_key: str, secret_value: str) -> str:\n     *   \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n     *   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n     *   sealed_box = public.SealedBox(public_key)\n     *   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n     *   return b64encode(encrypted).decode(\"utf-8\")\n     * ```\n     *\n     * #### Example encrypting a secret using C#\n     *\n     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n     *\n     * ```\n     * var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\n     * var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n     *\n     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n     *\n     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n     * ```\n     *\n     * #### Example encrypting a secret using Ruby\n     *\n     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n     *\n     * ```ruby\n     * require \"rbnacl\"\n     * require \"base64\"\n     *\n     * key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\n     * public_key = RbNaCl::PublicKey.new(key)\n     *\n     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)\n     * encrypted_secret = box.encrypt(\"my_secret\")\n     *\n     * # Print the base64 encoded secret\n     * puts Base64.strict_encode64(encrypted_secret)\n     * ```\n     */\n    \"actions/create-or-update-org-secret\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n            };\n        };\n        responses: {\n            /** Response when creating a secret */\n            201: unknown;\n            /** Response when updating a secret */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint. */\n                    encrypted_value?: string;\n                    /** ID of the key you used to encrypt the secret. */\n                    key_id?: string;\n                    /**\n                     * Configures the access that repositories have to the organization secret. Can be one of:\n                     * \\- `all` - All repositories in an organization can access the secret.\n                     * \\- `private` - Private repositories in an organization can access the secret.\n                     * \\- `selected` - Only specific repositories can access the secret.\n                     */\n                    visibility?: \"all\" | \"private\" | \"selected\";\n                    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */\n                    selected_repository_ids?: string[];\n                };\n            };\n        };\n    };\n    /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n    \"actions/delete-org-secret\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n    \"actions/list-selected-repos-for-org-secret\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        repositories: components[\"schemas\"][\"minimal-repository\"][];\n                    };\n                };\n            };\n        };\n    };\n    /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n    \"actions/set-selected-repos-for-org-secret\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */\n                    selected_repository_ids?: number[];\n                };\n            };\n        };\n    };\n    /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n    \"actions/add-selected-repo-to-org-secret\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n                repository_id: number;\n            };\n        };\n        responses: {\n            /** Response when repository was added to the selected list */\n            204: never;\n            /** Response when visibility type is not set to selected */\n            409: unknown;\n        };\n    };\n    /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */\n    \"actions/remove-selected-repo-from-org-secret\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n                repository_id: number;\n            };\n        };\n        responses: {\n            /** Response when repository was removed from the selected list */\n            204: never;\n            /** Response when visibility type not set to selected */\n            409: unknown;\n        };\n    };\n    /**\n     * **Note:** The audit log REST API is currently in beta and is subject to change.\n     *\n     * Gets the audit log for an organization. For more information, see \"[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\"\n     *\n     * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.\n     */\n    \"orgs/get-audit-log\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */\n                phrase?: components[\"parameters\"][\"audit-log-phrase\"];\n                /**\n                 * The event types to include:\n                 *\n                 * - `web` - returns web (non-Git) events\n                 * - `git` - returns Git events\n                 * - `all` - returns both web and Git events\n                 *\n                 * The default is `web`.\n                 */\n                include?: components[\"parameters\"][\"audit-log-include\"];\n                /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */\n                after?: components[\"parameters\"][\"audit-log-after\"];\n                /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */\n                before?: components[\"parameters\"][\"audit-log-before\"];\n                /**\n                 * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.\n                 *\n                 * The default is `desc`.\n                 */\n                order?: components[\"parameters\"][\"audit-log-order\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n            };\n        };\n        responses: {\n            /** Response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"audit-log-event\"][];\n                };\n            };\n        };\n    };\n    /** List the users blocked by an organization. */\n    \"orgs/list-blocked-users\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    \"orgs/check-blocked-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** If the user is blocked: */\n            204: never;\n            /** If the user is not blocked: */\n            404: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"basic-error\"];\n                };\n            };\n        };\n    };\n    \"orgs/block-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"orgs/unblock-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).\n     *\n     * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).\n     */\n    \"orgs/list-saml-sso-authorizations\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"credential-authorization\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).\n     *\n     * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.\n     */\n    \"orgs/remove-saml-sso-authorization\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                credential_id: number;\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"activity/list-public-org-events\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n        };\n    };\n    /** The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure. */\n    \"orgs/list-failed-invitations\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-invitation\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"orgs/list-webhooks\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-hook\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Here's how you can create a hook that posts payloads in JSON format: */\n    \"orgs/create-webhook\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-hook\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Must be passed as \"web\". */\n                    name: string;\n                    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params). */\n                    config: {\n                        url: components[\"schemas\"][\"webhook-config-url\"];\n                        content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n                        secret?: components[\"schemas\"][\"webhook-config-secret\"];\n                        insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n                        username?: string;\n                        password?: string;\n                    };\n                    /** Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. */\n                    events?: string[];\n                    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */\n                    active?: boolean;\n                };\n            };\n        };\n    };\n    /** Returns a webhook configured in an organization. To get only the webhook `config` properties, see \"[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\" */\n    \"orgs/get-webhook\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-hook\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"orgs/delete-webhook\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\" */\n    \"orgs/update-webhook\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-hook\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params). */\n                    config?: {\n                        url: components[\"schemas\"][\"webhook-config-url\"];\n                        content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n                        secret?: components[\"schemas\"][\"webhook-config-secret\"];\n                        insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n                    };\n                    /** Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. */\n                    events?: string[];\n                    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */\n                    active?: boolean;\n                    name?: string;\n                };\n            };\n        };\n    };\n    /**\n     * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\"\n     *\n     * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.\n     */\n    \"orgs/get-webhook-config-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Default response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"webhook-config\"];\n                };\n            };\n        };\n    };\n    /**\n     * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\"\n     *\n     * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.\n     */\n    \"orgs/update-webhook-config-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Default response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"webhook-config\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    url?: components[\"schemas\"][\"webhook-config-url\"];\n                    content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n                    secret?: components[\"schemas\"][\"webhook-config-secret\"];\n                    insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n                };\n            };\n        };\n    };\n    /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */\n    \"orgs/ping-webhook\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Enables an authenticated GitHub App to find the organization's installation information.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/get-org-installation\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"installation\"];\n                };\n            };\n        };\n    };\n    /** Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint. */\n    \"orgs/list-app-installations\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        installations: components[\"schemas\"][\"installation\"][];\n                    };\n                };\n            };\n        };\n    };\n    /** Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response. */\n    \"interactions/get-restrictions-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"interaction-limit-response\"];\n                };\n            };\n        };\n    };\n    /** Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization. */\n    \"interactions/set-restrictions-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"interaction-limit-response\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"interaction-limit\"];\n            };\n        };\n    };\n    /** Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions. */\n    \"interactions/remove-restrictions-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`. */\n    \"orgs/list-pending-invitations\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-invitation\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     */\n    \"orgs/create-invitation\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-invitation\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** **Required unless you provide `email`**. GitHub user ID for the person you are inviting. */\n                    invitee_id?: number;\n                    /** **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user. */\n                    email?: string;\n                    /**\n                     * Specify role for new member. Can be one of:\n                     * \\* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.\n                     * \\* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.\n                     * \\* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.\n                     */\n                    role?: \"admin\" | \"direct_member\" | \"billing_manager\";\n                    /** Specify IDs for the teams you want to invite new members to. */\n                    team_ids?: number[];\n                };\n            };\n        };\n    };\n    /**\n     * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).\n     */\n    \"orgs/cancel-invitation\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** invitation_id parameter */\n                invitation_id: components[\"parameters\"][\"invitation_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner. */\n    \"orgs/list-invitation-teams\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** invitation_id parameter */\n                invitation_id: components[\"parameters\"][\"invitation_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * List issues in an organization assigned to the authenticated user.\n     *\n     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n     * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n     * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n     * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n     */\n    \"issues/list-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /**\n                 * Indicates which sorts of issues to return. Can be one of:\n                 * \\* `assigned`: Issues assigned to you\n                 * \\* `created`: Issues created by you\n                 * \\* `mentioned`: Issues mentioning you\n                 * \\* `subscribed`: Issues you're subscribed to updates for\n                 * \\* `all`: All issues the authenticated user can see, regardless of participation or creation\n                 */\n                filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"all\";\n                /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** A list of comma separated label names. Example: `bug,ui,@high` */\n                labels?: components[\"parameters\"][\"labels\"];\n                /** What to sort results by. Can be either `created`, `updated`, `comments`. */\n                sort?: \"created\" | \"updated\" | \"comments\";\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. */\n    \"orgs/list-members\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /**\n                 * Filter members returned in the list. Can be one of:\n                 * \\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.\n                 * \\* `all` - All members the authenticated user can see.\n                 */\n                filter?: \"2fa_disabled\" | \"all\";\n                /**\n                 * Filter members returned by their role. Can be one of:\n                 * \\* `all` - All members of the organization, regardless of role.\n                 * \\* `admin` - Organization owners.\n                 * \\* `member` - Non-owner organization members.\n                 */\n                role?: \"all\" | \"admin\" | \"member\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            /** Response if requester is not an organization member */\n            302: never;\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** Check if a user is, publicly or privately, a member of the organization. */\n    \"orgs/check-membership-for-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Response if requester is an organization member and user is a member */\n            204: never;\n            /** Response if requester is not an organization member */\n            302: never;\n            /** Response if requester is an organization member and user is not a member */\n            404: unknown;\n        };\n    };\n    /** Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. */\n    \"orgs/remove-member\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** In order to get a user's membership with an organization, the authenticated user must be an organization member. */\n    \"orgs/get-membership-for-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-membership\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Only authenticated organization owners can add a member to the organization or update the member's role.\n     *\n     * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n     *\n     * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n     *\n     * **Rate limits**\n     *\n     * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.\n     */\n    \"orgs/set-membership-for-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-membership\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The role to give the user in the organization. Can be one of:\n                     * \\* `admin` - The user will become an owner of the organization.\n                     * \\* `member` - The user will become a non-owner member of the organization.\n                     */\n                    role?: \"admin\" | \"member\";\n                };\n            };\n        };\n    };\n    /**\n     * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n     *\n     * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.\n     */\n    \"orgs/remove-membership-for-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Lists the most recent migrations. */\n    \"migrations/list-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"migration\"][];\n                };\n            };\n        };\n    };\n    /** Initiates the generation of a migration archive. */\n    \"migrations/start-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"migration\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** A list of arrays indicating which repositories should be migrated. */\n                    repositories: string[];\n                    /** Indicates whether repositories should be locked (to prevent manipulation) while migrating data. */\n                    lock_repositories?: boolean;\n                    /** Indicates whether attachments should be excluded from the migration (to reduce migration archive file size). */\n                    exclude_attachments?: boolean;\n                    exclude?: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Fetches the status of a migration.\n     *\n     * The `state` of a migration can be one of the following values:\n     *\n     * *   `pending`, which means the migration hasn't started yet.\n     * *   `exporting`, which means the migration is in progress.\n     * *   `exported`, which means the migration finished successfully.\n     * *   `failed`, which means the migration failed.\n     */\n    \"migrations/get-status-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n            };\n        };\n        responses: {\n            /**\n             * *   `pending`, which means the migration hasn't started yet.\n             * *   `exporting`, which means the migration is in progress.\n             * *   `exported`, which means the migration finished successfully.\n             * *   `failed`, which means the migration failed.\n             */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"migration\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Fetches the URL to a migration archive. */\n    \"migrations/download-archive-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            302: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Deletes a previous migration archive. Migration archives are automatically deleted after seven days. */\n    \"migrations/delete-archive-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data. */\n    \"migrations/unlock-repo-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n                /** repo_name parameter */\n                repo_name: components[\"parameters\"][\"repo_name\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** List all the repositories for this organization migration. */\n    \"migrations/list-repos-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** List all users who are outside collaborators of an organization. */\n    \"orgs/list-outside-collaborators\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /**\n                 * Filter the list of outside collaborators. Can be one of:\n                 * \\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.\n                 * \\* `all`: All outside collaborators.\n                 */\n                filter?: \"2fa_disabled\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n        };\n    };\n    /** When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\". */\n    \"orgs/convert-member-to-outside-collaborator\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** User is getting converted asynchronously */\n            202: unknown;\n            /** User was converted */\n            204: never;\n            /** response */\n            403: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Removing a user from this list will remove them from all the organization's repositories. */\n    \"orgs/remove-outside-collaborator\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            /** Response if user is a member of the organization */\n            422: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n        };\n    };\n    /** Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n    \"projects/list-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n    };\n    /** Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n    \"projects/create-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project\"];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the project. */\n                    name: string;\n                    /** The description of the project. */\n                    body?: string;\n                };\n            };\n        };\n    };\n    /** Members of an organization can choose to have their membership publicized or not. */\n    \"orgs/list-public-members\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n        };\n    };\n    \"orgs/check-public-membership-for-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Response if user is a public member */\n            204: never;\n            /** Response if user is not a public member */\n            404: unknown;\n        };\n    };\n    /**\n     * The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n     *\n     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n     */\n    \"orgs/set-public-membership-for-authenticated-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    \"orgs/remove-public-membership-for-authenticated-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Lists repositories for the specified organization. */\n    \"repos/list-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. */\n                type?: \"all\" | \"public\" | \"private\" | \"forks\" | \"sources\" | \"member\" | \"internal\";\n                /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n                sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n                /** Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc` */\n                direction?: \"asc\" | \"desc\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n     *\n     * **OAuth scope requirements**\n     *\n     * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n     *\n     * *   `public_repo` scope or `repo` scope to create a public repository\n     * *   `repo` scope to create a private repository\n     */\n    \"repos/create-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the repository. */\n                    name: string;\n                    /** A short description of the repository. */\n                    description?: string;\n                    /** A URL with more information about the repository. */\n                    homepage?: string;\n                    /** Either `true` to create a private repository or `false` to create a public one. */\n                    private?: boolean;\n                    /**\n                     * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \"[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.\n                     * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.\n                     */\n                    visibility?: \"public\" | \"private\" | \"visibility\" | \"internal\";\n                    /** Either `true` to enable issues for this repository or `false` to disable them. */\n                    has_issues?: boolean;\n                    /** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */\n                    has_projects?: boolean;\n                    /** Either `true` to enable the wiki for this repository or `false` to disable it. */\n                    has_wiki?: boolean;\n                    /** Either `true` to make this repo available as a template repository or `false` to prevent it. */\n                    is_template?: boolean;\n                    /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */\n                    team_id?: number;\n                    /** Pass `true` to create an initial commit with empty README. */\n                    auto_init?: boolean;\n                    /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\". */\n                    gitignore_template?: string;\n                    /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\". */\n                    license_template?: string;\n                    /** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */\n                    allow_squash_merge?: boolean;\n                    /** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */\n                    allow_merge_commit?: boolean;\n                    /** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */\n                    allow_rebase_merge?: boolean;\n                    /** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */\n                    delete_branch_on_merge?: boolean;\n                };\n            };\n        };\n    };\n    /**\n     * Gets the summary of the free and paid GitHub Actions minutes used.\n     *\n     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n     *\n     * Access tokens must have the `repo` or `admin:org` scope.\n     */\n    \"billing/get-github-actions-billing-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-billing-usage\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the free and paid storage usued for GitHub Packages in gigabytes.\n     *\n     * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n     *\n     * Access tokens must have the `repo` or `admin:org` scope.\n     */\n    \"billing/get-github-packages-billing-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"packages-billing-usage\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n     *\n     * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n     *\n     * Access tokens must have the `repo` or `admin:org` scope.\n     */\n    \"billing/get-shared-storage-billing-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"combined-billing-usage\"];\n                };\n            };\n        };\n    };\n    /**\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"\n     *\n     * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:\n     */\n    \"teams/list-idp-groups-for-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {\n                    Link?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"group-mapping\"];\n                };\n            };\n        };\n    };\n    /** Lists all teams in an organization that are visible to the authenticated user. */\n    \"teams/list\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"\n     *\n     * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".\n     */\n    \"teams/create\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-full\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the team. */\n                    name: string;\n                    /** The description of the team. */\n                    description?: string;\n                    /** List GitHub IDs for organization members who will become team maintainers. */\n                    maintainers?: string[];\n                    /** The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to. */\n                    repo_names?: string[];\n                    /**\n                     * The level of privacy this team should have. The options are:\n                     * **For a non-nested team:**\n                     * \\* `secret` - only visible to organization owners and members of this team.\n                     * \\* `closed` - visible to all members of this organization.\n                     * Default: `secret`\n                     * **For a parent or child team:**\n                     * \\* `closed` - visible to all members of this organization.\n                     * Default for child team: `closed`\n                     */\n                    privacy?: \"secret\" | \"closed\";\n                    /**\n                     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:\n                     * \\* `pull` - team members can pull, but not push to or administer newly-added repositories.\n                     * \\* `push` - team members can pull and push, but not administer newly-added repositories.\n                     * \\* `admin` - team members can pull, push and administer newly-added repositories.\n                     */\n                    permission?: \"pull\" | \"push\" | \"admin\";\n                    /** The ID of a team to set as the parent team. */\n                    parent_team_id?: number;\n                };\n            };\n        };\n    };\n    /**\n     * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.\n     */\n    \"teams/get-by-name\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-full\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * To delete a team, the authenticated user must be an organization owner or team maintainer.\n     *\n     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.\n     */\n    \"teams/delete-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.\n     */\n    \"teams/update-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-full\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the team. */\n                    name?: string;\n                    /** The description of the team. */\n                    description?: string;\n                    /**\n                     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:\n                     * **For a non-nested team:**\n                     * \\* `secret` - only visible to organization owners and members of this team.\n                     * \\* `closed` - visible to all members of this organization.\n                     * **For a parent or child team:**\n                     * \\* `closed` - visible to all members of this organization.\n                     */\n                    privacy?: \"secret\" | \"closed\";\n                    /**\n                     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:\n                     * \\* `pull` - team members can pull, but not push to or administer newly-added repositories.\n                     * \\* `push` - team members can pull and push, but not administer newly-added repositories.\n                     * \\* `admin` - team members can pull, push and administer newly-added repositories.\n                     */\n                    permission?: \"pull\" | \"push\" | \"admin\";\n                    /** The ID of a team to set as the parent team. */\n                    parent_team_id?: number | null;\n                };\n            };\n        };\n    };\n    /**\n     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.\n     */\n    \"teams/list-discussions-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n            query: {\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.\n     */\n    \"teams/create-discussion-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The discussion post's title. */\n                    title: string;\n                    /** The discussion post's body text. */\n                    body: string;\n                    /** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */\n                    private?: boolean;\n                };\n            };\n        };\n    };\n    /**\n     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n     */\n    \"teams/get-discussion-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion\"];\n                };\n            };\n        };\n    };\n    /**\n     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n     */\n    \"teams/delete-discussion-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n     */\n    \"teams/update-discussion-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The discussion post's title. */\n                    title?: string;\n                    /** The discussion post's body text. */\n                    body?: string;\n                };\n            };\n        };\n    };\n    /**\n     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n     */\n    \"teams/list-discussion-comments-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n            query: {\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion-comment\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n     */\n    \"teams/create-discussion-comment-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion-comment\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The discussion comment's body text. */\n                    body: string;\n                };\n            };\n        };\n    };\n    /**\n     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n     */\n    \"teams/get-discussion-comment-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion-comment\"];\n                };\n            };\n        };\n    };\n    /**\n     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n     */\n    \"teams/delete-discussion-comment-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n     */\n    \"teams/update-discussion-comment-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion-comment\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The discussion comment's body text. */\n                    body: string;\n                };\n            };\n        };\n    };\n    /**\n     * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n     */\n    \"reactions/list-for-team-discussion-comment-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n            query: {\n                /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n                content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n     */\n    \"reactions/create-for-team-discussion-comment-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */\n                    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n     *\n     * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"reactions/delete-for-team-discussion-comment\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n                reaction_id: components[\"parameters\"][\"reaction-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n     */\n    \"reactions/list-for-team-discussion-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n            query: {\n                /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n                content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n     */\n    \"reactions/create-for-team-discussion-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */\n                    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n     *\n     * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"reactions/delete-for-team-discussion\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                reaction_id: components[\"parameters\"][\"reaction-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.\n     */\n    \"teams/list-pending-invitations-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-invitation\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Team members will include the members of child teams.\n     *\n     * To list members in a team, the team must be visible to the authenticated user.\n     */\n    \"teams/list-members-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n            query: {\n                /**\n                 * Filters members returned by their role in the team. Can be one of:\n                 * \\* `member` - normal members of the team.\n                 * \\* `maintainer` - team maintainers.\n                 * \\* `all` - all members of the team.\n                 */\n                role?: \"member\" | \"maintainer\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Team members will include the members of child teams.\n     *\n     * To get a user's membership with a team, the team must be visible to the authenticated user.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n     *\n     * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).\n     */\n    \"teams/get-membership-for-user-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-membership\"];\n                };\n            };\n            /** Response if user has no team membership */\n            404: unknown;\n        };\n    };\n    /**\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n     *\n     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n     *\n     * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.\n     *\n     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n     */\n    \"teams/add-or-update-membership-for-user-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-membership\"];\n                };\n            };\n            /** Response if team synchronization is set up */\n            403: unknown;\n            /** Response if you attempt to add an organization to a team */\n            422: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        errors?: {\n                            code?: string;\n                            field?: string;\n                            resource?: string;\n                        }[];\n                    };\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The role that this user should have in the team. Can be one of:\n                     * \\* `member` - a normal member of the team.\n                     * \\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.\n                     */\n                    role?: \"member\" | \"maintainer\";\n                };\n            };\n        };\n    };\n    /**\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n     *\n     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n     */\n    \"teams/remove-membership-for-user-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            /** Response if team synchronization is set up */\n            403: unknown;\n        };\n    };\n    /**\n     * Lists the organization projects for a team.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.\n     */\n    \"teams/list-projects-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-project\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n     */\n    \"teams/check-permissions-for-project-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-project\"];\n                };\n            };\n            /** Response if project is not managed by this team */\n            404: unknown;\n        };\n    };\n    /**\n     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n     */\n    \"teams/add-or-update-project-permissions-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            /** Response if the project is not owned by the organization */\n            403: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The permission to grant to the team for this project. Can be one of:\n                     * \\* `read` - team members can read, but not write to or administer this project.\n                     * \\* `write` - team members can read and write, but not administer this project.\n                     * \\* `admin` - team members can read, write and administer this project.\n                     * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n                     */\n                    permission?: \"read\" | \"write\" | \"admin\";\n                } | null;\n            };\n        };\n    };\n    /**\n     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n     */\n    \"teams/remove-project-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Lists a team's repositories visible to the authenticated user.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.\n     */\n    \"teams/list-repos-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n     *\n     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n     *\n     * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n     */\n    \"teams/check-permissions-for-repo-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Alternative response with repository permissions */\n            200: {\n                content: {\n                    \"application/vnd.github.v3.repository+json\": components[\"schemas\"][\"team-repository\"];\n                };\n            };\n            /** Response if team has permission for the repository */\n            204: never;\n            /** Response if team does not have permission for the repository */\n            404: unknown;\n        };\n    };\n    /**\n     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n     *\n     * For more information about the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".\n     */\n    \"teams/add-or-update-repo-permissions-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The permission to grant the team on this repository. Can be one of:\n                     * \\* `pull` - team members can pull, but not push to or administer this repository.\n                     * \\* `push` - team members can pull and push, but not administer this repository.\n                     * \\* `admin` - team members can pull, push and administer this repository.\n                     * \\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.\n                     * \\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.\n                     *\n                     * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.\n                     */\n                    permission?: \"pull\" | \"push\" | \"admin\" | \"maintain\" | \"triage\";\n                };\n            };\n        };\n    };\n    /**\n     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n     */\n    \"teams/remove-repo-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * List IdP groups connected to a team on GitHub.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.\n     */\n    \"teams/list-idp-groups-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"group-mapping\"];\n                };\n            };\n        };\n    };\n    /**\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.\n     */\n    \"teams/create-or-update-idp-group-connections-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"group-mapping\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove. */\n                    groups: {\n                        /** ID of the IdP group. */\n                        group_id: string;\n                        /** Name of the IdP group. */\n                        group_name: string;\n                        /** Description of the IdP group. */\n                        group_description: string;\n                    }[];\n                };\n            };\n        };\n    };\n    /**\n     * Lists the child teams of the team specified by `{team_slug}`.\n     *\n     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.\n     */\n    \"teams/list-child-in-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** team_slug parameter */\n                team_slug: components[\"parameters\"][\"team_slug\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** Response if child teams exist */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n        };\n    };\n    \"projects/get-card\": {\n        parameters: {\n            path: {\n                /** card_id parameter */\n                card_id: components[\"parameters\"][\"card_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project-card\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"projects/delete-card\": {\n        parameters: {\n            path: {\n                /** card_id parameter */\n                card_id: components[\"parameters\"][\"card_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            /** Forbidden */\n            403: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                        errors?: string[];\n                    };\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"projects/update-card\": {\n        parameters: {\n            path: {\n                /** card_id parameter */\n                card_id: components[\"parameters\"][\"card_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project-card\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The project card's note */\n                    note?: string | null;\n                    /** Whether or not the card is archived */\n                    archived?: boolean;\n                };\n            };\n        };\n    };\n    \"projects/move-card\": {\n        parameters: {\n            path: {\n                /** card_id parameter */\n                card_id: components[\"parameters\"][\"card_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": {\n                        [key: string]: any;\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            /** Forbidden */\n            403: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                        errors?: {\n                            code?: string;\n                            message?: string;\n                            resource?: string;\n                            field?: string;\n                        }[];\n                    };\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n            /** Service Unavailable */\n            503: {\n                content: {\n                    \"application/json\": {\n                        code?: string;\n                        message?: string;\n                        documentation_url?: string;\n                        errors?: {\n                            code?: string;\n                            message?: string;\n                        }[];\n                    };\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The position of the card in a column */\n                    position: string;\n                    /** The unique identifier of the column the card should be moved to */\n                    column_id?: number;\n                };\n            };\n        };\n    };\n    \"projects/get-column\": {\n        parameters: {\n            path: {\n                /** column_id parameter */\n                column_id: components[\"parameters\"][\"column_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project-column\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"projects/delete-column\": {\n        parameters: {\n            path: {\n                /** column_id parameter */\n                column_id: components[\"parameters\"][\"column_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    \"projects/update-column\": {\n        parameters: {\n            path: {\n                /** column_id parameter */\n                column_id: components[\"parameters\"][\"column_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project-column\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Name of the project column */\n                    name: string;\n                };\n            };\n        };\n    };\n    \"projects/list-cards\": {\n        parameters: {\n            path: {\n                /** column_id parameter */\n                column_id: components[\"parameters\"][\"column_id\"];\n            };\n            query: {\n                /** Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`. */\n                archived_state?: \"all\" | \"archived\" | \"not_archived\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project-card\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /**\n     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n     *\n     * Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n     */\n    \"projects/create-card\": {\n        parameters: {\n            path: {\n                /** column_id parameter */\n                column_id: components[\"parameters\"][\"column_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project-card\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            /** Validation Failed */\n            422: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"validation-error\"] | components[\"schemas\"][\"validation-error-simple\"];\n                };\n            };\n            /** Service Unavailable */\n            503: {\n                content: {\n                    \"application/json\": {\n                        code?: string;\n                        message?: string;\n                        documentation_url?: string;\n                        errors?: {\n                            code?: string;\n                            message?: string;\n                        }[];\n                    };\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The project card's note */\n                    note: string | null;\n                } | {\n                    /** The unique identifier of the content associated with the card */\n                    content_id: number;\n                    /** The piece of content associated with the card */\n                    content_type: string;\n                };\n            };\n        };\n    };\n    \"projects/move-column\": {\n        parameters: {\n            path: {\n                /** column_id parameter */\n                column_id: components[\"parameters\"][\"column_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": {\n                        [key: string]: any;\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The position of the column in a project */\n                    position: string;\n                };\n            };\n        };\n    };\n    /** Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n    \"projects/get\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Deletes a project board. Returns a `404 Not Found` status if projects are disabled. */\n    \"projects/delete\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** Delete Success */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            /** Forbidden */\n            403: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                        errors?: string[];\n                    };\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n        };\n    };\n    /** Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n    \"projects/update\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            /** Forbidden */\n            403: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                        errors?: string[];\n                    };\n                };\n            };\n            /** Response if the authenticated user does not have access to the project */\n            404: unknown;\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Name of the project */\n                    name?: string;\n                    /** Body of the project */\n                    body?: string | null;\n                    /** State of the project; either 'open' or 'closed' */\n                    state?: string;\n                    /** The baseline permission that all organization members have on this project */\n                    organization_permission?: \"read\" | \"write\" | \"admin\" | \"none\";\n                    /** Whether or not this project can be seen by everyone. */\n                    private?: boolean;\n                };\n            };\n        };\n    };\n    /** Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators. */\n    \"projects/list-collaborators\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n            query: {\n                /**\n                 * Filters the collaborators by their affiliation. Can be one of:\n                 * \\* `outside`: Outside collaborators of a project that are not a member of the project's organization.\n                 * \\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.\n                 * \\* `all`: All collaborators the authenticated user can see.\n                 */\n                affiliation?: \"outside\" | \"direct\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator. */\n    \"projects/add-collaborator\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The permission to grant the collaborator. */\n                    permission?: \"read\" | \"write\" | \"admin\";\n                };\n            };\n        };\n    };\n    /** Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator. */\n    \"projects/remove-collaborator\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level. */\n    \"projects/get-permission-for-user\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository-collaborator-permission\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"projects/list-columns\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project-column\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    \"projects/create-column\": {\n        parameters: {\n            path: {\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project-column\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Name of the project column */\n                    name: string;\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** Accessing this endpoint does not count against your REST API rate limit.\n     *\n     * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.\n     */\n    \"rate-limit/get\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"rate-limit-overview\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).\n     *\n     * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).\n     */\n    \"reactions/delete-legacy\": {\n        parameters: {\n            path: {\n                reaction_id: components[\"parameters\"][\"reaction-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            410: components[\"responses\"][\"gone\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.\n     *\n     * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n     */\n    \"repos/get\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"full-repository\"];\n                };\n            };\n            301: components[\"responses\"][\"moved_permanently\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n     *\n     * If an organization owner has configured the organization to prevent members from deleting organization-owned\n     * repositories, you will get a `403 Forbidden` response.\n     */\n    \"repos/delete\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            /** If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response: */\n            403: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint. */\n    \"repos/update\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"full-repository\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the repository. */\n                    name?: string;\n                    /** A short description of the repository. */\n                    description?: string;\n                    /** A URL with more information about the repository. */\n                    homepage?: string;\n                    /**\n                     * Either `true` to make the repository private or `false` to make it public. Default: `false`.\n                     * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.\n                     */\n                    private?: boolean;\n                    /** Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header. */\n                    visibility?: \"public\" | \"private\" | \"visibility\" | \"internal\";\n                    /** Either `true` to enable issues for this repository or `false` to disable them. */\n                    has_issues?: boolean;\n                    /** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */\n                    has_projects?: boolean;\n                    /** Either `true` to enable the wiki for this repository or `false` to disable it. */\n                    has_wiki?: boolean;\n                    /** Either `true` to make this repo available as a template repository or `false` to prevent it. */\n                    is_template?: boolean;\n                    /** Updates the default branch for this repository. */\n                    default_branch?: string;\n                    /** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */\n                    allow_squash_merge?: boolean;\n                    /** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */\n                    allow_merge_commit?: boolean;\n                    /** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */\n                    allow_rebase_merge?: boolean;\n                    /** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */\n                    delete_branch_on_merge?: boolean;\n                    /** `true` to archive this repository. **Note**: You cannot unarchive repositories through the API. */\n                    archived?: boolean;\n                };\n            };\n        };\n    };\n    /** Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n    \"actions/list-artifacts-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        artifacts: components[\"schemas\"][\"artifact\"][];\n                    };\n                };\n            };\n        };\n    };\n    /** Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n    \"actions/get-artifact\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** artifact_id parameter */\n                artifact_id: components[\"parameters\"][\"artifact_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"artifact\"];\n                };\n            };\n        };\n    };\n    /** Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */\n    \"actions/delete-artifact\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** artifact_id parameter */\n                artifact_id: components[\"parameters\"][\"artifact_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\n     * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to\n     * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\n     * GitHub Apps must have the `actions:read` permission to use this endpoint.\n     */\n    \"actions/download-artifact\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** artifact_id parameter */\n                artifact_id: components[\"parameters\"][\"artifact_id\"];\n                archive_format: string;\n            };\n        };\n        responses: {\n            /** response */\n            302: never;\n        };\n    };\n    /** Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n    \"actions/get-job-for-workflow-run\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** job_id parameter */\n                job_id: components[\"parameters\"][\"job_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            202: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"job\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\n     * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can\n     * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must\n     * have the `actions:read` permission to use this endpoint.\n     */\n    \"actions/download-job-logs-for-workflow-run\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** job_id parameter */\n                job_id: components[\"parameters\"][\"job_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            302: never;\n        };\n    };\n    /**\n     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.\n     *\n     * You must authenticate using an access token with the `repo` scope to use this\n     * endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n     */\n    \"actions/get-github-actions-permissions-repository\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-repository-permissions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.\n     *\n     * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.\n     *\n     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n     */\n    \"actions/set-github-actions-permissions-repository\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    enabled: components[\"schemas\"][\"actions-enabled\"];\n                    allowed_actions?: components[\"schemas\"][\"allowed-actions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n     *\n     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n     */\n    \"actions/get-allowed-actions-repository\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"selected-actions\"];\n                };\n            };\n        };\n    };\n    /**\n     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n     *\n     * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.\n     *\n     * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.\n     *\n     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n     */\n    \"actions/set-allowed-actions-repository\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"selected-actions\"];\n            };\n        };\n    };\n    /** Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. */\n    \"actions/list-self-hosted-runners-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        runners: components[\"schemas\"][\"runner\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Lists binaries for the runner application that you can download and run.\n     *\n     * You must authenticate using an access token with the `repo` scope to use this endpoint.\n     */\n    \"actions/list-runner-applications-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner-application\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\n     * using an access token with the `repo` scope to use this endpoint.\n     *\n     * #### Example using registration token\n     *\n     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n     *\n     * ```\n     * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n     * ```\n     */\n    \"actions/create-registration-token-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authentication-token\"];\n                };\n            };\n        };\n    };\n    /**\n     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\n     * You must authenticate using an access token with the `repo` scope to use this endpoint.\n     *\n     * #### Example using remove token\n     *\n     * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.\n     *\n     * ```\n     * ./config.sh remove --token TOKEN\n     * ```\n     */\n    \"actions/create-remove-token-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"authentication-token\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets a specific self-hosted runner configured in a repository.\n     *\n     * You must authenticate using an access token with the `repo` scope to use this\n     * endpoint.\n     */\n    \"actions/get-self-hosted-runner-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"runner\"];\n                };\n            };\n        };\n    };\n    /**\n     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n     *\n     * You must authenticate using an access token with the `repo`\n     * scope to use this endpoint.\n     */\n    \"actions/delete-self-hosted-runner-from-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** Unique identifier of the self-hosted runner. */\n                runner_id: components[\"parameters\"][\"runner_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n     *\n     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n     */\n    \"actions/list-workflow-runs-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n                actor?: components[\"parameters\"][\"actor\"];\n                /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n                branch?: components[\"parameters\"][\"workflow-run-branch\"];\n                /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n                event?: components[\"parameters\"][\"event\"];\n                /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see \"[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run).\" */\n                status?: components[\"parameters\"][\"workflow-run-status\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        workflow_runs: components[\"schemas\"][\"workflow-run\"][];\n                    };\n                };\n            };\n        };\n    };\n    /** Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n    \"actions/get-workflow-run\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"workflow-run\"];\n                };\n            };\n        };\n    };\n    /**\n     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is\n     * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use\n     * this endpoint.\n     */\n    \"actions/delete-workflow-run\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n    \"actions/list-workflow-run-artifacts\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        artifacts: components[\"schemas\"][\"artifact\"][];\n                    };\n                };\n            };\n        };\n    };\n    /** Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */\n    \"actions/cancel-workflow-run\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            202: unknown;\n        };\n    };\n    /** Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters). */\n    \"actions/list-jobs-for-workflow-run\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n            query: {\n                /**\n                 * Filters jobs by their `completed_at` timestamp. Can be one of:\n                 * \\* `latest`: Returns jobs from the most recent execution of the workflow run.\n                 * \\* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.\n                 */\n                filter?: \"latest\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        jobs: components[\"schemas\"][\"job\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n     * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use\n     * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have\n     * the `actions:read` permission to use this endpoint.\n     */\n    \"actions/download-workflow-run-logs\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            302: never;\n        };\n    };\n    /** Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */\n    \"actions/delete-workflow-run-logs\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */\n    \"actions/re-run-workflow\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: unknown;\n        };\n    };\n    /**\n     * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n     *\n     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n     */\n    \"actions/get-workflow-run-usage\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                run_id: components[\"parameters\"][\"run-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"workflow-run-usage\"];\n                };\n            };\n        };\n    };\n    /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */\n    \"actions/list-repo-secrets\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        secrets: components[\"schemas\"][\"actions-secret\"][];\n                    };\n                };\n            };\n        };\n    };\n    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */\n    \"actions/get-repo-public-key\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-public-key\"];\n                };\n            };\n        };\n    };\n    /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */\n    \"actions/get-repo-secret\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-secret\"];\n                };\n            };\n        };\n    };\n    /**\n     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\n     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\n     * this endpoint.\n     *\n     * #### Example encrypting a secret using Node.js\n     *\n     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n     *\n     * ```\n     * const sodium = require('tweetsodium');\n     *\n     * const key = \"base64-encoded-public-key\";\n     * const value = \"plain-text-secret\";\n     *\n     * // Convert the message and key to Uint8Array's (Buffer implements that interface)\n     * const messageBytes = Buffer.from(value);\n     * const keyBytes = Buffer.from(key, 'base64');\n     *\n     * // Encrypt using LibSodium.\n     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);\n     *\n     * // Base64 the encrypted secret\n     * const encrypted = Buffer.from(encryptedBytes).toString('base64');\n     *\n     * console.log(encrypted);\n     * ```\n     *\n     *\n     * #### Example encrypting a secret using Python\n     *\n     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n     *\n     * ```\n     * from base64 import b64encode\n     * from nacl import encoding, public\n     *\n     * def encrypt(public_key: str, secret_value: str) -> str:\n     *   \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n     *   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n     *   sealed_box = public.SealedBox(public_key)\n     *   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n     *   return b64encode(encrypted).decode(\"utf-8\")\n     * ```\n     *\n     * #### Example encrypting a secret using C#\n     *\n     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n     *\n     * ```\n     * var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\n     * var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n     *\n     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n     *\n     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n     * ```\n     *\n     * #### Example encrypting a secret using Ruby\n     *\n     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n     *\n     * ```ruby\n     * require \"rbnacl\"\n     * require \"base64\"\n     *\n     * key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\n     * public_key = RbNaCl::PublicKey.new(key)\n     *\n     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)\n     * encrypted_secret = box.encrypt(\"my_secret\")\n     *\n     * # Print the base64 encoded secret\n     * puts Base64.strict_encode64(encrypted_secret)\n     * ```\n     */\n    \"actions/create-or-update-repo-secret\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n            };\n        };\n        responses: {\n            /** Response when creating a secret */\n            201: unknown;\n            /** Response when updating a secret */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint. */\n                    encrypted_value?: string;\n                    /** ID of the key you used to encrypt the secret. */\n                    key_id?: string;\n                };\n            };\n        };\n    };\n    /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */\n    \"actions/delete-repo-secret\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** secret_name parameter */\n                secret_name: components[\"parameters\"][\"secret_name\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n    \"actions/list-repo-workflows\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        workflows: components[\"schemas\"][\"workflow\"][];\n                    };\n                };\n            };\n        };\n    };\n    /** Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */\n    \"actions/get-workflow\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The ID of the workflow. You can also pass the workflow file name as a string. */\n                workflow_id: components[\"parameters\"][\"workflow-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"workflow\"];\n                };\n            };\n        };\n    };\n    /**\n     * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n     *\n     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n     */\n    \"actions/disable-workflow\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The ID of the workflow. You can also pass the workflow file name as a string. */\n                workflow_id: components[\"parameters\"][\"workflow-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n     *\n     * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"\n     *\n     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"\n     */\n    \"actions/create-workflow-dispatch\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The ID of the workflow. You can also pass the workflow file name as a string. */\n                workflow_id: components[\"parameters\"][\"workflow-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The git reference for the workflow. The reference can be a branch or tag name. */\n                    ref: string;\n                    /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */\n                    inputs?: {\n                        [key: string]: string;\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n     *\n     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n     */\n    \"actions/enable-workflow\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The ID of the workflow. You can also pass the workflow file name as a string. */\n                workflow_id: components[\"parameters\"][\"workflow-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n     *\n     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\n     */\n    \"actions/list-workflow-runs\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The ID of the workflow. You can also pass the workflow file name as a string. */\n                workflow_id: components[\"parameters\"][\"workflow-id\"];\n            };\n            query: {\n                /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n                actor?: components[\"parameters\"][\"actor\"];\n                /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n                branch?: components[\"parameters\"][\"workflow-run-branch\"];\n                /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n                event?: components[\"parameters\"][\"event\"];\n                /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see \"[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run).\" */\n                status?: components[\"parameters\"][\"workflow-run-status\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        workflow_runs: components[\"schemas\"][\"workflow-run\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n     *\n     * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n     */\n    \"actions/get-workflow-usage\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The ID of the workflow. You can also pass the workflow file name as a string. */\n                workflow_id: components[\"parameters\"][\"workflow-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"workflow-usage\"];\n                };\n            };\n        };\n    };\n    /** Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository. */\n    \"issues/list-assignees\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Checks if a user has permission to be assigned to an issue in this repository.\n     *\n     * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n     *\n     * Otherwise a `404` status code is returned.\n     */\n    \"issues/check-user-can-be-assigned\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                assignee: string;\n            };\n        };\n        responses: {\n            /** If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned. */\n            204: never;\n            /** Otherwise a `404` status code is returned. */\n            404: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"basic-error\"];\n                };\n            };\n        };\n    };\n    /** Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\". */\n    \"repos/enable-automated-security-fixes\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\". */\n    \"repos/disable-automated-security-fixes\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    \"repos/list-branches\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */\n                protected?: boolean;\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"short-branch\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"repos/get-branch\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"branch-with-protection\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/get-branch-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"branch-protection\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Protecting a branch requires admin or owner permissions to the repository.\n     *\n     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n     *\n     * **Note**: The list of users, apps, and teams in total is limited to 100 items.\n     */\n    \"repos/update-branch-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"protected-branch\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Require status checks to pass before merging. Set to `null` to disable. */\n                    required_status_checks: {\n                        /** Require branches to be up to date before merging. */\n                        strict: boolean;\n                        /** The list of status checks to require in order to merge into this branch */\n                        contexts: string[];\n                    } | null;\n                    /** Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */\n                    enforce_admins: boolean | null;\n                    /** Require at least one approving review on a pull request, before merging. Set to `null` to disable. */\n                    required_pull_request_reviews: {\n                        /** Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */\n                        dismissal_restrictions?: {\n                            /** The list of user `login`s with dismissal access */\n                            users?: string[];\n                            /** The list of team `slug`s with dismissal access */\n                            teams?: string[];\n                        };\n                        /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */\n                        dismiss_stale_reviews?: boolean;\n                        /** Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them. */\n                        require_code_owner_reviews?: boolean;\n                        /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6. */\n                        required_approving_review_count?: number;\n                    } | null;\n                    /** Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */\n                    restrictions: {\n                        /** The list of user `login`s with push access */\n                        users: string[];\n                        /** The list of team `slug`s with push access */\n                        teams: string[];\n                        /** The list of app `slug`s with push access */\n                        apps?: string[];\n                    } | null;\n                    /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation. */\n                    required_linear_history?: boolean;\n                    /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\" */\n                    allow_force_pushes?: boolean | null;\n                    /** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation. */\n                    allow_deletions?: boolean;\n                };\n            };\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/delete-branch-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/get-admin-branch-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"protected-branch-admin-enforced\"];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n     */\n    \"repos/set-admin-branch-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"protected-branch-admin-enforced\"];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n     */\n    \"repos/delete-admin-branch-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** No Content */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/get-pull-request-review-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/vnd.github.luke-cage-preview+json\": components[\"schemas\"][\"protected-branch-pull-request-review\"];\n                };\n            };\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/delete-pull-request-review-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** No Content */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n     *\n     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n     */\n    \"repos/update-pull-request-review-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"protected-branch-pull-request-review\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */\n                    dismissal_restrictions?: {\n                        /** The list of user `login`s with dismissal access */\n                        users?: string[];\n                        /** The list of team `slug`s with dismissal access */\n                        teams?: string[];\n                    };\n                    /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */\n                    dismiss_stale_reviews?: boolean;\n                    /** Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed. */\n                    require_code_owner_reviews?: boolean;\n                    /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6. */\n                    required_approving_review_count?: number;\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n     *\n     * **Note**: You must enable branch protection to require signed commits.\n     */\n    \"repos/get-commit-signature-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"protected-branch-admin-enforced\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.\n     */\n    \"repos/create-commit-signature-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"protected-branch-admin-enforced\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.\n     */\n    \"repos/delete-commit-signature-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** No Content */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/get-status-checks-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"status-check-policy\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/remove-status-check-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** No Content */\n            204: never;\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.\n     */\n    \"repos/update-status-check-protection\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"status-check-policy\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Require branches to be up to date before merging. */\n                    strict?: boolean;\n                    /** The list of status checks to require in order to merge into this branch */\n                    contexts?: string[];\n                };\n            };\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/get-all-status-check-contexts\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": string[];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/set-status-check-contexts\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": string[];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** contexts parameter */\n                    contexts: string[];\n                };\n            };\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/add-status-check-contexts\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": string[];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** contexts parameter */\n                    contexts: string[];\n                };\n            };\n        };\n    };\n    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"repos/remove-status-check-contexts\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": string[];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** contexts parameter */\n                    contexts: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Lists who has access to this protected branch.\n     *\n     * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.\n     */\n    \"repos/get-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"branch-restriction-policy\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Disables the ability to restrict who can push to this branch.\n     */\n    \"repos/delete-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** No Content */\n            204: never;\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n     */\n    \"repos/get-apps-with-access-to-protected-branch\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"integration\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n     *\n     * | Type    | Description                                                                                                                                                |\n     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/set-app-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"integration\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** apps parameter */\n                    apps: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n     *\n     * | Type    | Description                                                                                                                                                |\n     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/add-app-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"integration\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** apps parameter */\n                    apps: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n     *\n     * | Type    | Description                                                                                                                                                |\n     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/remove-app-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"integration\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** apps parameter */\n                    apps: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Lists the teams who have push access to this branch. The list includes child teams.\n     */\n    \"repos/get-teams-with-access-to-protected-branch\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.\n     *\n     * | Type    | Description                                                                                                                                |\n     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/set-team-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** teams parameter */\n                    teams: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Grants the specified teams push access for this branch. You can also give push access to child teams.\n     *\n     * | Type    | Description                                                                                                                                |\n     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/add-team-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** teams parameter */\n                    teams: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Removes the ability of a team to push to this branch. You can also remove push access for child teams.\n     *\n     * | Type    | Description                                                                                                                                         |\n     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/remove-team-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** teams parameter */\n                    teams: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Lists the people who have push access to this branch.\n     */\n    \"repos/get-users-with-access-to-protected-branch\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n     *\n     * | Type    | Description                                                                                                                   |\n     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/set-user-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** users parameter */\n                    users: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Grants the specified people push access for this branch.\n     *\n     * | Type    | Description                                                                                                                   |\n     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/add-user-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** users parameter */\n                    users: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Removes the ability of a user to push to this branch.\n     *\n     * | Type    | Description                                                                                                                                   |\n     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n     */\n    \"repos/remove-user-access-restrictions\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** users parameter */\n                    users: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Renames a branch in a repository.\n     *\n     * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \"[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\".\n     *\n     * The permissions required to use this endpoint depends on whether you are renaming the default branch.\n     *\n     * To rename a non-default branch:\n     *\n     * * Users must have push access.\n     * * GitHub Apps must have the `contents:write` repository permission.\n     *\n     * To rename the default branch:\n     *\n     * * Users must have admin or owner permissions.\n     * * GitHub Apps must have the `administration:write` repository permission.\n     */\n    \"repos/rename-branch\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The name of the branch. */\n                branch: components[\"parameters\"][\"branch\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"branch-with-protection\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The new name of the branch. */\n                    new_name: string;\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n     *\n     * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.\n     *\n     * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.\n     */\n    \"checks/create\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"check-run\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": Partial<{\n                    status?: \"completed\";\n                } & {\n                    [key: string]: any;\n                }> & Partial<{\n                    status?: \"queued\" | \"in_progress\";\n                } & {\n                    [key: string]: any;\n                }>;\n            };\n        };\n    };\n    /**\n     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n     *\n     * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n     */\n    \"checks/get\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** check_run_id parameter */\n                check_run_id: components[\"parameters\"][\"check_run_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"check-run\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n     *\n     * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.\n     */\n    \"checks/update\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** check_run_id parameter */\n                check_run_id: components[\"parameters\"][\"check_run_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"check-run\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": Partial<{\n                    status?: \"completed\";\n                } & {\n                    [key: string]: any;\n                }> & Partial<{\n                    status?: \"queued\" | \"in_progress\";\n                } & {\n                    [key: string]: any;\n                }>;\n            };\n        };\n    };\n    /** Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository. */\n    \"checks/list-annotations\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** check_run_id parameter */\n                check_run_id: components[\"parameters\"][\"check_run_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"check-annotation\"][];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n     *\n     * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\". Your GitHub App must have the `checks:write` permission to create check suites.\n     */\n    \"checks/create-suite\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"check-suite\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The sha of the head commit. */\n                    head_sha: string;\n                };\n            };\n        };\n    };\n    /** Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites. */\n    \"checks/set-suites-preferences\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"check-suite-preference\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details. */\n                    auto_trigger_checks?: {\n                        /** The `id` of the GitHub App. */\n                        app_id: number;\n                        /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them. */\n                        setting: boolean;\n                    }[];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n     *\n     * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.\n     */\n    \"checks/get-suite\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** check_suite_id parameter */\n                check_suite_id: components[\"parameters\"][\"check_suite_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"check-suite\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n     *\n     * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n     */\n    \"checks/list-for-suite\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** check_suite_id parameter */\n                check_suite_id: components[\"parameters\"][\"check_suite_id\"];\n            };\n            query: {\n                /** Returns check runs with the specified `name`. */\n                check_name?: components[\"parameters\"][\"check_name\"];\n                /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */\n                status?: components[\"parameters\"][\"status\"];\n                /** Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`. */\n                filter?: \"latest\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        check_runs: components[\"schemas\"][\"check-run\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n     *\n     * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.\n     */\n    \"checks/rerequest-suite\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** check_suite_id parameter */\n                check_suite_id: components[\"parameters\"][\"check_suite_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: unknown;\n        };\n    };\n    /** Lists all open code scanning alerts for the default branch (usually `main` or `master`). You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint. */\n    \"code-scanning/list-alerts-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state. */\n                state?: components[\"schemas\"][\"code-scanning-alert-state\"];\n                /** Set a full Git reference to list alerts for a specific branch. The `ref` must be formatted as `refs/heads/<branch name>`. */\n                ref?: components[\"schemas\"][\"code-scanning-alert-ref\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-scanning-alert-code-scanning-alert-items\"][];\n                };\n            };\n            /** Response if github advanced security is not enabled for this repository */\n            403: unknown;\n            /** Response if the ref does not match an existing ref */\n            404: unknown;\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /**\n     * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.\n     *\n     * The security `alert_number` is found at the end of the security alert's URL. For example, the security alert ID for `https://github.com/Octo-org/octo-repo/security/code-scanning/88` is `88`.\n     */\n    \"code-scanning/get-alert\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                alert_number: number;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-scanning-alert-code-scanning-alert\"];\n                };\n            };\n            /** Response if github advanced security is not enabled for this repository */\n            403: unknown;\n            404: components[\"responses\"][\"not_found\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /** Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint. */\n    \"code-scanning/update-alert\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The security alert number, found at the end of the security alert's URL. */\n                alert_number: components[\"parameters\"][\"alert_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-scanning-alert-code-scanning-alert\"];\n                };\n            };\n            /** Response if the repository is archived, or if github advanced security is not enabled for this repository */\n            403: unknown;\n            /** Response when code scanning is not available and you should try again at a later time */\n            503: unknown;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    state: components[\"schemas\"][\"code-scanning-alert-set-state\"];\n                    dismissed_reason?: components[\"schemas\"][\"code-scanning-alert-dismissed-reason\"];\n                };\n            };\n        };\n    };\n    /** List the details of recent code scanning analyses for a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint. */\n    \"code-scanning/list-recent-analyses\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Set a full Git reference to list alerts for a specific branch. The `ref` must be formatted as `refs/heads/<branch name>`. */\n                ref?: components[\"schemas\"][\"code-scanning-analysis-ref\"];\n                /** Set a single code scanning tool name to filter alerts by tool. */\n                tool_name?: components[\"schemas\"][\"code-scanning-analysis-tool-name\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-scanning-analysis-code-scanning-analysis\"][];\n                };\n            };\n            /** Response if github advanced security is not enabled for this repository */\n            403: unknown;\n        };\n    };\n    /** Upload a SARIF file containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint. */\n    \"code-scanning/upload-sarif\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            202: unknown;\n            /** Response if the `sarif` field is invalid */\n            400: unknown;\n            /** Response if the repository is archived, or if github advanced security is not enabled for this repository */\n            403: unknown;\n            /** Response if `commit_sha` or `ref` cannot be found */\n            404: unknown;\n            /** Response if the `sarif` field is too large */\n            413: unknown;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    commit_sha: components[\"schemas\"][\"code-scanning-analysis-commit-sha\"];\n                    ref: components[\"schemas\"][\"code-scanning-analysis-ref\"];\n                    sarif: components[\"schemas\"][\"code-scanning-analysis-sarif-file\"];\n                    /**\n                     * The base directory used in the analysis, as it appears in the SARIF file.\n                     * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.\n                     */\n                    checkout_uri?: string;\n                    /** The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                    started_at?: string;\n                    tool_name: components[\"schemas\"][\"code-scanning-analysis-tool-name\"];\n                };\n            };\n        };\n    };\n    /**\n     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n     *\n     * Team members will include the members of child teams.\n     */\n    \"repos/list-collaborators\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /**\n                 * Filter collaborators returned by their affiliation. Can be one of:\n                 * \\* `outside`: All outside collaborators of an organization-owned repository.\n                 * \\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.\n                 * \\* `all`: All collaborators the authenticated user can see.\n                 */\n                affiliation?: \"outside\" | \"direct\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"collaborator\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n     *\n     * Team members will include the members of child teams.\n     */\n    \"repos/check-collaborator\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Response if user is a collaborator */\n            204: never;\n            /** Response if user is not a collaborator */\n            404: unknown;\n        };\n    };\n    /**\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     *\n     * For more information the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".\n     *\n     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n     *\n     * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).\n     *\n     * **Rate limits**\n     *\n     * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.\n     */\n    \"repos/add-collaborator\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Response when a new invitation is created */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository-invitation\"];\n                };\n            };\n            /** Response when person is already a collaborator */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:\n                     * \\* `pull` - can pull, but not push to or administer this repository.\n                     * \\* `push` - can pull and push, but not administer this repository.\n                     * \\* `admin` - can pull, push and administer this repository.\n                     * \\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.\n                     * \\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.\n                     */\n                    permission?: \"pull\" | \"push\" | \"admin\" | \"maintain\" | \"triage\";\n                    permissions?: string;\n                };\n            };\n        };\n    };\n    \"repos/remove-collaborator\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`. */\n    \"repos/get-collaborator-permission-level\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Response if user has admin permissions */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository-collaborator-permission\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).\n     *\n     * Comments are ordered by ascending ID.\n     */\n    \"repos/list-commit-comments-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit-comment\"][];\n                };\n            };\n        };\n    };\n    \"repos/get-commit-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit-comment\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"repos/delete-commit-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"repos/update-commit-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit-comment\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The contents of the comment */\n                    body: string;\n                };\n            };\n        };\n    };\n    /** List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments). */\n    \"reactions/list-for-commit-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n            query: {\n                /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */\n                content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /** Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment. */\n    \"reactions/create-for-commit-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** Reaction exists */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n            /** Reaction created */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment. */\n                    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n     *\n     * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).\n     */\n    \"reactions/delete-for-commit-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n                reaction_id: components[\"parameters\"][\"reaction-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * **Signature verification object**\n     *\n     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n     *\n     * | Name | Type | Description |\n     * | ---- | ---- | ----------- |\n     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n     * | `signature` | `string` | The signature that was extracted from the commit. |\n     * | `payload` | `string` | The value that was signed. |\n     *\n     * These are the possible values for `reason` in the `verification` object:\n     *\n     * | Value | Description |\n     * | ----- | ----------- |\n     * | `expired_key` | The key that made the signature is expired. |\n     * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n     * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n     * | `unsigned` | The object does not include a signature. |\n     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n     * | `no_user` | No user was associated with the `committer` email address in the commit. |\n     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n     * | `malformed_signature` | There was an error parsing the signature. |\n     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n     */\n    \"repos/list-commits\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`). */\n                sha?: string;\n                /** Only commits containing this file path will be returned. */\n                path?: string;\n                /** GitHub login or email address by which to filter by commit author. */\n                author?: string;\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                until?: string;\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit\"][];\n                };\n            };\n            400: components[\"responses\"][\"bad_request\"];\n            404: components[\"responses\"][\"not_found\"];\n            409: components[\"responses\"][\"conflict\"];\n            500: components[\"responses\"][\"internal_error\"];\n        };\n    };\n    /**\n     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.\n     */\n    \"repos/list-branches-for-head-commit\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** commit_sha parameter */\n                commit_sha: components[\"parameters\"][\"commit_sha\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"branch-short\"][];\n                };\n            };\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** Use the `:commit_sha` to specify the commit that will have its comments listed. */\n    \"repos/list-comments-for-commit\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** commit_sha parameter */\n                commit_sha: components[\"parameters\"][\"commit_sha\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit-comment\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Create a comment for a commit using its `:commit_sha`.\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     */\n    \"repos/create-commit-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** commit_sha parameter */\n                commit_sha: components[\"parameters\"][\"commit_sha\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit-comment\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The contents of the comment. */\n                    body: string;\n                    /** Relative path of the file to comment on. */\n                    path?: string;\n                    /** Line index in the diff to comment on. */\n                    position?: number;\n                    /** **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */\n                    line?: number;\n                };\n            };\n        };\n    };\n    /** Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint. */\n    \"repos/list-pull-requests-associated-with-commit\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** commit_sha parameter */\n                commit_sha: components[\"parameters\"][\"commit_sha\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-simple\"][];\n                };\n            };\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n     *\n     * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n     *\n     * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n     *\n     * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n     *\n     * **Signature verification object**\n     *\n     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n     *\n     * | Name | Type | Description |\n     * | ---- | ---- | ----------- |\n     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n     * | `signature` | `string` | The signature that was extracted from the commit. |\n     * | `payload` | `string` | The value that was signed. |\n     *\n     * These are the possible values for `reason` in the `verification` object:\n     *\n     * | Value | Description |\n     * | ----- | ----------- |\n     * | `expired_key` | The key that made the signature is expired. |\n     * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n     * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n     * | `unsigned` | The object does not include a signature. |\n     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n     * | `no_user` | No user was associated with the `committer` email address in the commit. |\n     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n     * | `malformed_signature` | There was an error parsing the signature. |\n     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n     */\n    \"repos/get-commit\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n            500: components[\"responses\"][\"internal_error\"];\n        };\n    };\n    /**\n     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n     *\n     * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n     */\n    \"checks/list-for-ref\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n            query: {\n                /** Returns check runs with the specified `name`. */\n                check_name?: components[\"parameters\"][\"check_name\"];\n                /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */\n                status?: components[\"parameters\"][\"status\"];\n                /** Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`. */\n                filter?: \"latest\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        check_runs: components[\"schemas\"][\"check-run\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n     *\n     * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.\n     */\n    \"checks/list-suites-for-ref\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n            query: {\n                /** Filters check suites by GitHub App `id`. */\n                app_id?: number;\n                /** Returns check runs with the specified `name`. */\n                check_name?: components[\"parameters\"][\"check_name\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        check_suites: components[\"schemas\"][\"check-suite\"][];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n     *\n     * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.\n     *\n     * Additionally, a combined `state` is returned. The `state` is one of:\n     *\n     * *   **failure** if any of the contexts report as `error` or `failure`\n     * *   **pending** if there are no statuses or a context is `pending`\n     * *   **success** if the latest status for all contexts is `success`\n     */\n    \"repos/get-combined-status-for-ref\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"combined-commit-status\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n     *\n     * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.\n     */\n    \"repos/list-commit-statuses-for-ref\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"status\"][];\n                };\n            };\n            301: components[\"responses\"][\"moved_permanently\"];\n        };\n    };\n    /**\n     * Returns the contents of the repository's code of conduct file, if one is detected.\n     *\n     * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.\n     */\n    \"codes-of-conduct/get-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-of-conduct\"];\n                };\n            };\n        };\n    };\n    /**\n     * This endpoint will return all community profile metrics, including an\n     * overall health score, repository description, the presence of documentation, detected\n     * code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE,\n     * README, and CONTRIBUTING files.\n     *\n     * The `health_percentage` score is defined as a percentage of how many of\n     * these four documents are present: README, CONTRIBUTING, LICENSE, and\n     * CODE_OF_CONDUCT. For example, if all four documents are present, then\n     * the `health_percentage` is `100`. If only one is present, then the\n     * `health_percentage` is `25`.\n     *\n     * `content_reports_enabled` is only returned for organization-owned repositories.\n     */\n    \"repos/get-community-profile-metrics\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"community-profile\"];\n                };\n            };\n        };\n    };\n    /**\n     * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.\n     *\n     * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n     *\n     * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n     *\n     * **Working with large comparisons**\n     *\n     * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.\n     *\n     * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long\n     * to generate. You can typically resolve this error by using a smaller commit range.\n     *\n     * **Signature verification object**\n     *\n     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n     *\n     * | Name | Type | Description |\n     * | ---- | ---- | ----------- |\n     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n     * | `signature` | `string` | The signature that was extracted from the commit. |\n     * | `payload` | `string` | The value that was signed. |\n     *\n     * These are the possible values for `reason` in the `verification` object:\n     *\n     * | Value | Description |\n     * | ----- | ----------- |\n     * | `expired_key` | The key that made the signature is expired. |\n     * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n     * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n     * | `unsigned` | The object does not include a signature. |\n     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n     * | `no_user` | No user was associated with the `committer` email address in the commit. |\n     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n     * | `malformed_signature` | There was an error parsing the signature. |\n     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n     */\n    \"repos/compare-commits\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                base: string;\n                head: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit-comparison\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            500: components[\"responses\"][\"internal_error\"];\n        };\n    };\n    /**\n     * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n     * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.\n     *\n     * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for\n     * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media\n     * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent\n     * object format.\n     *\n     * **Note**:\n     * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).\n     * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\n     * API](https://docs.github.com/rest/reference/git#get-a-tree).\n     * *   This API supports files up to 1 megabyte in size.\n     *\n     * #### If the content is a directory\n     * The response will be an array of objects, one object for each item in the directory.\n     * When listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value\n     * _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\n     * In the next major version of the API, the type will be returned as \"submodule\".\n     *\n     * #### If the content is a symlink\n     * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the\n     * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object\n     * describing the symlink itself.\n     *\n     * #### If the content is a submodule\n     * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\n     * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\n     * the submodule at that specific commit.\n     *\n     * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the\n     * github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.\n     */\n    \"repos/get-content\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** path+ parameter */\n                path: string;\n            };\n            query: {\n                /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n                ref?: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/vnd.github.v3.object\": components[\"schemas\"][\"content-tree\"];\n                    \"application/json\": components[\"schemas\"][\"content-directory\"] | components[\"schemas\"][\"content-file\"] | components[\"schemas\"][\"content-symlink\"] | components[\"schemas\"][\"content-submodule\"];\n                };\n            };\n            302: components[\"responses\"][\"found\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Creates a new file or replaces an existing file in a repository. */\n    \"repos/create-or-update-file-contents\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** path+ parameter */\n                path: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"file-commit\"];\n                };\n            };\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"file-commit\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            409: components[\"responses\"][\"conflict\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The commit message. */\n                    message: string;\n                    /** The new file content, using Base64 encoding. */\n                    content: string;\n                    /** **Required if you are updating a file**. The blob SHA of the file being replaced. */\n                    sha?: string;\n                    /** The branch name. Default: the repository’s default branch (usually `master`) */\n                    branch?: string;\n                    /** The person that committed the file. Default: the authenticated user. */\n                    committer?: {\n                        /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */\n                        name: string;\n                        /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */\n                        email: string;\n                        date?: string;\n                    };\n                    /** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */\n                    author?: {\n                        /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */\n                        name: string;\n                        /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */\n                        email: string;\n                        date?: string;\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Deletes a file in a repository.\n     *\n     * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n     *\n     * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n     *\n     * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n     */\n    \"repos/delete-file\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** path+ parameter */\n                path: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"file-commit\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            409: components[\"responses\"][\"conflict\"];\n            422: components[\"responses\"][\"validation_failed\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The commit message. */\n                    message: string;\n                    /** The blob SHA of the file being replaced. */\n                    sha: string;\n                    /** The branch name. Default: the repository’s default branch (usually `master`) */\n                    branch?: string;\n                    /** object containing information about the committer. */\n                    committer?: {\n                        /** The name of the author (or committer) of the commit */\n                        name?: string;\n                        /** The email of the author (or committer) of the commit */\n                        email?: string;\n                    };\n                    /** object containing information about the author. */\n                    author?: {\n                        /** The name of the author (or committer) of the commit */\n                        name?: string;\n                        /** The email of the author (or committer) of the commit */\n                        email?: string;\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.\n     *\n     * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.\n     */\n    \"repos/list-contributors\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Set to `1` or `true` to include anonymous contributors in results. */\n                anon?: string;\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** Response if repository contains content */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"contributor\"][];\n                };\n            };\n            /** Response if repository is empty */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Simple filtering of deployments is available via query parameters: */\n    \"repos/list-deployments\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** The SHA recorded at creation time. */\n                sha?: string;\n                /** The name of the ref. This can be a branch, tag, or SHA. */\n                ref?: string;\n                /** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */\n                task?: string;\n                /** The name of the environment that was deployed to (e.g., `staging` or `production`). */\n                environment?: string;\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deployment\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Deployments offer a few configurable parameters with certain defaults.\n     *\n     * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\n     * before we merge a pull request.\n     *\n     * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\n     * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\n     * makes it easier to track which environments have requested deployments. The default environment is `production`.\n     *\n     * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\n     * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\n     * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\n     * return a failure response.\n     *\n     * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`\n     * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\n     * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\n     * not require any contexts or create any commit statuses, the deployment will always succeed.\n     *\n     * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\n     * field that will be passed on when a deployment event is dispatched.\n     *\n     * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\n     * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\n     * application with debugging enabled.\n     *\n     * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.\n     *\n     * #### Merged branch response\n     * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\n     * a deployment. This auto-merge happens when:\n     * *   Auto-merge option is enabled in the repository\n     * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n     * *   There are no merge conflicts\n     *\n     * If there are no new commits in the base branch, a new request to create a deployment should give a successful\n     * response.\n     *\n     * #### Merge conflict response\n     * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\n     * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n     *\n     * #### Failed commit status checks\n     * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\n     * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.\n     */\n    \"repos/create-deployment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deployment\"];\n                };\n            };\n            /** Merged branch response */\n            202: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                    };\n                };\n            };\n            /** response */\n            409: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The ref to deploy. This can be a branch, tag, or SHA. */\n                    ref: string;\n                    /** Specifies a task to execute (e.g., `deploy` or `deploy:migrations`). */\n                    task?: string;\n                    /** Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch. */\n                    auto_merge?: boolean;\n                    /** The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */\n                    required_contexts?: string[];\n                    payload?: {\n                        [key: string]: any;\n                    } | string;\n                    /** Name for the target deployment environment (e.g., `production`, `staging`, `qa`). */\n                    environment?: string;\n                    /** Short description of the deployment. */\n                    description?: string | null;\n                    /**\n                     * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`\n                     * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.\n                     */\n                    transient_environment?: boolean;\n                    /**\n                     * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.\n                     * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.\n                     */\n                    production_environment?: boolean;\n                    created_at?: string;\n                };\n            };\n        };\n    };\n    \"repos/get-deployment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** deployment_id parameter */\n                deployment_id: components[\"parameters\"][\"deployment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deployment\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.\n     *\n     * To set a deployment as inactive, you must:\n     *\n     * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n     * *   Mark the active deployment as inactive by adding any non-successful deployment status.\n     *\n     * For more information, see \"[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)\" and \"[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status).\"\n     */\n    \"repos/delete-deployment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** deployment_id parameter */\n                deployment_id: components[\"parameters\"][\"deployment_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n    };\n    /** Users with pull access can view deployment statuses for a deployment: */\n    \"repos/list-deployment-statuses\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** deployment_id parameter */\n                deployment_id: components[\"parameters\"][\"deployment_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deployment-status\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Users with `push` access can create deployment statuses for a given deployment.\n     *\n     * GitHub Apps require `read & write` access to \"Deployments\" and `read-only` access to \"Repo contents\" (for private repos). OAuth Apps require the `repo_deployment` scope.\n     */\n    \"repos/create-deployment-status\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** deployment_id parameter */\n                deployment_id: components[\"parameters\"][\"deployment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deployment-status\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */\n                    state: \"error\" | \"failure\" | \"inactive\" | \"in_progress\" | \"queued\" | \"pending\" | \"success\";\n                    /** The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`. */\n                    target_url?: string;\n                    /**\n                     * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`\n                     * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.\n                     */\n                    log_url?: string;\n                    /** A short description of the status. The maximum description length is 140 characters. */\n                    description?: string;\n                    /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. */\n                    environment?: \"production\" | \"staging\" | \"qa\";\n                    /**\n                     * Sets the URL for accessing your environment. Default: `\"\"`\n                     * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.\n                     */\n                    environment_url?: string;\n                    /**\n                     * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`\n                     * **Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.\n                     * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.\n                     */\n                    auto_inactive?: boolean;\n                };\n            };\n        };\n    };\n    /** Users with pull access can view a deployment status for a deployment: */\n    \"repos/get-deployment-status\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** deployment_id parameter */\n                deployment_id: components[\"parameters\"][\"deployment_id\"];\n                status_id: number;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deployment-status\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\"\n     *\n     * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.\n     *\n     * This endpoint requires write access to the repository by providing either:\n     *\n     *   - Personal access tokens with `repo` scope. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\" in the GitHub Help documentation.\n     *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.\n     *\n     * This input example shows how you can use the `client_payload` as a test to debug your workflow.\n     */\n    \"repos/create-dispatch-event\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** A custom webhook event name. */\n                    event_type: string;\n                    /** JSON payload with extra information about the webhook event that your action or worklow may use. */\n                    client_payload?: {\n                        [key: string]: any;\n                    };\n                };\n            };\n        };\n    };\n    \"activity/list-repo-events\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n        };\n    };\n    \"repos/list-forks\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** The sort order. Can be either `newest`, `oldest`, or `stargazers`. */\n                sort?: \"newest\" | \"oldest\" | \"stargazers\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n            400: components[\"responses\"][\"bad_request\"];\n        };\n    };\n    /**\n     * Create a fork for the authenticated user.\n     *\n     * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).\n     */\n    \"repos/create-fork\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            202: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository\"];\n                };\n            };\n            400: components[\"responses\"][\"bad_request\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Optional parameter to specify the organization name if forking into an organization. */\n                    organization?: string;\n                };\n            };\n        };\n    };\n    \"git/create-blob\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"short-blob\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            409: components[\"responses\"][\"conflict\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The new blob's content. */\n                    content: string;\n                    /** The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported. */\n                    encoding?: string;\n                };\n            };\n        };\n    };\n    /**\n     * The `content` in the response will always be Base64 encoded.\n     *\n     * _Note_: This API supports blobs up to 100 megabytes in size.\n     */\n    \"git/get-blob\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                file_sha: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"blob\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n     *\n     * **Signature verification object**\n     *\n     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n     *\n     * | Name | Type | Description |\n     * | ---- | ---- | ----------- |\n     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n     * | `signature` | `string` | The signature that was extracted from the commit. |\n     * | `payload` | `string` | The value that was signed. |\n     *\n     * These are the possible values for `reason` in the `verification` object:\n     *\n     * | Value | Description |\n     * | ----- | ----------- |\n     * | `expired_key` | The key that made the signature is expired. |\n     * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n     * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n     * | `unsigned` | The object does not include a signature. |\n     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n     * | `no_user` | No user was associated with the `committer` email address in the commit. |\n     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n     * | `malformed_signature` | There was an error parsing the signature. |\n     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n     */\n    \"git/create-commit\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-commit\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The commit message */\n                    message: string;\n                    /** The SHA of the tree object this commit points to */\n                    tree: string;\n                    /** The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */\n                    parents?: string[];\n                    /** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */\n                    author?: {\n                        /** The name of the author (or committer) of the commit */\n                        name?: string;\n                        /** The email of the author (or committer) of the commit */\n                        email?: string;\n                        /** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                        date?: string;\n                    };\n                    /** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */\n                    committer?: {\n                        /** The name of the author (or committer) of the commit */\n                        name?: string;\n                        /** The email of the author (or committer) of the commit */\n                        email?: string;\n                        /** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                        date?: string;\n                    };\n                    /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */\n                    signature?: string;\n                };\n            };\n        };\n    };\n    /**\n     * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n     *\n     * **Signature verification object**\n     *\n     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n     *\n     * | Name | Type | Description |\n     * | ---- | ---- | ----------- |\n     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n     * | `signature` | `string` | The signature that was extracted from the commit. |\n     * | `payload` | `string` | The value that was signed. |\n     *\n     * These are the possible values for `reason` in the `verification` object:\n     *\n     * | Value | Description |\n     * | ----- | ----------- |\n     * | `expired_key` | The key that made the signature is expired. |\n     * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n     * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n     * | `unsigned` | The object does not include a signature. |\n     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n     * | `no_user` | No user was associated with the `committer` email address in the commit. |\n     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n     * | `malformed_signature` | There was an error parsing the signature. |\n     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n     */\n    \"git/get-commit\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** commit_sha parameter */\n                commit_sha: components[\"parameters\"][\"commit_sha\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-commit\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n     *\n     * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n     *\n     * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n     *\n     * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.\n     */\n    \"git/list-matching-refs\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-ref\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n     *\n     * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n     */\n    \"git/get-ref\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-ref\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches. */\n    \"git/create-ref\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-ref\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */\n                    ref: string;\n                    /** The SHA1 value for this reference. */\n                    sha: string;\n                    key?: string;\n                };\n            };\n        };\n    };\n    \"git/delete-ref\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"git/update-ref\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** ref+ parameter */\n                ref: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-ref\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The SHA1 value to set this reference to */\n                    sha: string;\n                    /** Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work. */\n                    force?: boolean;\n                };\n            };\n        };\n    };\n    /**\n     * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.\n     *\n     * **Signature verification object**\n     *\n     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n     *\n     * | Name | Type | Description |\n     * | ---- | ---- | ----------- |\n     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n     * | `signature` | `string` | The signature that was extracted from the commit. |\n     * | `payload` | `string` | The value that was signed. |\n     *\n     * These are the possible values for `reason` in the `verification` object:\n     *\n     * | Value | Description |\n     * | ----- | ----------- |\n     * | `expired_key` | The key that made the signature is expired. |\n     * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n     * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n     * | `unsigned` | The object does not include a signature. |\n     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n     * | `no_user` | No user was associated with the `committer` email address in the commit. |\n     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n     * | `malformed_signature` | There was an error parsing the signature. |\n     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n     */\n    \"git/create-tag\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-tag\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The tag's name. This is typically a version (e.g., \"v0.0.1\"). */\n                    tag: string;\n                    /** The tag message. */\n                    message: string;\n                    /** The SHA of the git object this is tagging. */\n                    object: string;\n                    /** The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`. */\n                    type: \"commit\" | \"tree\" | \"blob\";\n                    /** An object with information about the individual creating the tag. */\n                    tagger?: {\n                        /** The name of the author of the tag */\n                        name?: string;\n                        /** The email of the author of the tag */\n                        email?: string;\n                        /** When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                        date?: string;\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * **Signature verification object**\n     *\n     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n     *\n     * | Name | Type | Description |\n     * | ---- | ---- | ----------- |\n     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n     * | `signature` | `string` | The signature that was extracted from the commit. |\n     * | `payload` | `string` | The value that was signed. |\n     *\n     * These are the possible values for `reason` in the `verification` object:\n     *\n     * | Value | Description |\n     * | ----- | ----------- |\n     * | `expired_key` | The key that made the signature is expired. |\n     * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n     * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n     * | `unsigned` | The object does not include a signature. |\n     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n     * | `no_user` | No user was associated with the `committer` email address in the commit. |\n     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n     * | `malformed_signature` | There was an error parsing the signature. |\n     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n     */\n    \"git/get-tag\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                tag_sha: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-tag\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n     *\n     * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)\" and \"[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference).\"\n     */\n    \"git/create-tree\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-tree\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */\n                    tree: {\n                        /** The file referenced in the tree. */\n                        path?: string;\n                        /** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */\n                        mode?: \"100644\" | \"100755\" | \"040000\" | \"160000\" | \"120000\";\n                        /** Either `blob`, `tree`, or `commit`. */\n                        type?: \"blob\" | \"tree\" | \"commit\";\n                        /**\n                         * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.\n                         *\n                         * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.\n                         */\n                        sha?: string | null;\n                        /**\n                         * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.\n                         *\n                         * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.\n                         */\n                        content?: string;\n                    }[];\n                    /**\n                     * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\n                     * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.\n                     */\n                    base_tree?: string;\n                };\n            };\n        };\n    };\n    /**\n     * Returns a single tree using the SHA1 value for that tree.\n     *\n     * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n     */\n    \"git/get-tree\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                tree_sha: string;\n            };\n            query: {\n                /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees. */\n                recursive?: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"git-tree\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"repos/list-webhooks\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"hook\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\n     * share the same `config` as long as those webhooks do not have any `events` that overlap.\n     */\n    \"repos/create-webhook\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"hook\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */\n                    name?: string;\n                    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */\n                    config: {\n                        url: components[\"schemas\"][\"webhook-config-url\"];\n                        content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n                        secret?: components[\"schemas\"][\"webhook-config-secret\"];\n                        insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n                        token?: string;\n                        digest?: string;\n                    };\n                    /** Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. */\n                    events?: string[];\n                    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */\n                    active?: boolean;\n                };\n            };\n        };\n    };\n    /** Returns a webhook configured in a repository. To get only the webhook `config` properties, see \"[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\" */\n    \"repos/get-webhook\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"hook\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"repos/delete-webhook\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\" */\n    \"repos/update-webhook\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"hook\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */\n                    config?: {\n                        url: components[\"schemas\"][\"webhook-config-url\"];\n                        content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n                        secret?: components[\"schemas\"][\"webhook-config-secret\"];\n                        insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n                        address?: string;\n                        room?: string;\n                    };\n                    /** Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events. */\n                    events?: string[];\n                    /** Determines a list of events to be added to the list of events that the Hook triggers for. */\n                    add_events?: string[];\n                    /** Determines a list of events to be removed from the list of events that the Hook triggers for. */\n                    remove_events?: string[];\n                    /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */\n                    active?: boolean;\n                };\n            };\n        };\n    };\n    /**\n     * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use \"[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook).\"\n     *\n     * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.\n     */\n    \"repos/get-webhook-config-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Default response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"webhook-config\"];\n                };\n            };\n        };\n    };\n    /**\n     * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use \"[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook).\"\n     *\n     * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.\n     */\n    \"repos/update-webhook-config-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Default response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"webhook-config\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    url?: components[\"schemas\"][\"webhook-config-url\"];\n                    content_type?: components[\"schemas\"][\"webhook-config-content-type\"];\n                    secret?: components[\"schemas\"][\"webhook-config-secret\"];\n                    insecure_ssl?: components[\"schemas\"][\"webhook-config-insecure-ssl\"];\n                };\n            };\n        };\n    };\n    /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */\n    \"repos/ping-webhook\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n     *\n     * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`\n     */\n    \"repos/test-push-webhook\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                hook_id: components[\"parameters\"][\"hook-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * View the progress of an import.\n     *\n     * **Import status**\n     *\n     * This section includes details about the possible values of the `status` field of the Import Progress response.\n     *\n     * An import that does not have errors will progress through these steps:\n     *\n     * *   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n     * *   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n     * *   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n     * *   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\".\n     * *   `complete` - the import is complete, and the repository is ready on GitHub.\n     *\n     * If there are problems, you will see one of these in the `status` field:\n     *\n     * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n     * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.\n     * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n     * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.\n     * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n     *\n     * **The project_choices field**\n     *\n     * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n     *\n     * **Git LFS related fields**\n     *\n     * This section includes details about Git LFS related fields that may be present in the Import Progress response.\n     *\n     * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n     * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n     * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n     * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.\n     */\n    \"migrations/get-import-status\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"import\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Start a source import to a GitHub repository using GitHub Importer. */\n    \"migrations/start-import\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"import\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The URL of the originating repository. */\n                    vcs_url: string;\n                    /** The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response. */\n                    vcs?: \"subversion\" | \"git\" | \"mercurial\" | \"tfvc\";\n                    /** If authentication is required, the username to provide to `vcs_url`. */\n                    vcs_username?: string;\n                    /** If authentication is required, the password to provide to `vcs_url`. */\n                    vcs_password?: string;\n                    /** For a tfvc import, the name of the project that is being imported. */\n                    tfvc_project?: string;\n                };\n            };\n        };\n    };\n    /** Stop an import for a repository. */\n    \"migrations/cancel-import\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\n     * request. If no parameters are provided, the import will be restarted.\n     */\n    \"migrations/update-import\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"import\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The username to provide to the originating repository. */\n                    vcs_username?: string;\n                    /** The password to provide to the originating repository. */\n                    vcs_password?: string;\n                    vcs?: string;\n                    tfvc_project?: string;\n                };\n            };\n        };\n    };\n    /**\n     * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n     *\n     * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.\n     */\n    \"migrations/get-commit-authors\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** A user ID. Only return users with an ID greater than this ID. */\n                since?: components[\"parameters\"][\"since-user\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"porter-author\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository. */\n    \"migrations/map-commit-author\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                author_id: number;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"porter-author\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The new Git author email. */\n                    email?: string;\n                    /** The new Git author name. */\n                    name?: string;\n                    remote_id?: string;\n                };\n            };\n        };\n    };\n    /** List files larger than 100MB found during the import */\n    \"migrations/get-large-files\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"porter-large-file\"][];\n                };\n            };\n        };\n    };\n    /** You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/). */\n    \"migrations/set-lfs-preference\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"import\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import). */\n                    use_lfs: \"opt_in\" | \"opt_out\";\n                };\n            };\n        };\n    };\n    /**\n     * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/get-repo-installation\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"installation\"];\n                };\n            };\n            301: components[\"responses\"][\"moved_permanently\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response. */\n    \"interactions/get-restrictions-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"interaction-limit-response\"];\n                };\n            };\n        };\n    };\n    /** Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */\n    \"interactions/set-restrictions-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"interaction-limit-response\"];\n                };\n            };\n            /** Conflict */\n            409: unknown;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"interaction-limit\"];\n            };\n        };\n    };\n    /** Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */\n    \"interactions/remove-restrictions-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            /** Conflict */\n            409: unknown;\n        };\n    };\n    /** When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations. */\n    \"repos/list-invitations\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository-invitation\"][];\n                };\n            };\n        };\n    };\n    \"repos/delete-invitation\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** invitation_id parameter */\n                invitation_id: components[\"parameters\"][\"invitation_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    \"repos/update-invitation\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** invitation_id parameter */\n                invitation_id: components[\"parameters\"][\"invitation_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository-invitation\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */\n                    permissions?: \"read\" | \"write\" | \"maintain\" | \"triage\" | \"admin\";\n                };\n            };\n        };\n    };\n    /**\n     * List issues in a repository.\n     *\n     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n     * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n     * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n     * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n     */\n    \"issues/list-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */\n                milestone?: string;\n                /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */\n                assignee?: string;\n                /** The user that created the issue. */\n                creator?: string;\n                /** A user that's mentioned in the issue. */\n                mentioned?: string;\n                /** A list of comma separated label names. Example: `bug,ui,@high` */\n                labels?: components[\"parameters\"][\"labels\"];\n                /** What to sort results by. Can be either `created`, `updated`, `comments`. */\n                sort?: \"created\" | \"updated\" | \"comments\";\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-simple\"][];\n                };\n            };\n            301: components[\"responses\"][\"moved_permanently\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.\n     */\n    \"issues/create\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The title of the issue. */\n                    title: string | number;\n                    /** The contents of the issue. */\n                    body?: string;\n                    /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */\n                    assignee?: string | null;\n                    milestone?: (string | number) | null;\n                    /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */\n                    labels?: (string | {\n                        id?: number;\n                        name?: string;\n                        description?: string | null;\n                        color?: string | null;\n                    })[];\n                    /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */\n                    assignees?: string[];\n                };\n            };\n        };\n    };\n    /** By default, Issue Comments are ordered by ascending ID. */\n    \"issues/list-comments-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n                sort?: components[\"parameters\"][\"sort\"];\n                /** Either `asc` or `desc`. Ignored without the `sort` parameter. */\n                direction?: \"asc\" | \"desc\";\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-comment\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"issues/get-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-comment\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"issues/delete-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    \"issues/update-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-comment\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The contents of the comment. */\n                    body: string;\n                };\n            };\n        };\n    };\n    /** List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments). */\n    \"reactions/list-for-issue-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n            query: {\n                /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */\n                content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /** Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment. */\n    \"reactions/create-for-issue-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** Reaction exists */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n            /** Reaction created */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment. */\n                    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n     *\n     * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).\n     */\n    \"reactions/delete-for-issue-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n                reaction_id: components[\"parameters\"][\"reaction-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    \"issues/list-events-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-event\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"issues/get-event\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                event_id: number;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-event\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n        };\n    };\n    /**\n     * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was\n     * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\n     * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\n     * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\n     * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\n     * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.\n     *\n     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n     * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n     * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n     * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n     */\n    \"issues/get\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue\"];\n                };\n            };\n            301: components[\"responses\"][\"moved_permanently\"];\n            304: components[\"responses\"][\"not_modified\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n        };\n    };\n    /** Issue owners and users with push access can edit an issue. */\n    \"issues/update\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue\"];\n                };\n            };\n            301: components[\"responses\"][\"moved_permanently\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The title of the issue. */\n                    title?: (string | number) | null;\n                    /** The contents of the issue. */\n                    body?: string | null;\n                    /** Login for the user that this issue should be assigned to. **This field is deprecated.** */\n                    assignee?: string | null;\n                    /** State of the issue. Either `open` or `closed`. */\n                    state?: \"open\" | \"closed\";\n                    milestone?: (string | number) | null;\n                    /** Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._ */\n                    labels?: (string | {\n                        id?: number;\n                        name?: string;\n                        description?: string | null;\n                        color?: string | null;\n                    })[];\n                    /** Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */\n                    assignees?: string[];\n                };\n            };\n        };\n    };\n    /** Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced. */\n    \"issues/add-assignees\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-simple\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */\n                    assignees?: string[];\n                };\n            };\n        };\n    };\n    /** Removes one or more assignees from an issue. */\n    \"issues/remove-assignees\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-simple\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */\n                    assignees?: string[];\n                };\n            };\n        };\n    };\n    /** Issue Comments are ordered by ascending ID. */\n    \"issues/list-comments\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n            query: {\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-comment\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n        };\n    };\n    /** This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details. */\n    \"issues/create-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-comment\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The contents of the comment. */\n                    body: string;\n                };\n            };\n        };\n    };\n    \"issues/list-events\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-event-for-issue\"][];\n                };\n            };\n            410: components[\"responses\"][\"gone\"];\n        };\n    };\n    \"issues/list-labels-on-issue\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"][];\n                };\n            };\n            410: components[\"responses\"][\"gone\"];\n        };\n    };\n    /** Removes any previous labels and sets the new labels for an issue. */\n    \"issues/set-labels\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"][];\n                };\n            };\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. */\n                    labels?: string[];\n                };\n            };\n        };\n    };\n    \"issues/add-labels\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"][];\n                };\n            };\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. */\n                    labels: string[];\n                };\n            };\n        };\n    };\n    \"issues/remove-all-labels\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            410: components[\"responses\"][\"gone\"];\n        };\n    };\n    /** Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist. */\n    \"issues/remove-label\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n                name: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n        };\n    };\n    /**\n     * Users with push access can lock an issue or pull request's conversation.\n     *\n     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n     */\n    \"issues/lock\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:\n                     * \\* `off-topic`\n                     * \\* `too heated`\n                     * \\* `resolved`\n                     * \\* `spam`\n                     */\n                    lock_reason?: \"off-topic\" | \"too heated\" | \"resolved\" | \"spam\";\n                } | null;\n            };\n        };\n    };\n    /** Users with push access can unlock an issue's conversation. */\n    \"issues/unlock\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** List the reactions to an [issue](https://docs.github.com/rest/reference/issues). */\n    \"reactions/list-for-issue\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n            query: {\n                /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */\n                content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /** Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue. */\n    \"reactions/create-for-issue\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue. */\n                    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n     *\n     * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).\n     */\n    \"reactions/delete-for-issue\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n                reaction_id: components[\"parameters\"][\"reaction-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    \"issues/list-events-for-timeline\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** issue_number parameter */\n                issue_number: components[\"parameters\"][\"issue_number\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue-event-for-issue\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    \"repos/list-deploy-keys\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deploy-key\"][];\n                };\n            };\n        };\n    };\n    /** You can create a read-only deploy key. */\n    \"repos/create-deploy-key\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deploy-key\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** A name for the key. */\n                    title?: string;\n                    /** The contents of the key. */\n                    key: string;\n                    /**\n                     * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.\n                     *\n                     * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/).\"\n                     */\n                    read_only?: boolean;\n                };\n            };\n        };\n    };\n    \"repos/get-deploy-key\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** key_id parameter */\n                key_id: components[\"parameters\"][\"key_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"deploy-key\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead. */\n    \"repos/delete-deploy-key\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** key_id parameter */\n                key_id: components[\"parameters\"][\"key_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    \"issues/list-labels-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"issues/create-label\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/). */\n                    name: string;\n                    /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */\n                    color?: string;\n                    /** A short description of the label. */\n                    description?: string;\n                };\n            };\n        };\n    };\n    \"issues/get-label\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                name: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"issues/delete-label\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                name: string;\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    \"issues/update-label\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                name: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/). */\n                    new_name?: string;\n                    /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */\n                    color?: string;\n                    /** A short description of the label. */\n                    description?: string;\n                };\n            };\n        };\n    };\n    /** Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language. */\n    \"repos/list-languages\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"language\"];\n                };\n            };\n        };\n    };\n    /**\n     * This method returns the contents of the repository's license file, if one is detected.\n     *\n     * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.\n     */\n    \"licenses/get-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"license-content\"];\n                };\n            };\n        };\n    };\n    \"repos/merge\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Successful Response (The resulting merge commit) */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            /** response */\n            404: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n            /** Merge conflict response */\n            409: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the base branch that the head will be merged into. */\n                    base: string;\n                    /** The head to merge. This can be a branch name or a commit SHA1. */\n                    head: string;\n                    /** Commit message to use for the merge commit. If omitted, a default message will be used. */\n                    commit_message?: string;\n                };\n            };\n        };\n    };\n    \"issues/list-milestones\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** The state of the milestone. Either `open`, `closed`, or `all`. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** What to sort results by. Either `due_on` or `completeness`. */\n                sort?: \"due_on\" | \"completeness\";\n                /** The direction of the sort. Either `asc` or `desc`. */\n                direction?: \"asc\" | \"desc\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"milestone\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"issues/create-milestone\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"milestone\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The title of the milestone. */\n                    title: string;\n                    /** The state of the milestone. Either `open` or `closed`. */\n                    state?: \"open\" | \"closed\";\n                    /** A description of the milestone. */\n                    description?: string;\n                    /** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                    due_on?: string;\n                };\n            };\n        };\n    };\n    \"issues/get-milestone\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** milestone_number parameter */\n                milestone_number: components[\"parameters\"][\"milestone_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"milestone\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"issues/delete-milestone\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** milestone_number parameter */\n                milestone_number: components[\"parameters\"][\"milestone_number\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"issues/update-milestone\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** milestone_number parameter */\n                milestone_number: components[\"parameters\"][\"milestone_number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"milestone\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The title of the milestone. */\n                    title?: string;\n                    /** The state of the milestone. Either `open` or `closed`. */\n                    state?: \"open\" | \"closed\";\n                    /** A description of the milestone. */\n                    description?: string;\n                    /** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                    due_on?: string;\n                };\n            };\n        };\n    };\n    \"issues/list-labels-for-milestone\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** milestone_number parameter */\n                milestone_number: components[\"parameters\"][\"milestone_number\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"label\"][];\n                };\n            };\n        };\n    };\n    /** List all notifications for the current user. */\n    \"activity/list-repo-notifications-for-authenticated-user\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** If `true`, show notifications marked as read. */\n                all?: components[\"parameters\"][\"all\"];\n                /** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n                participating?: components[\"parameters\"][\"participating\"];\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                before?: components[\"parameters\"][\"before\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"thread\"][];\n                };\n            };\n        };\n    };\n    /** Marks all notifications in a repository as \"read\" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */\n    \"activity/mark-repo-notifications-as-read\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            202: unknown;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. */\n                    last_read_at?: string;\n                };\n            };\n        };\n    };\n    \"repos/get-pages\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"page\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Updates information for a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages). */\n    \"repos/update-information-about-pages-site\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            400: components[\"responses\"][\"bad_request\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/).\" */\n                    cname?: string | null;\n                    /** Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan. */\n                    public?: boolean;\n                    source: Partial<\"gh-pages\" | \"master\" | \"master /docs\"> & Partial<{\n                        /** The repository branch used to publish your site's source files. */\n                        branch: string;\n                        /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. */\n                        path: \"/\" | \"/docs\";\n                    }>;\n                };\n            };\n        };\n    };\n    /** Configures a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\" */\n    \"repos/create-pages-site\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"page\"];\n                };\n            };\n            409: components[\"responses\"][\"conflict\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The source branch and directory used to publish your Pages site. */\n                    source: {\n                        /** The repository branch used to publish your site's source files. */\n                        branch: string;\n                        /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/` */\n                        path?: \"/\" | \"/docs\";\n                    };\n                };\n            };\n        };\n    };\n    \"repos/delete-pages-site\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"repos/list-pages-builds\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"page-build\"][];\n                };\n            };\n        };\n    };\n    /**\n     * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n     *\n     * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.\n     */\n    \"repos/request-pages-build\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"page-build-status\"];\n                };\n            };\n        };\n    };\n    \"repos/get-latest-pages-build\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"page-build\"];\n                };\n            };\n        };\n    };\n    \"repos/get-pages-build\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                build_id: number;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"page-build\"];\n                };\n            };\n        };\n    };\n    /** Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n    \"projects/list-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project\"][];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n    };\n    /** Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */\n    \"projects/create-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project\"];\n                };\n            };\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            410: components[\"responses\"][\"gone\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the project. */\n                    name: string;\n                    /** The description of the project. */\n                    body?: string;\n                };\n            };\n        };\n    };\n    /** Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */\n    \"pulls/list\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Either `open`, `closed`, or `all` to filter by state. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */\n                head?: string;\n                /** Filter pulls by base branch name. Example: `gh-pages`. */\n                base?: string;\n                /** What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month). */\n                sort?: \"created\" | \"updated\" | \"popularity\" | \"long-running\";\n                /** The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */\n                direction?: \"asc\" | \"desc\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-simple\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n     *\n     * You can create a new pull request.\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     */\n    \"pulls/create\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The title of the new pull request. */\n                    title?: string;\n                    /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */\n                    head: string;\n                    /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */\n                    base: string;\n                    /** The contents of the pull request. */\n                    body?: string;\n                    /** Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */\n                    maintainer_can_modify?: boolean;\n                    /** Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more. */\n                    draft?: boolean;\n                    issue?: number;\n                };\n            };\n        };\n    };\n    /** Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. */\n    \"pulls/list-review-comments-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n                sort?: components[\"parameters\"][\"sort\"];\n                /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */\n                direction?: \"asc\" | \"desc\";\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review-comment\"][];\n                };\n            };\n        };\n    };\n    /** Provides details for a review comment. */\n    \"pulls/get-review-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review-comment\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Deletes a review comment. */\n    \"pulls/delete-review-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Enables you to edit a review comment. */\n    \"pulls/update-review-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review-comment\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The text of the reply to the review comment. */\n                    body: string;\n                };\n            };\n        };\n    };\n    /** List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments). */\n    \"reactions/list-for-pull-request-review-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n            query: {\n                /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */\n                content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /** Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment. */\n    \"reactions/create-for-pull-request-review-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** Reaction exists */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n            /** Reaction created */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment. */\n                    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n     *\n     * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).\n     */\n    \"reactions/delete-for-pull-request-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n                reaction_id: components[\"parameters\"][\"reaction-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Lists details of a pull request by providing its number.\n     *\n     * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n     *\n     * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n     *\n     * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n     *\n     * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n     * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n     * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n     *\n     * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n     */\n    \"pulls/get\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            404: components[\"responses\"][\"not_found\"];\n            500: components[\"responses\"][\"internal_error\"];\n        };\n    };\n    /**\n     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n     */\n    \"pulls/update\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The title of the pull request. */\n                    title?: string;\n                    /** The contents of the pull request. */\n                    body?: string;\n                    /** State of this Pull Request. Either `open` or `closed`. */\n                    state?: \"open\" | \"closed\";\n                    /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */\n                    base?: string;\n                    /** Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */\n                    maintainer_can_modify?: boolean;\n                };\n            };\n        };\n    };\n    /** Lists all review comments for a pull request. By default, review comments are in ascending order by ID. */\n    \"pulls/list-review-comments\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n            query: {\n                /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n                sort?: components[\"parameters\"][\"sort\"];\n                /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */\n                direction?: \"asc\" | \"desc\";\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review-comment\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.\n     *\n     * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).\n     *\n     * **Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     */\n    \"pulls/create-review-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review-comment\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The text of the review comment. */\n                    body: string;\n                    /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */\n                    commit_id?: string;\n                    /** The relative path to the file that necessitates a comment. */\n                    path?: string;\n                    /** **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above. */\n                    position?: number;\n                    /** **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation. */\n                    side?: \"LEFT\" | \"RIGHT\";\n                    /** **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */\n                    line?: number;\n                    /** **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. */\n                    start_line?: number;\n                    /** **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context. */\n                    start_side?: \"LEFT\" | \"RIGHT\" | \"side\";\n                    in_reply_to?: number;\n                };\n            };\n        };\n    };\n    /**\n     * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     */\n    \"pulls/create-reply-for-review-comment\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n                /** comment_id parameter */\n                comment_id: components[\"parameters\"][\"comment_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review-comment\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The text of the review comment. */\n                    body: string;\n                };\n            };\n        };\n    };\n    /** Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint. */\n    \"pulls/list-commits\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit\"][];\n                };\n            };\n        };\n    };\n    /** **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. */\n    \"pulls/list-files\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"diff-entry\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n            500: components[\"responses\"][\"internal_error\"];\n        };\n    };\n    \"pulls/check-if-merged\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** Response if pull request has been merged */\n            204: never;\n            /** Response if pull request has not been merged */\n            404: unknown;\n        };\n    };\n    /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details. */\n    \"pulls/merge\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** Response if merge was successful */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-merge-result\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            /** Response if merge cannot be performed */\n            405: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n            /** Response if sha was provided and pull request head did not match */\n            409: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Title for the automatic commit message. */\n                    commit_title?: string;\n                    /** Extra detail to append to automatic commit message. */\n                    commit_message?: string;\n                    /** SHA that pull request head must match to allow merge. */\n                    sha?: string;\n                    /** Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`. */\n                    merge_method?: \"merge\" | \"squash\" | \"rebase\";\n                } | null;\n            };\n        };\n    };\n    \"pulls/list-requested-reviewers\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review-request\"];\n                };\n            };\n        };\n    };\n    /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details. */\n    \"pulls/request-reviewers\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-simple\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            /** Response if user is not a collaborator */\n            422: unknown;\n        };\n        requestBody: {\n            content: {\n                \"application/json\": Partial<{\n                    [key: string]: any;\n                }> & Partial<{\n                    [key: string]: any;\n                }>;\n            };\n        };\n    };\n    \"pulls/remove-requested-reviewers\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: unknown;\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** An array of user `login`s that will be removed. */\n                    reviewers: string[];\n                    /** An array of team `slug`s that will be removed. */\n                    team_reviewers?: string[];\n                };\n            };\n        };\n    };\n    /** The list of reviews returns in chronological order. */\n    \"pulls/list-reviews\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** The list of reviews returns in chronological order. */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review\"][];\n                };\n            };\n        };\n    };\n    /**\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     *\n     * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.\n     *\n     * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.\n     *\n     * The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n     */\n    \"pulls/create-review\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */\n                    commit_id?: string;\n                    /** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */\n                    body?: string;\n                    /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready. */\n                    event?: \"APPROVE\" | \"REQUEST_CHANGES\" | \"COMMENT\";\n                    /** Use the following table to specify the location, destination, and contents of the draft review comment. */\n                    comments?: {\n                        /** The relative path to the file that necessitates a review comment. */\n                        path: string;\n                        /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */\n                        position?: number;\n                        /** Text of the review comment. */\n                        body: string;\n                        line?: number;\n                        side?: string;\n                        start_line?: number;\n                        start_side?: string;\n                    }[];\n                };\n            };\n        };\n    };\n    \"pulls/get-review\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n                /** review_id parameter */\n                review_id: components[\"parameters\"][\"review_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Update the review summary comment with new text. */\n    \"pulls/update-review\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n                /** review_id parameter */\n                review_id: components[\"parameters\"][\"review_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The body text of the pull request review. */\n                    body: string;\n                };\n            };\n        };\n    };\n    \"pulls/delete-pending-review\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n                /** review_id parameter */\n                review_id: components[\"parameters\"][\"review_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n    };\n    /** List comments for a specific pull request review. */\n    \"pulls/list-comments-for-review\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n                /** review_id parameter */\n                review_id: components[\"parameters\"][\"review_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"review-comment\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. */\n    \"pulls/dismiss-review\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n                /** review_id parameter */\n                review_id: components[\"parameters\"][\"review_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The message for the pull request review dismissal */\n                    message: string;\n                    event?: string;\n                };\n            };\n        };\n    };\n    \"pulls/submit-review\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n                /** review_id parameter */\n                review_id: components[\"parameters\"][\"review_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"pull-request-review\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The body text of the pull request review */\n                    body?: string;\n                    /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action. */\n                    event: \"APPROVE\" | \"REQUEST_CHANGES\" | \"COMMENT\";\n                };\n            };\n        };\n    };\n    /** Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. */\n    \"pulls/update-branch\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                pull_number: components[\"parameters\"][\"pull-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            202: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        url?: string;\n                    };\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/rest/reference/repos#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */\n                    expected_head_sha?: string;\n                } | null;\n            };\n        };\n    };\n    /**\n     * Gets the preferred README for a repository.\n     *\n     * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.\n     */\n    \"repos/get-readme\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n                ref?: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"content-file\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).\n     *\n     * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.\n     */\n    \"repos/list-releases\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Users with push access to the repository can create a release.\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     */\n    \"repos/create-release\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the tag. */\n                    tag_name: string;\n                    /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */\n                    target_commitish?: string;\n                    /** The name of the release. */\n                    name?: string;\n                    /** Text describing the contents of the tag. */\n                    body?: string;\n                    /** `true` to create a draft (unpublished) release, `false` to create a published one. */\n                    draft?: boolean;\n                    /** `true` to identify the release as a prerelease. `false` to identify the release as a full release. */\n                    prerelease?: boolean;\n                };\n            };\n        };\n    };\n    /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */\n    \"repos/get-release-asset\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** asset_id parameter */\n                asset_id: components[\"parameters\"][\"asset_id\"];\n            };\n        };\n        responses: {\n            /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release-asset\"];\n                };\n            };\n            302: components[\"responses\"][\"found\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    \"repos/delete-release-asset\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** asset_id parameter */\n                asset_id: components[\"parameters\"][\"asset_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Users with push access to the repository can edit a release asset. */\n    \"repos/update-release-asset\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** asset_id parameter */\n                asset_id: components[\"parameters\"][\"asset_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release-asset\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The file name of the asset. */\n                    name?: string;\n                    /** An alternate short description of the asset. Used in place of the filename. */\n                    label?: string;\n                    state?: string;\n                };\n            };\n        };\n    };\n    /**\n     * View the latest published full release for the repository.\n     *\n     * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.\n     */\n    \"repos/get-latest-release\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release\"];\n                };\n            };\n        };\n    };\n    /** Get a published release with the specified tag. */\n    \"repos/get-release-by-tag\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** tag+ parameter */\n                tag: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */\n    \"repos/get-release\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** release_id parameter */\n                release_id: components[\"parameters\"][\"release_id\"];\n            };\n        };\n        responses: {\n            /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Users with push access to the repository can delete a release. */\n    \"repos/delete-release\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** release_id parameter */\n                release_id: components[\"parameters\"][\"release_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Users with push access to the repository can edit a release. */\n    \"repos/update-release\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** release_id parameter */\n                release_id: components[\"parameters\"][\"release_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the tag. */\n                    tag_name?: string;\n                    /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */\n                    target_commitish?: string;\n                    /** The name of the release. */\n                    name?: string;\n                    /** Text describing the contents of the tag. */\n                    body?: string;\n                    /** `true` makes the release a draft, and `false` publishes the release. */\n                    draft?: boolean;\n                    /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */\n                    prerelease?: boolean;\n                };\n            };\n        };\n    };\n    \"repos/list-release-assets\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** release_id parameter */\n                release_id: components[\"parameters\"][\"release_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release-asset\"][];\n                };\n            };\n        };\n    };\n    /**\n     * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\n     * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.\n     *\n     * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n     *\n     * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:\n     *\n     * `application/zip`\n     *\n     * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\n     * you'll still need to pass your authentication to be able to upload an asset.\n     *\n     * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n     *\n     * **Notes:**\n     * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)\"\n     * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).\n     * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.\n     */\n    \"repos/upload-release-asset\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** release_id parameter */\n                release_id: components[\"parameters\"][\"release_id\"];\n            };\n            query: {\n                name?: string;\n                label?: string;\n            };\n        };\n        responses: {\n            /** Response for successful upload */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"release-asset\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"*/*\": string;\n            };\n        };\n    };\n    /**\n     * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n     *\n     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.\n     */\n    \"secret-scanning/list-alerts-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n                state?: \"open\" | \"resolved\";\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n            };\n        };\n        responses: {\n            /** Response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"secret-scanning-alert\"][];\n                };\n            };\n            /** Repository is public or secret scanning is disabled for the repository */\n            404: unknown;\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /**\n     * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n     *\n     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.\n     */\n    \"secret-scanning/get-alert\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The security alert number, found at the end of the security alert's URL. */\n                alert_number: components[\"parameters\"][\"alert_number\"];\n            };\n        };\n        responses: {\n            /** Default response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"secret-scanning-alert\"];\n                };\n            };\n            /** Repository is public, or secret scanning is disabled for the repository, or the resource is not found */\n            404: unknown;\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /**\n     * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n     *\n     * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.\n     */\n    \"secret-scanning/update-alert\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                /** The security alert number, found at the end of the security alert's URL. */\n                alert_number: components[\"parameters\"][\"alert_number\"];\n            };\n        };\n        responses: {\n            /** Default response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"secret-scanning-alert\"];\n                };\n            };\n            /** Repository is public, or secret scanning is disabled for the repository, or the resource is not found */\n            404: unknown;\n            /** State does not match the resolution */\n            422: unknown;\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    state: components[\"schemas\"][\"secret-scanning-alert-state\"];\n                    resolution?: components[\"schemas\"][\"secret-scanning-alert-resolution\"];\n                };\n            };\n        };\n    };\n    /**\n     * Lists the people that have starred the repository.\n     *\n     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n     */\n    \"activity/list-stargazers-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                    \"application/vnd.github.v3.star+json\": components[\"schemas\"][\"stargazer\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */\n    \"repos/get-code-frequency-stats\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-frequency-stat\"][];\n                };\n            };\n        };\n    };\n    /** Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`. */\n    \"repos/get-commit-activity-stats\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"commit-activity\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n     *\n     * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n     * *   `a` - Number of additions\n     * *   `d` - Number of deletions\n     * *   `c` - Number of commits\n     */\n    \"repos/get-contributors-stats\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /**\n             * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n             * *   `a` - Number of additions\n             * *   `d` - Number of deletions\n             * *   `c` - Number of commits\n             */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"contributor-activity\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n     *\n     * The array order is oldest week (index 0) to most recent week.\n     */\n    \"repos/get-participation-stats\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** The array order is oldest week (index 0) to most recent week. */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"participation-stats\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Each array contains the day number, hour number, and number of commits:\n     *\n     * *   `0-6`: Sunday - Saturday\n     * *   `0-23`: Hour of day\n     * *   Number of commits\n     *\n     * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.\n     */\n    \"repos/get-punch-card-stats\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"code-frequency-stat\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Users with push access in a repository can create commit statuses for a given SHA.\n     *\n     * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.\n     */\n    \"repos/create-commit-status\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                sha: string;\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"status\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The state of the status. Can be one of `error`, `failure`, `pending`, or `success`. */\n                    state: \"error\" | \"failure\" | \"pending\" | \"success\";\n                    /**\n                     * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.\n                     * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:\n                     * `http://ci.example.com/user/repo/build/sha`\n                     */\n                    target_url?: string;\n                    /** A short description of the status. */\n                    description?: string;\n                    /** A string label to differentiate this status from the status of other systems. This field is case-insensitive. */\n                    context?: string;\n                };\n            };\n        };\n    };\n    /** Lists the people watching the specified repository. */\n    \"activity/list-watchers-for-repo\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n        };\n    };\n    \"activity/get-repo-subscription\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Response if you subscribe to the repository */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository-subscription\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            /** Response if you don't subscribe to the repository */\n            404: unknown;\n        };\n    };\n    /** If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely. */\n    \"activity/set-repo-subscription\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository-subscription\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Determines if notifications should be received from this repository. */\n                    subscribed?: boolean;\n                    /** Determines if all notifications should be blocked from this repository. */\n                    ignored?: boolean;\n                };\n            };\n        };\n    };\n    /** This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription). */\n    \"activity/delete-repo-subscription\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    \"repos/list-tags\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"tag\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n     * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\n     * the `Location` header to make a second `GET` request.\n     * **Note**: For private repositories, these links are temporary and expire after five minutes.\n     */\n    \"repos/download-tarball-archive\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                ref: string;\n            };\n        };\n        responses: {\n            /** response */\n            302: never;\n        };\n    };\n    \"repos/list-teams\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n        };\n    };\n    \"repos/get-all-topics\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"topic\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    \"repos/replace-all-topics\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"topic\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. */\n                    names: string[];\n                };\n            };\n        };\n    };\n    /** Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */\n    \"repos/get-clones\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Must be one of: `day`, `week`. */\n                per?: components[\"parameters\"][\"per\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"clone-traffic\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Get the top 10 popular contents over the last 14 days. */\n    \"repos/get-top-paths\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"content-traffic\"][];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Get the top 10 referrers over the last 14 days. */\n    \"repos/get-top-referrers\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"referrer-traffic\"][];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */\n    \"repos/get-views\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n            query: {\n                /** Must be one of: `day`, `week`. */\n                per?: components[\"parameters\"][\"per\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"view-traffic\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/). */\n    \"repos/transfer\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            202: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The username or organization name the repository will be transferred to. */\n                    new_owner: string;\n                    /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */\n                    team_ids?: number[];\n                };\n            };\n        };\n    };\n    /** Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\". */\n    \"repos/check-vulnerability-alerts\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Response if repository is enabled with vulnerability alerts */\n            204: never;\n            /** Response if repository is not enabled with vulnerability alerts */\n            404: unknown;\n        };\n    };\n    /** Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\". */\n    \"repos/enable-vulnerability-alerts\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /** Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\". */\n    \"repos/disable-vulnerability-alerts\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n     * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\n     * the `Location` header to make a second `GET` request.\n     * **Note**: For private repositories, these links are temporary and expire after five minutes.\n     */\n    \"repos/download-zipball-archive\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n                ref: string;\n            };\n        };\n        responses: {\n            /** response */\n            302: never;\n        };\n    };\n    /**\n     * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n     *\n     * **OAuth scope requirements**\n     *\n     * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n     *\n     * *   `public_repo` scope or `repo` scope to create a public repository\n     * *   `repo` scope to create a private repository\n     */\n    \"repos/create-using-template\": {\n        parameters: {\n            path: {\n                template_owner: string;\n                template_repo: string;\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */\n                    owner?: string;\n                    /** The name of the new repository. */\n                    name: string;\n                    /** A short description of the new repository. */\n                    description?: string;\n                    /** Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`. */\n                    include_all_branches?: boolean;\n                    /** Either `true` to create a new private repository or `false` to create a new public one. */\n                    private?: boolean;\n                };\n            };\n        };\n    };\n    /**\n     * Lists all public repositories in the order that they were created.\n     *\n     * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.\n     */\n    \"repos/list-public\": {\n        parameters: {\n            query: {\n                /** A repository ID. Only return repositories with an ID greater than this ID. */\n                since?: components[\"parameters\"][\"since-repo\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {\n                    Link?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n    \"enterprise-admin/list-provisioned-groups-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n            query: {\n                /** Used for pagination: the index of the first result to return. */\n                startIndex?: components[\"parameters\"][\"start_index\"];\n                /** Used for pagination: the number of results to return. */\n                count?: components[\"parameters\"][\"count\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-group-list-enterprise\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n     *\n     * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.\n     */\n    \"enterprise-admin/provision-and-invite-enterprise-group\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-enterprise-group\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The SCIM schema URIs. */\n                    schemas: string[];\n                    /** The name of the SCIM group. This must match the GitHub organization that the group maps to. */\n                    displayName: string;\n                    members?: {\n                        /** The SCIM user ID for a user. */\n                        value: string;\n                    }[];\n                };\n            };\n        };\n    };\n    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n    \"enterprise-admin/get-provisioning-information-for-enterprise-group\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Identifier generated by the GitHub SCIM endpoint. */\n                scim_group_id: components[\"parameters\"][\"scim_group_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-enterprise-group\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n     *\n     * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.\n     */\n    \"enterprise-admin/set-information-for-provisioned-enterprise-group\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Identifier generated by the GitHub SCIM endpoint. */\n                scim_group_id: components[\"parameters\"][\"scim_group_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-enterprise-group\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The SCIM schema URIs. */\n                    schemas: string[];\n                    /** The name of the SCIM group. This must match the GitHub organization that the group maps to. */\n                    displayName: string;\n                    members?: {\n                        /** The SCIM user ID for a user. */\n                        value: string;\n                    }[];\n                };\n            };\n        };\n    };\n    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n    \"enterprise-admin/delete-scim-group-from-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Identifier generated by the GitHub SCIM endpoint. */\n                scim_group_id: components[\"parameters\"][\"scim_group_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n     *\n     * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n     */\n    \"enterprise-admin/update-attribute-for-enterprise-group\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** Identifier generated by the GitHub SCIM endpoint. */\n                scim_group_id: components[\"parameters\"][\"scim_group_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-enterprise-group\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The SCIM schema URIs. */\n                    schemas: string[];\n                    /** Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2). */\n                    Operations: {\n                        [key: string]: any;\n                    }[];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n     *\n     * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.\n     *\n     * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:\n     *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.\n     *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).\n     *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.\n     *\n     * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:\n     *\n     * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.\n     *\n     * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.\n     *\n     * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:\n     *    - If the user signs in, their GitHub account is linked to this entry.\n     *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.\n     */\n    \"enterprise-admin/list-provisioned-identities-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n            query: {\n                /** Used for pagination: the index of the first result to return. */\n                startIndex?: components[\"parameters\"][\"start_index\"];\n                /** Used for pagination: the number of results to return. */\n                count?: components[\"parameters\"][\"count\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-user-list-enterprise\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n     *\n     * Provision enterprise membership for a user, and send organization invitation emails to the email address.\n     *\n     * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.\n     */\n    \"enterprise-admin/provision-and-invite-enterprise-user\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-enterprise-user\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The SCIM schema URIs. */\n                    schemas: string[];\n                    /** The username for the user. */\n                    userName: string;\n                    name: {\n                        /** The first name of the user. */\n                        givenName: string;\n                        /** The last name of the user. */\n                        familyName: string;\n                    };\n                    /** List of user emails. */\n                    emails: {\n                        /** The email address. */\n                        value: string;\n                        /** The type of email address. */\n                        type: string;\n                        /** Whether this email address is the primary address. */\n                        primary: boolean;\n                    }[];\n                    /** List of SCIM group IDs the user is a member of. */\n                    groups?: {\n                        value?: string;\n                    }[];\n                };\n            };\n        };\n    };\n    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n    \"enterprise-admin/get-provisioning-information-for-enterprise-user\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** scim_user_id parameter */\n                scim_user_id: components[\"parameters\"][\"scim_user_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-enterprise-user\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n     *\n     * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.\n     *\n     * You must at least provide the required values for the user: `userName`, `name`, and `emails`.\n     *\n     * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.\n     */\n    \"enterprise-admin/set-information-for-provisioned-enterprise-user\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** scim_user_id parameter */\n                scim_user_id: components[\"parameters\"][\"scim_user_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-enterprise-user\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The SCIM schema URIs. */\n                    schemas: string[];\n                    /** The username for the user. */\n                    userName: string;\n                    name: {\n                        /** The first name of the user. */\n                        givenName: string;\n                        /** The last name of the user. */\n                        familyName: string;\n                    };\n                    /** List of user emails. */\n                    emails: {\n                        /** The email address. */\n                        value: string;\n                        /** The type of email address. */\n                        type: string;\n                        /** Whether this email address is the primary address. */\n                        primary: boolean;\n                    }[];\n                    /** List of SCIM group IDs the user is a member of. */\n                    groups?: {\n                        value?: string;\n                    }[];\n                };\n            };\n        };\n    };\n    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */\n    \"enterprise-admin/delete-user-from-enterprise\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** scim_user_id parameter */\n                scim_user_id: components[\"parameters\"][\"scim_user_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.\n     *\n     * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n     *\n     * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.\n     *\n     * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.\n     *\n     * ```\n     * {\n     *   \"Operations\":[{\n     *     \"op\":\"replace\",\n     *     \"value\":{\n     *       \"active\":false\n     *     }\n     *   }]\n     * }\n     * ```\n     */\n    \"enterprise-admin/update-attribute-for-enterprise-user\": {\n        parameters: {\n            path: {\n                /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n                enterprise: components[\"parameters\"][\"enterprise\"];\n                /** scim_user_id parameter */\n                scim_user_id: components[\"parameters\"][\"scim_user_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"scim-enterprise-user\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The SCIM schema URIs. */\n                    schemas: string[];\n                    /** Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2). */\n                    Operations: {\n                        [key: string]: any;\n                    }[];\n                };\n            };\n        };\n    };\n    /**\n     * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.\n     *\n     * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:\n     *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.\n     *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).\n     *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.\n     *\n     * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:\n     *\n     * 1. The user is granted access by the IdP and is not a member of the GitHub organization.\n     *\n     * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.\n     *\n     * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:\n     *    - If the user signs in, their GitHub account is linked to this entry.\n     *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.\n     */\n    \"scim/list-provisioned-identities\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Used for pagination: the index of the first result to return. */\n                startIndex?: number;\n                /** Used for pagination: the number of results to return. */\n                count?: number;\n                /**\n                 * Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:\n                 *\n                 * `?filter=userName%20eq%20\\\"Octocat\\\"`.\n                 *\n                 * To filter results for the identity with the email `octocat@github.com`, you would use this query:\n                 *\n                 * `?filter=emails%20eq%20\\\"octocat@github.com\\\"`.\n                 */\n                filter?: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/scim+json\": components[\"schemas\"][\"scim-user-list\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            400: components[\"responses\"][\"scim_bad_request\"];\n            403: components[\"responses\"][\"scim_forbidden\"];\n            404: components[\"responses\"][\"scim_not_found\"];\n        };\n    };\n    /** Provision organization membership for a user, and send an activation email to the email address. */\n    \"scim/provision-and-invite-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/scim+json\": components[\"schemas\"][\"scim-user\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            400: components[\"responses\"][\"scim_bad_request\"];\n            403: components[\"responses\"][\"scim_forbidden\"];\n            404: components[\"responses\"][\"scim_not_found\"];\n            409: components[\"responses\"][\"scim_conflict\"];\n            500: components[\"responses\"][\"scim_internal_error\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Configured by the admin. Could be an email, login, or username */\n                    userName: string;\n                    /** The name of the user, suitable for display to end-users */\n                    displayName?: string;\n                    name: {\n                        givenName: string;\n                        familyName: string;\n                        formatted?: string;\n                    };\n                    /** user emails */\n                    emails: {\n                        value: string;\n                        primary?: boolean;\n                        type?: string;\n                    }[];\n                    schemas?: string[];\n                    externalId?: string;\n                    groups?: string[];\n                    active?: boolean;\n                };\n            };\n        };\n    };\n    \"scim/get-provisioning-information-for-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** scim_user_id parameter */\n                scim_user_id: components[\"parameters\"][\"scim_user_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/scim+json\": components[\"schemas\"][\"scim-user\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"scim_forbidden\"];\n            404: components[\"responses\"][\"scim_not_found\"];\n        };\n    };\n    /**\n     * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.\n     *\n     * You must at least provide the required values for the user: `userName`, `name`, and `emails`.\n     *\n     * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.\n     */\n    \"scim/set-information-for-provisioned-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** scim_user_id parameter */\n                scim_user_id: components[\"parameters\"][\"scim_user_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/scim+json\": components[\"schemas\"][\"scim-user\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"scim_forbidden\"];\n            404: components[\"responses\"][\"scim_not_found\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    schemas?: string[];\n                    /** The name of the user, suitable for display to end-users */\n                    displayName?: string;\n                    externalId?: string;\n                    groups?: string[];\n                    active?: boolean;\n                    /** Configured by the admin. Could be an email, login, or username */\n                    userName: string;\n                    name: {\n                        givenName: string;\n                        familyName: string;\n                        formatted?: string;\n                    };\n                    /** user emails */\n                    emails: {\n                        type?: string;\n                        value: string;\n                        primary?: boolean;\n                    }[];\n                };\n            };\n        };\n    };\n    \"scim/delete-user-from-org\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** scim_user_id parameter */\n                scim_user_id: components[\"parameters\"][\"scim_user_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"scim_forbidden\"];\n            404: components[\"responses\"][\"scim_not_found\"];\n        };\n    };\n    /**\n     * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n     *\n     * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.\n     *\n     * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.\n     *\n     * ```\n     * {\n     *   \"Operations\":[{\n     *     \"op\":\"replace\",\n     *     \"value\":{\n     *       \"active\":false\n     *     }\n     *   }]\n     * }\n     * ```\n     */\n    \"scim/update-attribute-for-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n                /** scim_user_id parameter */\n                scim_user_id: components[\"parameters\"][\"scim_user_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/scim+json\": components[\"schemas\"][\"scim-user\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            400: components[\"responses\"][\"scim_bad_request\"];\n            403: components[\"responses\"][\"scim_forbidden\"];\n            404: components[\"responses\"][\"scim_not_found\"];\n            /** Too many requests */\n            429: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"basic-error\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    schemas?: string[];\n                    /** Set of operations to be performed */\n                    Operations: {\n                        op: \"add\" | \"remove\" | \"replace\";\n                        path?: string;\n                        value?: {\n                            active?: boolean | null;\n                            userName?: string | null;\n                            externalId?: string | null;\n                            givenName?: string | null;\n                            familyName?: string | null;\n                        } | {\n                            value?: string;\n                            primary?: boolean;\n                        }[] | string;\n                    }[];\n                };\n            };\n        };\n    };\n    /**\n     * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n     *\n     * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n     *\n     * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n     *\n     * `q=addClass+in:file+language:js+repo:jquery/jquery`\n     *\n     * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n     *\n     * #### Considerations for code search\n     *\n     * Due to the complexity of searching code, there are a few restrictions on how searches are performed:\n     *\n     * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n     * *   Only files smaller than 384 KB are searchable.\n     * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\n     * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n     */\n    \"search/code\": {\n        parameters: {\n            query: {\n                /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching code](https://help.github.com/articles/searching-code/)\" for a detailed list of qualifiers. */\n                q: string;\n                /** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n                sort?: \"indexed\";\n                /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n                order?: components[\"parameters\"][\"order\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        incomplete_results: boolean;\n                        items: components[\"schemas\"][\"code-search-result-item\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /**\n     * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n     *\n     * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\n     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n     *\n     * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n     *\n     * `q=repo:octocat/Spoon-Knife+css`\n     */\n    \"search/commits\": {\n        parameters: {\n            query: {\n                /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching commits](https://help.github.com/articles/searching-commits/)\" for a detailed list of qualifiers. */\n                q: string;\n                /** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n                sort?: \"author-date\" | \"committer-date\";\n                /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n                order?: components[\"parameters\"][\"order\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        incomplete_results: boolean;\n                        items: components[\"schemas\"][\"commit-search-result-item\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n     *\n     * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\n     * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n     *\n     * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n     *\n     * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n     *\n     * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n     *\n     * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see \"[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).\"\n     */\n    \"search/issues-and-pull-requests\": {\n        parameters: {\n            query: {\n                /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers. */\n                q: string;\n                /** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n                sort?: \"comments\" | \"reactions\" | \"reactions-+1\" | \"reactions--1\" | \"reactions-smile\" | \"reactions-thinking_face\" | \"reactions-heart\" | \"reactions-tada\" | \"interactions\" | \"created\" | \"updated\";\n                /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n                order?: components[\"parameters\"][\"order\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        incomplete_results: boolean;\n                        items: components[\"schemas\"][\"issue-search-result-item\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /**\n     * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n     *\n     * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n     *\n     * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n     *\n     * `q=bug+defect+enhancement&repository_id=64778136`\n     *\n     * The labels that best match the query appear first in the search results.\n     */\n    \"search/labels\": {\n        parameters: {\n            query: {\n                /** The id of the repository. */\n                repository_id: number;\n                /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n                q: string;\n                /** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n                sort?: \"created\" | \"updated\";\n                /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n                order?: components[\"parameters\"][\"order\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        incomplete_results: boolean;\n                        items: components[\"schemas\"][\"label-search-result-item\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n     *\n     * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n     *\n     * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n     *\n     * `q=tetris+language:assembly&sort=stars&order=desc`\n     *\n     * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.\n     *\n     * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:\n     *\n     * `q=topic:ruby+topic:rails`\n     */\n    \"search/repos\": {\n        parameters: {\n            query: {\n                /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers. */\n                q: string;\n                /** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n                sort?: \"stars\" | \"forks\" | \"help-wanted-issues\" | \"updated\";\n                /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n                order?: components[\"parameters\"][\"order\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        incomplete_results: boolean;\n                        items: components[\"schemas\"][\"repo-search-result-item\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            422: components[\"responses\"][\"validation_failed\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /**\n     * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n     *\n     * When searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n     *\n     * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n     *\n     * `q=ruby+is:featured`\n     *\n     * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.\n     */\n    \"search/topics\": {\n        parameters: {\n            query: {\n                /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n                q: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        incomplete_results: boolean;\n                        items: components[\"schemas\"][\"topic-search-result-item\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n     *\n     * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n     *\n     * For example, if you're looking for a list of popular users, you might try this query:\n     *\n     * `q=tom+repos:%3E42+followers:%3E1000`\n     *\n     * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.\n     */\n    \"search/users\": {\n        parameters: {\n            query: {\n                /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching users](https://help.github.com/articles/searching-users/)\" for a detailed list of qualifiers. */\n                q: string;\n                /** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n                sort?: \"followers\" | \"repositories\" | \"joined\";\n                /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n                order?: components[\"parameters\"][\"order\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        incomplete_results: boolean;\n                        items: components[\"schemas\"][\"user-search-result-item\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            422: components[\"responses\"][\"validation_failed\"];\n            503: components[\"responses\"][\"service_unavailable\"];\n        };\n    };\n    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint. */\n    \"teams/get-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-full\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.\n     *\n     * To delete a team, the authenticated user must be an organization owner or team maintainer.\n     *\n     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.\n     */\n    \"teams/delete-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.\n     *\n     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n     *\n     * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.\n     */\n    \"teams/update-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-full\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the team. */\n                    name: string;\n                    /** The description of the team. */\n                    description?: string;\n                    /**\n                     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:\n                     * **For a non-nested team:**\n                     * \\* `secret` - only visible to organization owners and members of this team.\n                     * \\* `closed` - visible to all members of this organization.\n                     * **For a parent or child team:**\n                     * \\* `closed` - visible to all members of this organization.\n                     */\n                    privacy?: \"secret\" | \"closed\";\n                    /**\n                     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:\n                     * \\* `pull` - team members can pull, but not push to or administer newly-added repositories.\n                     * \\* `push` - team members can pull and push, but not administer newly-added repositories.\n                     * \\* `admin` - team members can pull, push and administer newly-added repositories.\n                     */\n                    permission?: \"pull\" | \"push\" | \"admin\";\n                    /** The ID of a team to set as the parent team. */\n                    parent_team_id?: number | null;\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.\n     *\n     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"teams/list-discussions-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n            query: {\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion\"][];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.\n     *\n     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     */\n    \"teams/create-discussion-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The discussion post's title. */\n                    title: string;\n                    /** The discussion post's body text. */\n                    body: string;\n                    /** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */\n                    private?: boolean;\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.\n     *\n     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"teams/get-discussion-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.\n     *\n     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"teams/delete-discussion-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.\n     *\n     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"teams/update-discussion-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The discussion post's title. */\n                    title?: string;\n                    /** The discussion post's body text. */\n                    body?: string;\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.\n     *\n     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"teams/list-discussion-comments-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n            query: {\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion-comment\"][];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.\n     *\n     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     *\n     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n     */\n    \"teams/create-discussion-comment-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion-comment\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The discussion comment's body text. */\n                    body: string;\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.\n     *\n     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"teams/get-discussion-comment-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion-comment\"];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.\n     *\n     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"teams/delete-discussion-comment-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.\n     *\n     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"teams/update-discussion-comment-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-discussion-comment\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The discussion comment's body text. */\n                    body: string;\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n     *\n     * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"reactions/list-for-team-discussion-comment-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n            query: {\n                /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n                content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"][];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.\n     *\n     * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.\n     */\n    \"reactions/create-for-team-discussion-comment-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n                comment_number: components[\"parameters\"][\"comment-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */\n                    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.\n     *\n     * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n     */\n    \"reactions/list-for-team-discussion-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n            query: {\n                /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n                content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"][];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.\n     *\n     * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.\n     */\n    \"reactions/create-for-team-discussion-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                discussion_number: components[\"parameters\"][\"discussion-number\"];\n            };\n        };\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"reaction\"];\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */\n                    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\";\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.\n     *\n     * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n     */\n    \"teams/list-pending-invitations-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-invitation\"][];\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.\n     *\n     * Team members will include the members of child teams.\n     */\n    \"teams/list-members-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n            query: {\n                /**\n                 * Filters members returned by their role in the team. Can be one of:\n                 * \\* `member` - normal members of the team.\n                 * \\* `maintainer` - team maintainers.\n                 * \\* `all` - all members of the team.\n                 */\n                role?: \"member\" | \"maintainer\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * The \"Get team member\" endpoint (described below) is deprecated.\n     *\n     * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n     *\n     * To list members in a team, the team must be visible to the authenticated user.\n     */\n    \"teams/get-member-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Response if user is a member */\n            204: never;\n            /** Response if user is not a member */\n            404: unknown;\n        };\n    };\n    /**\n     * The \"Add team member\" endpoint (described below) is deprecated.\n     *\n     * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.\n     *\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.\n     *\n     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n     *\n     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n     */\n    \"teams/add-member-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n            /** Response if team synchronization is set up */\n            404: unknown;\n            /** response */\n            422: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        errors?: {\n                            code?: string;\n                            field?: string;\n                            resource?: string;\n                        }[];\n                        documentation_url?: string;\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * The \"Remove team member\" endpoint (described below) is deprecated.\n     *\n     * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.\n     *\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.\n     *\n     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n     */\n    \"teams/remove-member-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            /** Response if team synchronization is setup */\n            404: unknown;\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.\n     *\n     * Team members will include the members of child teams.\n     *\n     * To get a user's membership with a team, the team must be visible to the authenticated user.\n     *\n     * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).\n     */\n    \"teams/get-membership-for-user-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-membership\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.\n     *\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.\n     *\n     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n     *\n     * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n     *\n     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n     */\n    \"teams/add-or-update-membership-for-user-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-membership\"];\n                };\n            };\n            /** Response if team synchronization is set up */\n            403: unknown;\n            404: components[\"responses\"][\"not_found\"];\n            /** Response if you attempt to add an organization to a team */\n            422: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        errors?: {\n                            code?: string;\n                            field?: string;\n                            resource?: string;\n                        }[];\n                        documentation_url?: string;\n                    };\n                };\n            };\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The role that this user should have in the team. Can be one of:\n                     * \\* `member` - a normal member of the team.\n                     * \\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.\n                     */\n                    role?: \"member\" | \"maintainer\";\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.\n     *\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n     *\n     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n     */\n    \"teams/remove-membership-for-user-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            /** Response if team synchronization is set up */\n            403: unknown;\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.\n     *\n     * Lists the organization projects for a team.\n     */\n    \"teams/list-projects-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-project\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.\n     *\n     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n     */\n    \"teams/check-permissions-for-project-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-project\"];\n                };\n            };\n            /** Response if project is not managed by this team */\n            404: unknown;\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.\n     *\n     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n     */\n    \"teams/add-or-update-project-permissions-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            /** Response if the project is not owned by the organization */\n            403: {\n                content: {\n                    \"application/json\": {\n                        message?: string;\n                        documentation_url?: string;\n                    };\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The permission to grant to the team for this project. Can be one of:\n                     * \\* `read` - team members can read, but not write to or administer this project.\n                     * \\* `write` - team members can read and write, but not administer this project.\n                     * \\* `admin` - team members can read, write and administer this project.\n                     * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n                     */\n                    permission?: \"read\" | \"write\" | \"admin\";\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.\n     *\n     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.\n     */\n    \"teams/remove-project-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                project_id: components[\"parameters\"][\"project-id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint. */\n    \"teams/list-repos-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Note**: Repositories inherited through a parent team will also be checked.\n     *\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.\n     *\n     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n     */\n    \"teams/check-permissions-for-repo-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Alternative response with extra repository information */\n            200: {\n                content: {\n                    \"application/vnd.github.v3.repository+json\": components[\"schemas\"][\"team-repository\"];\n                };\n            };\n            /** Response if repository is managed by this team */\n            204: never;\n            /** Response if repository is not managed by this team */\n            404: unknown;\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)\" endpoint.\n     *\n     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.\n     *\n     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n     */\n    \"teams/add-or-update-repo-permissions-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /**\n                     * The permission to grant the team on this repository. Can be one of:\n                     * \\* `pull` - team members can pull, but not push to or administer this repository.\n                     * \\* `push` - team members can pull and push, but not administer this repository.\n                     * \\* `admin` - team members can pull, push and administer this repository.\n                     *\n                     * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.\n                     */\n                    permission?: \"pull\" | \"push\" | \"admin\";\n                };\n            };\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.\n     *\n     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.\n     */\n    \"teams/remove-repo-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.\n     *\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * List IdP groups connected to a team on GitHub.\n     */\n    \"teams/list-idp-groups-for-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"group-mapping\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.\n     *\n     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n     *\n     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.\n     */\n    \"teams/create-or-update-idp-group-connections-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"group-mapping\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove. */\n                    groups: {\n                        /** ID of the IdP group. */\n                        group_id: string;\n                        /** Name of the IdP group. */\n                        group_name: string;\n                        /** Description of the IdP group. */\n                        group_description: string;\n                        id?: string;\n                        name?: string;\n                        description?: string;\n                    }[];\n                    synced_at?: string;\n                };\n            };\n        };\n    };\n    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint. */\n    \"teams/list-child-legacy\": {\n        parameters: {\n            path: {\n                team_id: components[\"parameters\"][\"team-id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** Response if child teams exist */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team\"][];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.\n     *\n     * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.\n     */\n    \"users/get-authenticated\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"private-user\"] | components[\"schemas\"][\"public-user\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API. */\n    \"users/update-authenticated\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"private-user\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The new name of the user. */\n                    name?: string;\n                    /** The publicly visible email address of the user. */\n                    email?: string;\n                    /** The new blog URL of the user. */\n                    blog?: string;\n                    /** The new Twitter username of the user. */\n                    twitter_username?: string | null;\n                    /** The new company of the user. */\n                    company?: string;\n                    /** The new location of the user. */\n                    location?: string;\n                    /** The new hiring availability of the user. */\n                    hireable?: boolean;\n                    /** The new short biography of the user. */\n                    bio?: string;\n                };\n            };\n        };\n    };\n    /** List the users you've blocked on your personal account. */\n    \"users/list-blocked-by-authenticated\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    \"users/check-blocked\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** If the user is blocked: */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            /** If the user is not blocked: */\n            404: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"basic-error\"];\n                };\n            };\n        };\n    };\n    \"users/block\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"users/unblock\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Sets the visibility for your primary email addresses. */\n    \"users/set-primary-email-visibility-for-authenticated\": {\n        parameters: {};\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"email\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** An email address associated with the GitHub user account to manage. */\n                    email: string;\n                    /** Denotes whether an email is publically visible. */\n                    visibility: \"public\" | \"private\";\n                };\n            };\n        };\n    };\n    /** Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope. */\n    \"users/list-emails-for-authenticated\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"email\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** This endpoint is accessible with the `user` scope. */\n    \"users/add-email-for-authenticated\": {\n        parameters: {};\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"email\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key. */\n                    emails: string[];\n                } | string[] | string;\n            };\n        };\n    };\n    /** This endpoint is accessible with the `user` scope. */\n    \"users/delete-email-for-authenticated\": {\n        parameters: {};\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Email addresses associated with the GitHub user account. */\n                    emails: string[];\n                } | string[] | string;\n            };\n        };\n    };\n    /** Lists the people following the authenticated user. */\n    \"users/list-followers-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Lists the people who the authenticated user follows. */\n    \"users/list-followed-by-authenticated\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    \"users/check-person-is-followed-by-authenticated\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Response if the person is followed by the authenticated user */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            /** Response if the person is not followed by the authenticated user */\n            404: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"basic-error\"];\n                };\n            };\n        };\n    };\n    /**\n     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n     *\n     * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.\n     */\n    \"users/follow\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. */\n    \"users/unfollow\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n    \"users/list-gpg-keys-for-authenticated\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gpg-key\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n    \"users/create-gpg-key-for-authenticated\": {\n        parameters: {};\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gpg-key\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** A GPG key in ASCII-armored format. */\n                    armored_public_key: string;\n                };\n            };\n        };\n    };\n    /** View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n    \"users/get-gpg-key-for-authenticated\": {\n        parameters: {\n            path: {\n                /** gpg_key_id parameter */\n                gpg_key_id: components[\"parameters\"][\"gpg_key_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gpg-key\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n    \"users/delete-gpg-key-for-authenticated\": {\n        parameters: {\n            path: {\n                /** gpg_key_id parameter */\n                gpg_key_id: components[\"parameters\"][\"gpg_key_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n     *\n     * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n     *\n     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n     *\n     * You can find the permissions for the installation under the `permissions` key.\n     */\n    \"apps/list-installations-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** You can find the permissions for the installation under the `permissions` key. */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        installations: components[\"schemas\"][\"installation\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n        };\n    };\n    /**\n     * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n     *\n     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n     *\n     * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n     *\n     * The access the user has to each repository is included in the hash under the `permissions` key.\n     */\n    \"apps/list-installation-repos-for-authenticated-user\": {\n        parameters: {\n            path: {\n                /** installation_id parameter */\n                installation_id: components[\"parameters\"][\"installation_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** The access the user has to each repository is included in the hash under the `permissions` key. */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": {\n                        total_count: number;\n                        repository_selection?: string;\n                        repositories: components[\"schemas\"][\"repository\"][];\n                    };\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Add a single repository to an installation. The authenticated user must have admin access to the repository.\n     *\n     * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.\n     */\n    \"apps/add-repo-to-installation\": {\n        parameters: {\n            path: {\n                /** installation_id parameter */\n                installation_id: components[\"parameters\"][\"installation_id\"];\n                repository_id: components[\"parameters\"][\"repository_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Remove a single repository from an installation. The authenticated user must have admin access to the repository.\n     *\n     * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.\n     */\n    \"apps/remove-repo-from-installation\": {\n        parameters: {\n            path: {\n                /** installation_id parameter */\n                installation_id: components[\"parameters\"][\"installation_id\"];\n                repository_id: components[\"parameters\"][\"repository_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response. */\n    \"interactions/get-restrictions-for-authenticated-user\": {\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"interaction-limit-response\"];\n                };\n            };\n        };\n    };\n    /** Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user. */\n    \"interactions/set-restrictions-for-authenticated-user\": {\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"interaction-limit-response\"];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": components[\"schemas\"][\"interaction-limit\"];\n            };\n        };\n    };\n    /** Removes any interaction restrictions from your public repositories. */\n    \"interactions/remove-restrictions-for-authenticated-user\": {\n        responses: {\n            /** Empty response */\n            204: never;\n        };\n    };\n    /**\n     * List issues across owned and member repositories assigned to the authenticated user.\n     *\n     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n     * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n     * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n     * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n     */\n    \"issues/list-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /**\n                 * Indicates which sorts of issues to return. Can be one of:\n                 * \\* `assigned`: Issues assigned to you\n                 * \\* `created`: Issues created by you\n                 * \\* `mentioned`: Issues mentioning you\n                 * \\* `subscribed`: Issues you're subscribed to updates for\n                 * \\* `all`: All issues the authenticated user can see, regardless of participation or creation\n                 */\n                filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"all\";\n                /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** A list of comma separated label names. Example: `bug,ui,@high` */\n                labels?: components[\"parameters\"][\"labels\"];\n                /** What to sort results by. Can be either `created`, `updated`, `comments`. */\n                sort?: \"created\" | \"updated\" | \"comments\";\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"issue\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n    \"users/list-public-ssh-keys-for-authenticated\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"key\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n    \"users/create-public-ssh-key-for-authenticated\": {\n        parameters: {};\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"key\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** A descriptive name for the new key. */\n                    title?: string;\n                    /** The public SSH key to add to your GitHub account. */\n                    key: string;\n                };\n            };\n        };\n    };\n    /** View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n    \"users/get-public-ssh-key-for-authenticated\": {\n        parameters: {\n            path: {\n                /** key_id parameter */\n                key_id: components[\"parameters\"][\"key_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"key\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */\n    \"users/delete-public-ssh-key-for-authenticated\": {\n        parameters: {\n            path: {\n                /** key_id parameter */\n                key_id: components[\"parameters\"][\"key_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */\n    \"apps/list-subscriptions-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"user-marketplace-purchase\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */\n    \"apps/list-subscriptions-for-authenticated-user-stubbed\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"user-marketplace-purchase\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n        };\n    };\n    \"orgs/list-memberships-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships. */\n                state?: \"active\" | \"pending\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-membership\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    \"orgs/get-membership-for-authenticated-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-membership\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"orgs/update-membership-for-authenticated-user\": {\n        parameters: {\n            path: {\n                org: components[\"parameters\"][\"org\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"org-membership\"];\n                };\n            };\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The state that the membership should be in. Only `\"active\"` will be accepted. */\n                    state: \"active\";\n                };\n            };\n        };\n    };\n    /** Lists all migrations a user has started. */\n    \"migrations/list-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"migration\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Initiates the generation of a user migration archive. */\n    \"migrations/start-for-authenticated-user\": {\n        parameters: {};\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"migration\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Lock the repositories being migrated at the start of the migration */\n                    lock_repositories?: boolean;\n                    /** Do not include attachments in the migration */\n                    exclude_attachments?: boolean;\n                    /** Exclude attributes from the API response to improve performance */\n                    exclude?: \"repositories\"[];\n                    repositories: string[];\n                };\n            };\n        };\n    };\n    /**\n     * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n     *\n     * *   `pending` - the migration hasn't started yet.\n     * *   `exporting` - the migration is in progress.\n     * *   `exported` - the migration finished successfully.\n     * *   `failed` - the migration failed.\n     *\n     * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).\n     */\n    \"migrations/get-status-for-authenticated-user\": {\n        parameters: {\n            path: {\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n            };\n            query: {\n                exclude?: string[];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"migration\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n     *\n     * *   attachments\n     * *   bases\n     * *   commit\\_comments\n     * *   issue\\_comments\n     * *   issue\\_events\n     * *   issues\n     * *   milestones\n     * *   organizations\n     * *   projects\n     * *   protected\\_branches\n     * *   pull\\_request\\_reviews\n     * *   pull\\_requests\n     * *   releases\n     * *   repositories\n     * *   review\\_comments\n     * *   schema\n     * *   users\n     *\n     * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.\n     */\n    \"migrations/get-archive-for-authenticated-user\": {\n        parameters: {\n            path: {\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n            };\n        };\n        responses: {\n            /** response */\n            302: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted. */\n    \"migrations/delete-archive-for-authenticated-user\": {\n        parameters: {\n            path: {\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked. */\n    \"migrations/unlock-repo-for-authenticated-user\": {\n        parameters: {\n            path: {\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n                /** repo_name parameter */\n                repo_name: components[\"parameters\"][\"repo_name\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Lists all the repositories for this user migration. */\n    \"migrations/list-repos-for-user\": {\n        parameters: {\n            path: {\n                /** migration_id parameter */\n                migration_id: components[\"parameters\"][\"migration_id\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * List organizations for the authenticated user.\n     *\n     * **OAuth scope requirements**\n     *\n     * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.\n     */\n    \"orgs/list-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-simple\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    \"projects/create-for-authenticated-user\": {\n        parameters: {};\n        responses: {\n            /** response */\n            201: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed_simple\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** Name of the project */\n                    name: string;\n                    /** Body of the project */\n                    body?: string | null;\n                };\n            };\n        };\n    };\n    /** Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope. */\n    \"users/list-public-emails-for-authenticated\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"email\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n     *\n     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n     */\n    \"repos/list-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Can be one of `all`, `public`, or `private`. */\n                visibility?: \"all\" | \"public\" | \"private\";\n                /**\n                 * Comma-separated list of values. Can include:\n                 * \\* `owner`: Repositories that are owned by the authenticated user.\n                 * \\* `collaborator`: Repositories that the user has been added to as a collaborator.\n                 * \\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.\n                 */\n                affiliation?: string;\n                /**\n                 * Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`\n                 *\n                 * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.\n                 */\n                type?: \"all\" | \"owner\" | \"public\" | \"private\" | \"member\";\n                /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n                sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n                /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */\n                direction?: \"asc\" | \"desc\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                before?: components[\"parameters\"][\"before\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * Creates a new repository for the authenticated user.\n     *\n     * **OAuth scope requirements**\n     *\n     * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n     *\n     * *   `public_repo` scope or `repo` scope to create a public repository\n     * *   `repo` scope to create a private repository\n     */\n    \"repos/create-for-authenticated-user\": {\n        parameters: {};\n        responses: {\n            /** response */\n            201: {\n                headers: {\n                    Location?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository\"];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            400: components[\"responses\"][\"bad_request\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n        requestBody: {\n            content: {\n                \"application/json\": {\n                    /** The name of the repository. */\n                    name: string;\n                    /** A short description of the repository. */\n                    description?: string;\n                    /** A URL with more information about the repository. */\n                    homepage?: string;\n                    /** Whether the repository is private or public. */\n                    private?: boolean;\n                    /** Whether issues are enabled. */\n                    has_issues?: boolean;\n                    /** Whether projects are enabled. */\n                    has_projects?: boolean;\n                    /** Whether the wiki is enabled. */\n                    has_wiki?: boolean;\n                    /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */\n                    team_id?: number;\n                    /** Whether the repository is initialized with a minimal README. */\n                    auto_init?: boolean;\n                    /** The desired language or platform to apply to the .gitignore. */\n                    gitignore_template?: string;\n                    /** The license keyword of the open source license for this repository. */\n                    license_template?: string;\n                    /** Whether to allow squash merges for pull requests. */\n                    allow_squash_merge?: boolean;\n                    /** Whether to allow merge commits for pull requests. */\n                    allow_merge_commit?: boolean;\n                    /** Whether to allow rebase merges for pull requests. */\n                    allow_rebase_merge?: boolean;\n                    /** Whether to delete head branches when pull requests are merged */\n                    delete_branch_on_merge?: boolean;\n                    /** Whether downloads are enabled. */\n                    has_downloads?: boolean;\n                    /** Whether this repository acts as a template that can be used to generate new repositories. */\n                    is_template?: boolean;\n                };\n            };\n        };\n    };\n    /** When authenticating as a user, this endpoint will list all currently open repository invitations for that user. */\n    \"repos/list-invitations-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository-invitation\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"repos/decline-invitation\": {\n        parameters: {\n            path: {\n                /** invitation_id parameter */\n                invitation_id: components[\"parameters\"][\"invitation_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            409: components[\"responses\"][\"conflict\"];\n        };\n    };\n    \"repos/accept-invitation\": {\n        parameters: {\n            path: {\n                /** invitation_id parameter */\n                invitation_id: components[\"parameters\"][\"invitation_id\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n            409: components[\"responses\"][\"conflict\"];\n        };\n    };\n    /**\n     * Lists repositories the authenticated user has starred.\n     *\n     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n     */\n    \"activity/list-repos-starred-by-authenticated-user\": {\n        parameters: {\n            query: {\n                /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n                sort?: components[\"parameters\"][\"sort\"];\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository\"][];\n                    \"application/vnd.github.v3.star+json\": components[\"schemas\"][\"starred-repository\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    \"activity/check-repo-is-starred-by-authenticated-user\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Response if this repository is starred by you */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            /** Response if this repository is not starred by you */\n            404: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"basic-error\"];\n                };\n            };\n        };\n    };\n    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\" */\n    \"activity/star-repo-for-authenticated-user\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    \"activity/unstar-repo-for-authenticated-user\": {\n        parameters: {\n            path: {\n                owner: components[\"parameters\"][\"owner\"];\n                repo: components[\"parameters\"][\"repo\"];\n            };\n        };\n        responses: {\n            /** Empty response */\n            204: never;\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** Lists repositories the authenticated user is watching. */\n    \"activity/list-watched-repos-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            401: components[\"responses\"][\"requires_authentication\"];\n            403: components[\"responses\"][\"forbidden\"];\n        };\n    };\n    /** List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/). */\n    \"teams/list-for-authenticated-user\": {\n        parameters: {\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"team-full\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n            403: components[\"responses\"][\"forbidden\"];\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /**\n     * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n     *\n     * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.\n     */\n    \"users/list\": {\n        parameters: {\n            query: {\n                /** A user ID. Only return users with an ID greater than this ID. */\n                since?: components[\"parameters\"][\"since-user\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {\n                    Link?: string;\n                };\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n            304: components[\"responses\"][\"not_modified\"];\n        };\n    };\n    /**\n     * Provides publicly available information about someone with a GitHub account.\n     *\n     * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See \"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\" for details about authentication. For an example response, see 'Response with GitHub plan information' below\"\n     *\n     * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).\n     *\n     * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://docs.github.com/rest/reference/users#emails)\".\n     */\n    \"users/get-by-username\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"private-user\"] | components[\"schemas\"][\"public-user\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n        };\n    };\n    /** If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. */\n    \"activity/list-events-for-authenticated-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n        };\n    };\n    /** This is the user's organization dashboard. You must be authenticated as the user to view this. */\n    \"activity/list-org-events-for-authenticated-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n                org: components[\"parameters\"][\"org\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n        };\n    };\n    \"activity/list-public-events-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n        };\n    };\n    /** Lists the people following the specified user. */\n    \"users/list-followers-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n        };\n    };\n    /** Lists the people who the specified user follows. */\n    \"users/list-following-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"simple-user\"][];\n                };\n            };\n        };\n    };\n    \"users/check-following-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n                target_user: string;\n            };\n        };\n        responses: {\n            /** Response if the user follows the target user */\n            204: never;\n            /** Response if the user does not follow the target user */\n            404: unknown;\n        };\n    };\n    /** Lists public gists for the specified user: */\n    \"gists/list-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n                since?: components[\"parameters\"][\"since\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"base-gist\"][];\n                };\n            };\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** Lists the GPG keys for a user. This information is accessible by anyone. */\n    \"users/list-gpg-keys-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"gpg-key\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n     *\n     * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:\n     *\n     * ```shell\n     *  curl -u username:token\n     *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192\n     * ```\n     */\n    \"users/get-context-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */\n                subject_type?: \"organization\" | \"repository\" | \"issue\" | \"pull_request\";\n                /** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */\n                subject_id?: string;\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"hovercard\"];\n                };\n            };\n            404: components[\"responses\"][\"not_found\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /**\n     * Enables an authenticated GitHub App to find the user’s installation information.\n     *\n     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n     */\n    \"apps/get-user-installation\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"installation\"];\n                };\n            };\n        };\n    };\n    /** Lists the _verified_ public SSH keys for a user. This is accessible by anyone. */\n    \"users/list-public-keys-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"key-simple\"][];\n                };\n            };\n        };\n    };\n    /**\n     * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n     *\n     * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.\n     */\n    \"orgs/list-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"organization-simple\"][];\n                };\n            };\n        };\n    };\n    \"projects/list-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */\n                state?: \"open\" | \"closed\" | \"all\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"project\"][];\n                };\n            };\n            415: components[\"responses\"][\"preview_header_missing\"];\n            422: components[\"responses\"][\"validation_failed\"];\n        };\n    };\n    /** These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. */\n    \"activity/list-received-events-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n        };\n    };\n    \"activity/list-received-public-events-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"event\"][];\n                };\n            };\n        };\n    };\n    /** Lists public repositories for the specified user. */\n    \"repos/list-for-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Can be one of `all`, `owner`, `member`. */\n                type?: \"all\" | \"owner\" | \"member\";\n                /** Can be one of `created`, `updated`, `pushed`, `full_name`. */\n                sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\n                /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */\n                direction?: \"asc\" | \"desc\";\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the summary of the free and paid GitHub Actions minutes used.\n     *\n     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n     *\n     * Access tokens must have the `user` scope.\n     */\n    \"billing/get-github-actions-billing-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"actions-billing-usage\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the free and paid storage used for GitHub Packages in gigabytes.\n     *\n     * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n     *\n     * Access tokens must have the `user` scope.\n     */\n    \"billing/get-github-packages-billing-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"packages-billing-usage\"];\n                };\n            };\n        };\n    };\n    /**\n     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n     *\n     * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n     *\n     * Access tokens must have the `user` scope.\n     */\n    \"billing/get-shared-storage-billing-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"application/json\": components[\"schemas\"][\"combined-billing-usage\"];\n                };\n            };\n        };\n    };\n    /**\n     * Lists repositories a user has starred.\n     *\n     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n     */\n    \"activity/list-repos-starred-by-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */\n                sort?: components[\"parameters\"][\"sort\"];\n                /** One of `asc` (ascending) or `desc` (descending). */\n                direction?: components[\"parameters\"][\"direction\"];\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"repository\"][];\n                    \"application/vnd.github.v3.star+json\": components[\"schemas\"][\"starred-repository\"][];\n                };\n            };\n        };\n    };\n    /** Lists repositories a user is watching. */\n    \"activity/list-repos-watched-by-user\": {\n        parameters: {\n            path: {\n                username: components[\"parameters\"][\"username\"];\n            };\n            query: {\n                /** Results per page (max 100) */\n                per_page?: components[\"parameters\"][\"per_page\"];\n                /** Page number of the results to fetch. */\n                page?: components[\"parameters\"][\"page\"];\n            };\n        };\n        responses: {\n            /** response */\n            200: {\n                headers: {};\n                content: {\n                    \"application/json\": components[\"schemas\"][\"minimal-repository\"][];\n                };\n            };\n        };\n    };\n    /** Get a random sentence from the Zen of GitHub */\n    \"meta/get-zen\": {\n        responses: {\n            /** response */\n            200: {\n                content: {\n                    \"text/plain\": string;\n                };\n            };\n        };\n    };\n}\n","node_modules/@octokit/openapi-types/dist-web/index.js":"const VERSION = \"4.0.4\";\n\nexport { VERSION };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/plugin-paginate-rest/package.json":"{\n  \"name\": \"@octokit/plugin-paginate-rest\",\n  \"description\": \"Octokit plugin to paginate REST API endpoint responses\",\n  \"version\": \"2.9.1\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"github\",\n    \"api\",\n    \"sdk\",\n    \"toolkit\"\n  ],\n  \"repository\": \"https://github.com/octokit/plugin-paginate-rest.js\",\n  \"dependencies\": {\n    \"@octokit/types\": \"^6.8.0\"\n  },\n  \"peerDependencies\": {\n    \"@octokit/core\": \">=2\"\n  },\n  \"devDependencies\": {\n    \"@octokit/core\": \"^3.0.0\",\n    \"@octokit/plugin-rest-endpoint-methods\": \"^4.0.0\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/fetch-mock\": \"^7.3.1\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/node\": \"^14.0.4\",\n    \"fetch-mock\": \"^9.0.0\",\n    \"jest\": \"^26.0.1\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"prettier\": \"^2.0.4\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"ts-jest\": \"^26.0.0\",\n    \"typescript\": \"^4.0.2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/plugin-paginate-rest/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst VERSION = \"2.9.1\";\n\n/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\nfunction normalizePaginatedListResponse(response) {\n  const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n  if (!responseNeedsNormalization) return response; // keep the additional properties intact as there is currently no other way\n  // to retrieve the same information.\n\n  const incompleteResults = response.data.incomplete_results;\n  const repositorySelection = response.data.repository_selection;\n  const totalCount = response.data.total_count;\n  delete response.data.incomplete_results;\n  delete response.data.repository_selection;\n  delete response.data.total_count;\n  const namespaceKey = Object.keys(response.data)[0];\n  const data = response.data[namespaceKey];\n  response.data = data;\n\n  if (typeof incompleteResults !== \"undefined\") {\n    response.data.incomplete_results = incompleteResults;\n  }\n\n  if (typeof repositorySelection !== \"undefined\") {\n    response.data.repository_selection = repositorySelection;\n  }\n\n  response.data.total_count = totalCount;\n  return response;\n}\n\nfunction iterator(octokit, route, parameters) {\n  const options = typeof route === \"function\" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);\n  const requestMethod = typeof route === \"function\" ? route : octokit.request;\n  const method = options.method;\n  const headers = options.headers;\n  let url = options.url;\n  return {\n    [Symbol.asyncIterator]: () => ({\n      async next() {\n        if (!url) return {\n          done: true\n        };\n        const response = await requestMethod({\n          method,\n          url,\n          headers\n        });\n        const normalizedResponse = normalizePaginatedListResponse(response); // `response.headers.link` format:\n        // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n        // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n\n        url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n        return {\n          value: normalizedResponse\n        };\n      }\n\n    })\n  };\n}\n\nfunction paginate(octokit, route, parameters, mapFn) {\n  if (typeof parameters === \"function\") {\n    mapFn = parameters;\n    parameters = undefined;\n  }\n\n  return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\n\nfunction gather(octokit, results, iterator, mapFn) {\n  return iterator.next().then(result => {\n    if (result.done) {\n      return results;\n    }\n\n    let earlyExit = false;\n\n    function done() {\n      earlyExit = true;\n    }\n\n    results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n\n    if (earlyExit) {\n      return results;\n    }\n\n    return gather(octokit, results, iterator, mapFn);\n  });\n}\n\nconst composePaginateRest = Object.assign(paginate, {\n  iterator\n});\n\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\n\nfunction paginateRest(octokit) {\n  return {\n    paginate: Object.assign(paginate.bind(null, octokit), {\n      iterator: iterator.bind(null, octokit)\n    })\n  };\n}\npaginateRest.VERSION = VERSION;\n\nexports.composePaginateRest = composePaginateRest;\nexports.paginateRest = paginateRest;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/plugin-paginate-rest/dist-src/compose-paginate.js":"import { paginate } from \"./paginate\";\nimport { iterator } from \"./iterator\";\nexport const composePaginateRest = Object.assign(paginate, {\n    iterator,\n});\n","node_modules/@octokit/plugin-paginate-rest/dist-src/index.js":"import { VERSION } from \"./version\";\nimport { paginate } from \"./paginate\";\nimport { iterator } from \"./iterator\";\nexport { composePaginateRest } from \"./compose-paginate\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport function paginateRest(octokit) {\n    return {\n        paginate: Object.assign(paginate.bind(null, octokit), {\n            iterator: iterator.bind(null, octokit),\n        }),\n    };\n}\npaginateRest.VERSION = VERSION;\n","node_modules/@octokit/plugin-paginate-rest/dist-src/iterator.js":"import { normalizePaginatedListResponse } from \"./normalize-paginated-list-response\";\nexport function iterator(octokit, route, parameters) {\n    const options = typeof route === \"function\"\n        ? route.endpoint(parameters)\n        : octokit.request.endpoint(route, parameters);\n    const requestMethod = typeof route === \"function\" ? route : octokit.request;\n    const method = options.method;\n    const headers = options.headers;\n    let url = options.url;\n    return {\n        [Symbol.asyncIterator]: () => ({\n            async next() {\n                if (!url)\n                    return { done: true };\n                const response = await requestMethod({ method, url, headers });\n                const normalizedResponse = normalizePaginatedListResponse(response);\n                // `response.headers.link` format:\n                // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n                // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n                url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n                return { value: normalizedResponse };\n            },\n        }),\n    };\n}\n","node_modules/@octokit/plugin-paginate-rest/dist-src/normalize-paginated-list-response.js":"/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\nexport function normalizePaginatedListResponse(response) {\n    const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n    if (!responseNeedsNormalization)\n        return response;\n    // keep the additional properties intact as there is currently no other way\n    // to retrieve the same information.\n    const incompleteResults = response.data.incomplete_results;\n    const repositorySelection = response.data.repository_selection;\n    const totalCount = response.data.total_count;\n    delete response.data.incomplete_results;\n    delete response.data.repository_selection;\n    delete response.data.total_count;\n    const namespaceKey = Object.keys(response.data)[0];\n    const data = response.data[namespaceKey];\n    response.data = data;\n    if (typeof incompleteResults !== \"undefined\") {\n        response.data.incomplete_results = incompleteResults;\n    }\n    if (typeof repositorySelection !== \"undefined\") {\n        response.data.repository_selection = repositorySelection;\n    }\n    response.data.total_count = totalCount;\n    return response;\n}\n","node_modules/@octokit/plugin-paginate-rest/dist-src/paginate.js":"import { iterator } from \"./iterator\";\nexport function paginate(octokit, route, parameters, mapFn) {\n    if (typeof parameters === \"function\") {\n        mapFn = parameters;\n        parameters = undefined;\n    }\n    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\nfunction gather(octokit, results, iterator, mapFn) {\n    return iterator.next().then((result) => {\n        if (result.done) {\n            return results;\n        }\n        let earlyExit = false;\n        function done() {\n            earlyExit = true;\n        }\n        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n        if (earlyExit) {\n            return results;\n        }\n        return gather(octokit, results, iterator, mapFn);\n    });\n}\n","node_modules/@octokit/plugin-paginate-rest/dist-src/types.js":"export {};\n","node_modules/@octokit/plugin-paginate-rest/dist-src/version.js":"export const VERSION = \"2.9.1\";\n","node_modules/@octokit/plugin-paginate-rest/dist-src/generated/paginating-endpoints.js":"export {};\n","node_modules/@octokit/plugin-paginate-rest/dist-types/compose-paginate.d.ts":"import { ComposePaginateInterface } from \"./types\";\nexport declare const composePaginateRest: ComposePaginateInterface;\n","node_modules/@octokit/plugin-paginate-rest/dist-types/index.d.ts":"import { Octokit } from \"@octokit/core\";\nimport { PaginateInterface } from \"./types\";\nexport { PaginateInterface } from \"./types\";\nexport { composePaginateRest } from \"./compose-paginate\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport declare function paginateRest(octokit: Octokit): {\n    paginate: PaginateInterface;\n};\nexport declare namespace paginateRest {\n    var VERSION: string;\n}\n","node_modules/@octokit/plugin-paginate-rest/dist-types/iterator.d.ts":"import { Octokit } from \"@octokit/core\";\nimport { RequestInterface, RequestParameters, Route } from \"./types\";\nexport declare function iterator(octokit: Octokit, route: Route | RequestInterface, parameters?: RequestParameters): {\n    [Symbol.asyncIterator]: () => {\n        next(): Promise<{\n            done: boolean;\n            value?: undefined;\n        } | {\n            value: import(\"@octokit/types/dist-types/OctokitResponse\").OctokitResponse<any, number>;\n            done?: undefined;\n        }>;\n    };\n};\n","node_modules/@octokit/plugin-paginate-rest/dist-types/normalize-paginated-list-response.d.ts":"/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\nimport { OctokitResponse } from \"./types\";\nexport declare function normalizePaginatedListResponse(response: OctokitResponse<any>): OctokitResponse<any>;\n","node_modules/@octokit/plugin-paginate-rest/dist-types/paginate.d.ts":"import { Octokit } from \"@octokit/core\";\nimport { MapFunction, PaginationResults, RequestParameters, Route, RequestInterface } from \"./types\";\nexport declare function paginate(octokit: Octokit, route: Route | RequestInterface, parameters?: RequestParameters, mapFn?: MapFunction): Promise<PaginationResults<unknown>>;\n","node_modules/@octokit/plugin-paginate-rest/dist-types/types.d.ts":"import { Octokit } from \"@octokit/core\";\nimport * as OctokitTypes from \"@octokit/types\";\nexport { EndpointOptions, RequestInterface, OctokitResponse, RequestParameters, Route, } from \"@octokit/types\";\nimport { PaginatingEndpoints } from \"./generated/paginating-endpoints\";\ndeclare type KnownKeys<T> = Extract<{\n    [K in keyof T]: string extends K ? never : number extends K ? never : K;\n} extends {\n    [_ in keyof T]: infer U;\n} ? U : never, keyof T>;\ndeclare type KeysMatching<T, V> = {\n    [K in keyof T]: T[K] extends V ? K : never;\n}[keyof T];\ndeclare type KnownKeysMatching<T, V> = KeysMatching<Pick<T, KnownKeys<T>>, V>;\ndeclare type GetResultsType<T> = T extends {\n    data: any[];\n} ? T[\"data\"] : T extends {\n    data: object;\n} ? T[\"data\"][KnownKeysMatching<T[\"data\"], any[]>] : never;\ndeclare type NormalizeResponse<T> = T & {\n    data: GetResultsType<T>;\n};\ndeclare type DataType<T> = \"data\" extends keyof T ? T[\"data\"] : unknown;\nexport interface MapFunction<T = unknown, R = unknown> {\n    (response: OctokitTypes.OctokitResponse<PaginationResults<T>>, done: () => void): R[];\n}\nexport declare type PaginationResults<T = unknown> = T[];\nexport interface PaginateInterface {\n    /**\n     * Paginate a request using endpoint options and map each response to a custom array\n     *\n     * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     * @param {function} mapFn Optional method to map each response to a custom array\n     */\n    <T, R>(options: OctokitTypes.EndpointOptions, mapFn: MapFunction<T, R>): Promise<PaginationResults<R>>;\n    /**\n     * Paginate a request using endpoint options\n     *\n     * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <T>(options: OctokitTypes.EndpointOptions): Promise<PaginationResults<T>>;\n    /**\n     * Paginate a request using a known endpoint route string and map each response to a custom array\n     *\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {function} mapFn Optional method to map each response to a custom array\n     */\n    <R extends keyof PaginatingEndpoints, MR extends unknown[]>(route: R, mapFn: (response: PaginatingEndpoints[R][\"response\"], done: () => void) => MR): Promise<MR>;\n    /**\n     * Paginate a request using a known endpoint route string and parameters, and map each response to a custom array\n     *\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {object} parameters URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     * @param {function} mapFn Optional method to map each response to a custom array\n     */\n    <R extends keyof PaginatingEndpoints, MR extends unknown[]>(route: R, parameters: PaginatingEndpoints[R][\"parameters\"], mapFn: (response: PaginatingEndpoints[R][\"response\"], done: () => void) => MR): Promise<MR>;\n    /**\n     * Paginate a request using an known endpoint route string\n     *\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {object} parameters? URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <R extends keyof PaginatingEndpoints>(route: R, parameters?: PaginatingEndpoints[R][\"parameters\"]): Promise<DataType<PaginatingEndpoints[R][\"response\"]>>;\n    /**\n     * Paginate a request using an unknown endpoint route string\n     *\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {object} parameters? URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <T, R extends OctokitTypes.Route = OctokitTypes.Route>(route: R, parameters?: R extends keyof PaginatingEndpoints ? PaginatingEndpoints[R][\"parameters\"] : OctokitTypes.RequestParameters): Promise<T[]>;\n    /**\n     * Paginate a request using an endpoint method and a map function\n     *\n     * @param {string} request Request method (`octokit.request` or `@octokit/request`)\n     * @param {function} mapFn? Optional method to map each response to a custom array\n     */\n    <R extends OctokitTypes.RequestInterface, MR extends unknown[]>(request: R, mapFn: (response: NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>, done: () => void) => MR): Promise<MR>;\n    /**\n     * Paginate a request using an endpoint method, parameters, and a map function\n     *\n     * @param {string} request Request method (`octokit.request` or `@octokit/request`)\n     * @param {object} parameters URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     * @param {function} mapFn? Optional method to map each response to a custom array\n     */\n    <R extends OctokitTypes.RequestInterface, MR extends unknown[]>(request: R, parameters: Parameters<R>[0], mapFn: (response: NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>, done: () => void) => MR): Promise<MR>;\n    /**\n     * Paginate a request using an endpoint method and parameters\n     *\n     * @param {string} request Request method (`octokit.request` or `@octokit/request`)\n     * @param {object} parameters? URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <R extends OctokitTypes.RequestInterface>(request: R, parameters?: Parameters<R>[0]): Promise<NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>[\"data\"]>;\n    iterator: {\n        /**\n         * Get an async iterator to paginate a request using endpoint options\n         *\n         * @see {link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of} for await...of\n         * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <T>(EndpointOptions: OctokitTypes.EndpointOptions): AsyncIterableIterator<OctokitTypes.OctokitResponse<PaginationResults<T>>>;\n        /**\n         * Get an async iterator to paginate a request using a known endpoint route string and optional parameters\n         *\n         * @see {link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of} for await...of\n         * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n         * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <R extends keyof PaginatingEndpoints>(route: R, parameters?: PaginatingEndpoints[R][\"parameters\"]): AsyncIterableIterator<OctokitTypes.OctokitResponse<DataType<PaginatingEndpoints[R][\"response\"]>>>;\n        /**\n         * Get an async iterator to paginate a request using an unknown endpoint route string and optional parameters\n         *\n         * @see {link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of} for await...of\n         * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n         * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <T, R extends OctokitTypes.Route = OctokitTypes.Route>(route: R, parameters?: R extends keyof PaginatingEndpoints ? PaginatingEndpoints[R][\"parameters\"] : OctokitTypes.RequestParameters): AsyncIterableIterator<OctokitTypes.OctokitResponse<PaginationResults<T>>>;\n        /**\n         * Get an async iterator to paginate a request using a request method and optional parameters\n         *\n         * @see {link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of} for await...of\n         * @param {string} request `@octokit/request` or `octokit.request` method\n         * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <R extends OctokitTypes.RequestInterface>(request: R, parameters?: Parameters<R>[0]): AsyncIterableIterator<NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>>;\n    };\n}\nexport interface ComposePaginateInterface {\n    /**\n     * Paginate a request using endpoint options and map each response to a custom array\n     *\n     * @param {object} octokit Octokit instance\n     * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     * @param {function} mapFn Optional method to map each response to a custom array\n     */\n    <T, R>(octokit: Octokit, options: OctokitTypes.EndpointOptions, mapFn: MapFunction<T, R>): Promise<PaginationResults<R>>;\n    /**\n     * Paginate a request using endpoint options\n     *\n     * @param {object} octokit Octokit instance\n     * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <T>(octokit: Octokit, options: OctokitTypes.EndpointOptions): Promise<PaginationResults<T>>;\n    /**\n     * Paginate a request using a known endpoint route string and map each response to a custom array\n     *\n     * @param {object} octokit Octokit instance\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {function} mapFn Optional method to map each response to a custom array\n     */\n    <R extends keyof PaginatingEndpoints, MR extends unknown[]>(octokit: Octokit, route: R, mapFn: (response: PaginatingEndpoints[R][\"response\"], done: () => void) => MR): Promise<MR>;\n    /**\n     * Paginate a request using a known endpoint route string and parameters, and map each response to a custom array\n     *\n     * @param {object} octokit Octokit instance\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {object} parameters URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     * @param {function} mapFn Optional method to map each response to a custom array\n     */\n    <R extends keyof PaginatingEndpoints, MR extends unknown[]>(octokit: Octokit, route: R, parameters: PaginatingEndpoints[R][\"parameters\"], mapFn: (response: PaginatingEndpoints[R][\"response\"], done: () => void) => MR): Promise<MR>;\n    /**\n     * Paginate a request using an known endpoint route string\n     *\n     * @param {object} octokit Octokit instance\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {object} parameters? URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <R extends keyof PaginatingEndpoints>(octokit: Octokit, route: R, parameters?: PaginatingEndpoints[R][\"parameters\"]): Promise<DataType<PaginatingEndpoints[R][\"response\"]>>;\n    /**\n     * Paginate a request using an unknown endpoint route string\n     *\n     * @param {object} octokit Octokit instance\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {object} parameters? URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <T, R extends OctokitTypes.Route = OctokitTypes.Route>(octokit: Octokit, route: R, parameters?: R extends keyof PaginatingEndpoints ? PaginatingEndpoints[R][\"parameters\"] : OctokitTypes.RequestParameters): Promise<T[]>;\n    /**\n     * Paginate a request using an endpoint method and a map function\n     *\n     * @param {object} octokit Octokit instance\n     * @param {string} request Request method (`octokit.request` or `@octokit/request`)\n     * @param {function} mapFn? Optional method to map each response to a custom array\n     */\n    <R extends OctokitTypes.RequestInterface, MR extends unknown[]>(octokit: Octokit, request: R, mapFn: (response: NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>, done: () => void) => MR): Promise<MR>;\n    /**\n     * Paginate a request using an endpoint method, parameters, and a map function\n     *\n     * @param {object} octokit Octokit instance\n     * @param {string} request Request method (`octokit.request` or `@octokit/request`)\n     * @param {object} parameters URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     * @param {function} mapFn? Optional method to map each response to a custom array\n     */\n    <R extends OctokitTypes.RequestInterface, MR extends unknown[]>(octokit: Octokit, request: R, parameters: Parameters<R>[0], mapFn: (response: NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>, done: () => void) => MR): Promise<MR>;\n    /**\n     * Paginate a request using an endpoint method and parameters\n     *\n     * @param {object} octokit Octokit instance\n     * @param {string} request Request method (`octokit.request` or `@octokit/request`)\n     * @param {object} parameters? URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <R extends OctokitTypes.RequestInterface>(octokit: Octokit, request: R, parameters?: Parameters<R>[0]): Promise<NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>[\"data\"]>;\n    iterator: {\n        /**\n         * Get an async iterator to paginate a request using endpoint options\n         *\n         * @see {link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of} for await...of\n         *\n         * @param {object} octokit Octokit instance\n         * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <T>(octokit: Octokit, EndpointOptions: OctokitTypes.EndpointOptions): AsyncIterableIterator<OctokitTypes.OctokitResponse<PaginationResults<T>>>;\n        /**\n         * Get an async iterator to paginate a request using a known endpoint route string and optional parameters\n         *\n         * @see {link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of} for await...of\n         *\n         * @param {object} octokit Octokit instance\n         * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n         * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <R extends keyof PaginatingEndpoints>(octokit: Octokit, route: R, parameters?: PaginatingEndpoints[R][\"parameters\"]): AsyncIterableIterator<OctokitTypes.OctokitResponse<DataType<PaginatingEndpoints[R][\"response\"]>>>;\n        /**\n         * Get an async iterator to paginate a request using an unknown endpoint route string and optional parameters\n         *\n         * @see {link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of} for await...of\n         *\n         * @param {object} octokit Octokit instance\n         * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n         * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <T, R extends OctokitTypes.Route = OctokitTypes.Route>(octokit: Octokit, route: R, parameters?: R extends keyof PaginatingEndpoints ? PaginatingEndpoints[R][\"parameters\"] : OctokitTypes.RequestParameters): AsyncIterableIterator<OctokitTypes.OctokitResponse<PaginationResults<T>>>;\n        /**\n         * Get an async iterator to paginate a request using a request method and optional parameters\n         *\n         * @see {link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of} for await...of\n         *\n         * @param {object} octokit Octokit instance\n         * @param {string} request `@octokit/request` or `octokit.request` method\n         * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <R extends OctokitTypes.RequestInterface>(octokit: Octokit, request: R, parameters?: Parameters<R>[0]): AsyncIterableIterator<NormalizeResponse<OctokitTypes.GetResponseTypeFromEndpointMethod<R>>>;\n    };\n}\n","node_modules/@octokit/plugin-paginate-rest/dist-types/version.d.ts":"export declare const VERSION = \"2.9.1\";\n","node_modules/@octokit/plugin-paginate-rest/dist-types/generated/paginating-endpoints.d.ts":"import { Endpoints } from \"@octokit/types\";\nexport interface PaginatingEndpoints {\n    /**\n     * @see https://docs.github.com/v3/apps/#list-installations-for-the-authenticated-app\n     */\n    \"GET /app/installations\": {\n        parameters: Endpoints[\"GET /app/installations\"][\"parameters\"];\n        response: Endpoints[\"GET /app/installations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#list-your-grants\n     */\n    \"GET /applications/grants\": {\n        parameters: Endpoints[\"GET /applications/grants\"][\"parameters\"];\n        response: Endpoints[\"GET /applications/grants\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations\n     */\n    \"GET /authorizations\": {\n        parameters: Endpoints[\"GET /authorizations\"][\"parameters\"];\n        response: Endpoints[\"GET /authorizations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-selected-organizations-enabled-for-github-actions-in-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/permissions/organizations\": {\n        parameters: Endpoints[\"GET /enterprises/{enterprise}/actions/permissions/organizations\"][\"parameters\"];\n        response: Endpoints[\"GET /enterprises/{enterprise}/actions/permissions/organizations\"][\"response\"] & {\n            data: Endpoints[\"GET /enterprises/{enterprise}/actions/permissions/organizations\"][\"response\"][\"data\"][\"organizations\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runner-groups-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runner-groups\": {\n        parameters: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups\"][\"parameters\"];\n        response: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups\"][\"response\"] & {\n            data: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups\"][\"response\"][\"data\"][\"runner_groups\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\": {\n        parameters: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\"][\"parameters\"];\n        response: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\"][\"response\"] & {\n            data: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\"][\"response\"][\"data\"][\"organizations\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-in-a-group-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\": {\n        parameters: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\"][\"parameters\"];\n        response: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\"][\"response\"] & {\n            data: Endpoints[\"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\"][\"response\"][\"data\"][\"runners\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runners\": {\n        parameters: Endpoints[\"GET /enterprises/{enterprise}/actions/runners\"][\"parameters\"];\n        response: Endpoints[\"GET /enterprises/{enterprise}/actions/runners\"][\"response\"] & {\n            data: Endpoints[\"GET /enterprises/{enterprise}/actions/runners\"][\"response\"][\"data\"][\"runners\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-runner-applications-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runners/downloads\": {\n        parameters: Endpoints[\"GET /enterprises/{enterprise}/actions/runners/downloads\"][\"parameters\"];\n        response: Endpoints[\"GET /enterprises/{enterprise}/actions/runners/downloads\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-events\n     */\n    \"GET /events\": {\n        parameters: Endpoints[\"GET /events\"][\"parameters\"];\n        response: Endpoints[\"GET /events\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/gists/#list-gists-for-the-authenticated-user\n     */\n    \"GET /gists\": {\n        parameters: Endpoints[\"GET /gists\"][\"parameters\"];\n        response: Endpoints[\"GET /gists\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/gists/#list-public-gists\n     */\n    \"GET /gists/public\": {\n        parameters: Endpoints[\"GET /gists/public\"][\"parameters\"];\n        response: Endpoints[\"GET /gists/public\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/gists/#list-starred-gists\n     */\n    \"GET /gists/starred\": {\n        parameters: Endpoints[\"GET /gists/starred\"][\"parameters\"];\n        response: Endpoints[\"GET /gists/starred\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/gists#list-gist-comments\n     */\n    \"GET /gists/{gist_id}/comments\": {\n        parameters: Endpoints[\"GET /gists/{gist_id}/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /gists/{gist_id}/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/gists/#list-gist-commits\n     */\n    \"GET /gists/{gist_id}/commits\": {\n        parameters: Endpoints[\"GET /gists/{gist_id}/commits\"][\"parameters\"];\n        response: Endpoints[\"GET /gists/{gist_id}/commits\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/gists/#list-gist-forks\n     */\n    \"GET /gists/{gist_id}/forks\": {\n        parameters: Endpoints[\"GET /gists/{gist_id}/forks\"][\"parameters\"];\n        response: Endpoints[\"GET /gists/{gist_id}/forks\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation\n     */\n    \"GET /installation/repositories\": {\n        parameters: Endpoints[\"GET /installation/repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /installation/repositories\"][\"response\"] & {\n            data: Endpoints[\"GET /installation/repositories\"][\"response\"][\"data\"][\"repositories\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/issues/#list-issues-assigned-to-the-authenticated-user\n     */\n    \"GET /issues\": {\n        parameters: Endpoints[\"GET /issues\"][\"parameters\"];\n        response: Endpoints[\"GET /issues\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-plans\n     */\n    \"GET /marketplace_listing/plans\": {\n        parameters: Endpoints[\"GET /marketplace_listing/plans\"][\"parameters\"];\n        response: Endpoints[\"GET /marketplace_listing/plans\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan\n     */\n    \"GET /marketplace_listing/plans/{plan_id}/accounts\": {\n        parameters: Endpoints[\"GET /marketplace_listing/plans/{plan_id}/accounts\"][\"parameters\"];\n        response: Endpoints[\"GET /marketplace_listing/plans/{plan_id}/accounts\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-plans-stubbed\n     */\n    \"GET /marketplace_listing/stubbed/plans\": {\n        parameters: Endpoints[\"GET /marketplace_listing/stubbed/plans\"][\"parameters\"];\n        response: Endpoints[\"GET /marketplace_listing/stubbed/plans\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed\n     */\n    \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\": {\n        parameters: Endpoints[\"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"][\"parameters\"];\n        response: Endpoints[\"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories\n     */\n    \"GET /networks/{owner}/{repo}/events\": {\n        parameters: Endpoints[\"GET /networks/{owner}/{repo}/events\"][\"parameters\"];\n        response: Endpoints[\"GET /networks/{owner}/{repo}/events\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user\n     */\n    \"GET /notifications\": {\n        parameters: Endpoints[\"GET /notifications\"][\"parameters\"];\n        response: Endpoints[\"GET /notifications\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-organizations\n     */\n    \"GET /organizations\": {\n        parameters: Endpoints[\"GET /organizations\"][\"parameters\"];\n        response: Endpoints[\"GET /organizations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization\n     */\n    \"GET /orgs/{org}/actions/permissions/repositories\": {\n        parameters: Endpoints[\"GET /orgs/{org}/actions/permissions/repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/actions/permissions/repositories\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/actions/permissions/repositories\"][\"response\"][\"data\"][\"repositories\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runner-groups\": {\n        parameters: Endpoints[\"GET /orgs/{org}/actions/runner-groups\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/actions/runner-groups\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/actions/runner-groups\"][\"response\"][\"data\"][\"runner_groups\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization\n     */\n    \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\": {\n        parameters: Endpoints[\"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\"][\"response\"][\"data\"][\"repositories\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\": {\n        parameters: Endpoints[\"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\"][\"response\"][\"data\"][\"runners\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runners\": {\n        parameters: Endpoints[\"GET /orgs/{org}/actions/runners\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/actions/runners\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/actions/runners\"][\"response\"][\"data\"][\"runners\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runners/downloads\": {\n        parameters: Endpoints[\"GET /orgs/{org}/actions/runners/downloads\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/actions/runners/downloads\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-organization-secrets\n     */\n    \"GET /orgs/{org}/actions/secrets\": {\n        parameters: Endpoints[\"GET /orgs/{org}/actions/secrets\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/actions/secrets\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/actions/secrets\"][\"response\"][\"data\"][\"secrets\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret\n     */\n    \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\": {\n        parameters: Endpoints[\"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"][\"response\"][\"data\"][\"repositories\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization\n     */\n    \"GET /orgs/{org}/blocks\": {\n        parameters: Endpoints[\"GET /orgs/{org}/blocks\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/blocks\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization\n     */\n    \"GET /orgs/{org}/credential-authorizations\": {\n        parameters: Endpoints[\"GET /orgs/{org}/credential-authorizations\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/credential-authorizations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-organization-events\n     */\n    \"GET /orgs/{org}/events\": {\n        parameters: Endpoints[\"GET /orgs/{org}/events\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/events\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations\n     */\n    \"GET /orgs/{org}/failed_invitations\": {\n        parameters: Endpoints[\"GET /orgs/{org}/failed_invitations\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/failed_invitations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-organization-webhooks\n     */\n    \"GET /orgs/{org}/hooks\": {\n        parameters: Endpoints[\"GET /orgs/{org}/hooks\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/hooks\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-app-installations-for-an-organization\n     */\n    \"GET /orgs/{org}/installations\": {\n        parameters: Endpoints[\"GET /orgs/{org}/installations\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/installations\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/installations\"][\"response\"][\"data\"][\"installations\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations\n     */\n    \"GET /orgs/{org}/invitations\": {\n        parameters: Endpoints[\"GET /orgs/{org}/invitations\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/invitations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams\n     */\n    \"GET /orgs/{org}/invitations/{invitation_id}/teams\": {\n        parameters: Endpoints[\"GET /orgs/{org}/invitations/{invitation_id}/teams\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/invitations/{invitation_id}/teams\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/issues/#list-organization-issues-assigned-to-the-authenticated-user\n     */\n    \"GET /orgs/{org}/issues\": {\n        parameters: Endpoints[\"GET /orgs/{org}/issues\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/issues\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-organization-members\n     */\n    \"GET /orgs/{org}/members\": {\n        parameters: Endpoints[\"GET /orgs/{org}/members\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/members\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#list-organization-migrations\n     */\n    \"GET /orgs/{org}/migrations\": {\n        parameters: Endpoints[\"GET /orgs/{org}/migrations\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/migrations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#list-repositories-in-an-organization-migration\n     */\n    \"GET /orgs/{org}/migrations/{migration_id}/repositories\": {\n        parameters: Endpoints[\"GET /orgs/{org}/migrations/{migration_id}/repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/migrations/{migration_id}/repositories\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization\n     */\n    \"GET /orgs/{org}/outside_collaborators\": {\n        parameters: Endpoints[\"GET /orgs/{org}/outside_collaborators\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/outside_collaborators\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/projects/#list-organization-projects\n     */\n    \"GET /orgs/{org}/projects\": {\n        parameters: Endpoints[\"GET /orgs/{org}/projects\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/projects\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-public-organization-members\n     */\n    \"GET /orgs/{org}/public_members\": {\n        parameters: Endpoints[\"GET /orgs/{org}/public_members\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/public_members\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/repos/#list-organization-repositories\n     */\n    \"GET /orgs/{org}/repos\": {\n        parameters: Endpoints[\"GET /orgs/{org}/repos\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/repos\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization\n     */\n    \"GET /orgs/{org}/team-sync/groups\": {\n        parameters: Endpoints[\"GET /orgs/{org}/team-sync/groups\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/team-sync/groups\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/team-sync/groups\"][\"response\"][\"data\"][\"groups\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/teams/#list-teams\n     */\n    \"GET /orgs/{org}/teams\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-discussions\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-discussion-comments\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-team-discussion\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-pending-team-invitations\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/invitations\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/invitations\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/invitations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-team-members\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/members\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/members\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/members\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/teams/#list-team-projects\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/projects\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/projects\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/projects\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/teams/#list-team-repositories\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/repos\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/repos\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/repos\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\"][\"response\"] & {\n            data: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\"][\"response\"][\"data\"][\"groups\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/teams/#list-child-teams\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/teams\": {\n        parameters: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/teams\"][\"parameters\"];\n        response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/teams\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/projects#list-project-cards\n     */\n    \"GET /projects/columns/{column_id}/cards\": {\n        parameters: Endpoints[\"GET /projects/columns/{column_id}/cards\"][\"parameters\"];\n        response: Endpoints[\"GET /projects/columns/{column_id}/cards\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/projects#list-project-collaborators\n     */\n    \"GET /projects/{project_id}/collaborators\": {\n        parameters: Endpoints[\"GET /projects/{project_id}/collaborators\"][\"parameters\"];\n        response: Endpoints[\"GET /projects/{project_id}/collaborators\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/projects#list-project-columns\n     */\n    \"GET /projects/{project_id}/columns\": {\n        parameters: Endpoints[\"GET /projects/{project_id}/columns\"][\"parameters\"];\n        response: Endpoints[\"GET /projects/{project_id}/columns\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/artifacts\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts\"][\"response\"][\"data\"][\"artifacts\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/runners\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/runners\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runners\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/actions/runners\"][\"response\"][\"data\"][\"runners\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/runners/downloads\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/runners/downloads\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runners/downloads\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs\"][\"response\"][\"data\"][\"workflow_runs\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"][\"response\"][\"data\"][\"artifacts\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"][\"response\"][\"data\"][\"jobs\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-repository-secrets\n     */\n    \"GET /repos/{owner}/{repo}/actions/secrets\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets\"][\"response\"][\"data\"][\"secrets\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-repository-workflows\n     */\n    \"GET /repos/{owner}/{repo}/actions/workflows\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows\"][\"response\"][\"data\"][\"workflows\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-workflow-runs\n     */\n    \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"][\"response\"][\"data\"][\"workflow_runs\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-assignees\n     */\n    \"GET /repos/{owner}/{repo}/assignees\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/assignees\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/assignees\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-branches\n     */\n    \"GET /repos/{owner}/{repo}/branches\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/branches\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/branches\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/checks#list-check-run-annotations\n     */\n    \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite\n     */\n    \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"][\"response\"][\"data\"][\"check_runs\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/code-scanning/alerts\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/alerts\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/alerts\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/code-scanning/#list-recent-analyses\n     */\n    \"GET /repos/{owner}/{repo}/code-scanning/analyses\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/analyses\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/analyses\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-repository-collaborators\n     */\n    \"GET /repos/{owner}/{repo}/collaborators\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/collaborators\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/collaborators\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-commit-comments-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/comments\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-commit-comment\n     */\n    \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-commits\n     */\n    \"GET /repos/{owner}/{repo}/commits\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/commits\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/commits\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-branches-for-head-commit\n     */\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-commit-comments\n     */\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-pull-requests-associated-with-a-commit\n     */\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference\n     */\n    \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"][\"response\"][\"data\"][\"check_runs\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference\n     */\n    \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"][\"response\"][\"data\"][\"check_suites\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-commit-statuses-for-a-reference\n     */\n    \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repository-contributors\n     */\n    \"GET /repos/{owner}/{repo}/contributors\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/contributors\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/contributors\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-deployments\n     */\n    \"GET /repos/{owner}/{repo}/deployments\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/deployments\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/deployments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-deployment-statuses\n     */\n    \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repository-events\n     */\n    \"GET /repos/{owner}/{repo}/events\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/events\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/events\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-forks\n     */\n    \"GET /repos/{owner}/{repo}/forks\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/forks\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/forks\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/git#list-matching-references\n     */\n    \"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-repository-webhooks\n     */\n    \"GET /repos/{owner}/{repo}/hooks\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/hooks\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/hooks\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-repository-invitations\n     */\n    \"GET /repos/{owner}/{repo}/invitations\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/invitations\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/invitations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/issues/#list-repository-issues\n     */\n    \"GET /repos/{owner}/{repo}/issues\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/issues/comments\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-an-issue-comment\n     */\n    \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/issues/events\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues/events\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues/events\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-issue-comments\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-issue-events\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-labels-for-an-issue\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-an-issue\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-deploy-keys\n     */\n    \"GET /repos/{owner}/{repo}/keys\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/keys\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/keys\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-labels-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/labels\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/labels\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/labels\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-milestones\n     */\n    \"GET /repos/{owner}/{repo}/milestones\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/milestones\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/milestones\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone\n     */\n    \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user\n     */\n    \"GET /repos/{owner}/{repo}/notifications\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/notifications\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/notifications\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-github-pages-builds\n     */\n    \"GET /repos/{owner}/{repo}/pages/builds\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pages/builds\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pages/builds\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/projects/#list-repository-projects\n     */\n    \"GET /repos/{owner}/{repo}/projects\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/projects\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/projects\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/pulls/#list-pull-requests\n     */\n    \"GET /repos/{owner}/{repo}/pulls\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/pulls/comments\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment\n     */\n    \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/pulls/#list-commits-on-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/pulls/#list-pull-requests-files\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-requested-reviewers-for-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"response\"] & {\n            data: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"response\"][\"data\"][\"users\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-releases\n     */\n    \"GET /repos/{owner}/{repo}/releases\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/releases\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/releases\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-release-assets\n     */\n    \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/secret-scanning/alerts\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-stargazers\n     */\n    \"GET /repos/{owner}/{repo}/stargazers\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/stargazers\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/stargazers\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-watchers\n     */\n    \"GET /repos/{owner}/{repo}/subscribers\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/subscribers\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/subscribers\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repository-tags\n     */\n    \"GET /repos/{owner}/{repo}/tags\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/tags\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/tags\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repository-teams\n     */\n    \"GET /repos/{owner}/{repo}/teams\": {\n        parameters: Endpoints[\"GET /repos/{owner}/{repo}/teams\"][\"parameters\"];\n        response: Endpoints[\"GET /repos/{owner}/{repo}/teams\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/repos/#list-public-repositories\n     */\n    \"GET /repositories\": {\n        parameters: Endpoints[\"GET /repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /repositories\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise\n     */\n    \"GET /scim/v2/enterprises/{enterprise}/Groups\": {\n        parameters: Endpoints[\"GET /scim/v2/enterprises/{enterprise}/Groups\"][\"parameters\"];\n        response: Endpoints[\"GET /scim/v2/enterprises/{enterprise}/Groups\"][\"response\"] & {\n            data: Endpoints[\"GET /scim/v2/enterprises/{enterprise}/Groups\"][\"response\"][\"data\"][\"Resources\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise\n     */\n    \"GET /scim/v2/enterprises/{enterprise}/Users\": {\n        parameters: Endpoints[\"GET /scim/v2/enterprises/{enterprise}/Users\"][\"parameters\"];\n        response: Endpoints[\"GET /scim/v2/enterprises/{enterprise}/Users\"][\"response\"] & {\n            data: Endpoints[\"GET /scim/v2/enterprises/{enterprise}/Users\"][\"response\"][\"data\"][\"Resources\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/scim/#list-scim-provisioned-identities\n     */\n    \"GET /scim/v2/organizations/{org}/Users\": {\n        parameters: Endpoints[\"GET /scim/v2/organizations/{org}/Users\"][\"parameters\"];\n        response: Endpoints[\"GET /scim/v2/organizations/{org}/Users\"][\"response\"] & {\n            data: Endpoints[\"GET /scim/v2/organizations/{org}/Users\"][\"response\"][\"data\"][\"Resources\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/search/#search-code\n     */\n    \"GET /search/code\": {\n        parameters: Endpoints[\"GET /search/code\"][\"parameters\"];\n        response: Endpoints[\"GET /search/code\"][\"response\"] & {\n            data: Endpoints[\"GET /search/code\"][\"response\"][\"data\"][\"items\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/search/#search-commits\n     */\n    \"GET /search/commits\": {\n        parameters: Endpoints[\"GET /search/commits\"][\"parameters\"];\n        response: Endpoints[\"GET /search/commits\"][\"response\"] & {\n            data: Endpoints[\"GET /search/commits\"][\"response\"][\"data\"][\"items\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/search/#search-issues-and-pull-requests\n     */\n    \"GET /search/issues\": {\n        parameters: Endpoints[\"GET /search/issues\"][\"parameters\"];\n        response: Endpoints[\"GET /search/issues\"][\"response\"] & {\n            data: Endpoints[\"GET /search/issues\"][\"response\"][\"data\"][\"items\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/search/#search-labels\n     */\n    \"GET /search/labels\": {\n        parameters: Endpoints[\"GET /search/labels\"][\"parameters\"];\n        response: Endpoints[\"GET /search/labels\"][\"response\"] & {\n            data: Endpoints[\"GET /search/labels\"][\"response\"][\"data\"][\"items\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/search/#search-repositories\n     */\n    \"GET /search/repositories\": {\n        parameters: Endpoints[\"GET /search/repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /search/repositories\"][\"response\"] & {\n            data: Endpoints[\"GET /search/repositories\"][\"response\"][\"data\"][\"items\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/search/#search-topics\n     */\n    \"GET /search/topics\": {\n        parameters: Endpoints[\"GET /search/topics\"][\"parameters\"];\n        response: Endpoints[\"GET /search/topics\"][\"response\"] & {\n            data: Endpoints[\"GET /search/topics\"][\"response\"][\"data\"][\"items\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/search/#search-users\n     */\n    \"GET /search/users\": {\n        parameters: Endpoints[\"GET /search/users\"][\"parameters\"];\n        response: Endpoints[\"GET /search/users\"][\"response\"] & {\n            data: Endpoints[\"GET /search/users\"][\"response\"][\"data\"][\"items\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-discussions-legacy\n     */\n    \"GET /teams/{team_id}/discussions\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/discussions\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/discussions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy\n     */\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/discussions/{discussion_number}/comments\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/discussions/{discussion_number}/comments\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy\n     */\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy\n     */\n    \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/discussions/{discussion_number}/reactions\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/discussions/{discussion_number}/reactions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy\n     */\n    \"GET /teams/{team_id}/invitations\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/invitations\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/invitations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-team-members-legacy\n     */\n    \"GET /teams/{team_id}/members\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/members\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/members\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/teams/#list-team-projects-legacy\n     */\n    \"GET /teams/{team_id}/projects\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/projects\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/projects\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/teams/#list-team-repositories-legacy\n     */\n    \"GET /teams/{team_id}/repos\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/repos\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/repos\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy\n     */\n    \"GET /teams/{team_id}/team-sync/group-mappings\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/team-sync/group-mappings\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/team-sync/group-mappings\"][\"response\"] & {\n            data: Endpoints[\"GET /teams/{team_id}/team-sync/group-mappings\"][\"response\"][\"data\"][\"groups\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/teams/#list-child-teams-legacy\n     */\n    \"GET /teams/{team_id}/teams\": {\n        parameters: Endpoints[\"GET /teams/{team_id}/teams\"][\"parameters\"];\n        response: Endpoints[\"GET /teams/{team_id}/teams\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user\n     */\n    \"GET /user/blocks\": {\n        parameters: Endpoints[\"GET /user/blocks\"][\"parameters\"];\n        response: Endpoints[\"GET /user/blocks\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user\n     */\n    \"GET /user/emails\": {\n        parameters: Endpoints[\"GET /user/emails\"][\"parameters\"];\n        response: Endpoints[\"GET /user/emails\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user\n     */\n    \"GET /user/followers\": {\n        parameters: Endpoints[\"GET /user/followers\"][\"parameters\"];\n        response: Endpoints[\"GET /user/followers\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows\n     */\n    \"GET /user/following\": {\n        parameters: Endpoints[\"GET /user/following\"][\"parameters\"];\n        response: Endpoints[\"GET /user/following\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user\n     */\n    \"GET /user/gpg_keys\": {\n        parameters: Endpoints[\"GET /user/gpg_keys\"][\"parameters\"];\n        response: Endpoints[\"GET /user/gpg_keys\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token\n     */\n    \"GET /user/installations\": {\n        parameters: Endpoints[\"GET /user/installations\"][\"parameters\"];\n        response: Endpoints[\"GET /user/installations\"][\"response\"] & {\n            data: Endpoints[\"GET /user/installations\"][\"response\"][\"data\"][\"installations\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token\n     */\n    \"GET /user/installations/{installation_id}/repositories\": {\n        parameters: Endpoints[\"GET /user/installations/{installation_id}/repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /user/installations/{installation_id}/repositories\"][\"response\"] & {\n            data: Endpoints[\"GET /user/installations/{installation_id}/repositories\"][\"response\"][\"data\"][\"repositories\"];\n        };\n    };\n    /**\n     * @see https://docs.github.com/v3/issues/#list-user-account-issues-assigned-to-the-authenticated-user\n     */\n    \"GET /user/issues\": {\n        parameters: Endpoints[\"GET /user/issues\"][\"parameters\"];\n        response: Endpoints[\"GET /user/issues\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user\n     */\n    \"GET /user/keys\": {\n        parameters: Endpoints[\"GET /user/keys\"][\"parameters\"];\n        response: Endpoints[\"GET /user/keys\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user\n     */\n    \"GET /user/marketplace_purchases\": {\n        parameters: Endpoints[\"GET /user/marketplace_purchases\"][\"parameters\"];\n        response: Endpoints[\"GET /user/marketplace_purchases\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed\n     */\n    \"GET /user/marketplace_purchases/stubbed\": {\n        parameters: Endpoints[\"GET /user/marketplace_purchases/stubbed\"][\"parameters\"];\n        response: Endpoints[\"GET /user/marketplace_purchases/stubbed\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user\n     */\n    \"GET /user/memberships/orgs\": {\n        parameters: Endpoints[\"GET /user/memberships/orgs\"][\"parameters\"];\n        response: Endpoints[\"GET /user/memberships/orgs\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#list-user-migrations\n     */\n    \"GET /user/migrations\": {\n        parameters: Endpoints[\"GET /user/migrations\"][\"parameters\"];\n        response: Endpoints[\"GET /user/migrations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#list-repositories-for-a-user-migration\n     */\n    \"GET /user/migrations/{migration_id}/repositories\": {\n        parameters: Endpoints[\"GET /user/migrations/{migration_id}/repositories\"][\"parameters\"];\n        response: Endpoints[\"GET /user/migrations/{migration_id}/repositories\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-organizations-for-the-authenticated-user\n     */\n    \"GET /user/orgs\": {\n        parameters: Endpoints[\"GET /user/orgs\"][\"parameters\"];\n        response: Endpoints[\"GET /user/orgs\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user\n     */\n    \"GET /user/public_emails\": {\n        parameters: Endpoints[\"GET /user/public_emails\"][\"parameters\"];\n        response: Endpoints[\"GET /user/public_emails\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repositories-for-the-authenticated-user\n     */\n    \"GET /user/repos\": {\n        parameters: Endpoints[\"GET /user/repos\"][\"parameters\"];\n        response: Endpoints[\"GET /user/repos\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-repository-invitations-for-the-authenticated-user\n     */\n    \"GET /user/repository_invitations\": {\n        parameters: Endpoints[\"GET /user/repository_invitations\"][\"parameters\"];\n        response: Endpoints[\"GET /user/repository_invitations\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user\n     */\n    \"GET /user/starred\": {\n        parameters: Endpoints[\"GET /user/starred\"][\"parameters\"];\n        response: Endpoints[\"GET /user/starred\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user\n     */\n    \"GET /user/subscriptions\": {\n        parameters: Endpoints[\"GET /user/subscriptions\"][\"parameters\"];\n        response: Endpoints[\"GET /user/subscriptions\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/teams/#list-teams-for-the-authenticated-user\n     */\n    \"GET /user/teams\": {\n        parameters: Endpoints[\"GET /user/teams\"][\"parameters\"];\n        response: Endpoints[\"GET /user/teams\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/users/#list-users\n     */\n    \"GET /users\": {\n        parameters: Endpoints[\"GET /users\"][\"parameters\"];\n        response: Endpoints[\"GET /users\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user\n     */\n    \"GET /users/{username}/events\": {\n        parameters: Endpoints[\"GET /users/{username}/events\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/events\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user\n     */\n    \"GET /users/{username}/events/orgs/{org}\": {\n        parameters: Endpoints[\"GET /users/{username}/events/orgs/{org}\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/events/orgs/{org}\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-events-for-a-user\n     */\n    \"GET /users/{username}/events/public\": {\n        parameters: Endpoints[\"GET /users/{username}/events/public\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/events/public\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-followers-of-a-user\n     */\n    \"GET /users/{username}/followers\": {\n        parameters: Endpoints[\"GET /users/{username}/followers\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/followers\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-the-people-a-user-follows\n     */\n    \"GET /users/{username}/following\": {\n        parameters: Endpoints[\"GET /users/{username}/following\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/following\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/gists/#list-gists-for-a-user\n     */\n    \"GET /users/{username}/gists\": {\n        parameters: Endpoints[\"GET /users/{username}/gists\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/gists\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user\n     */\n    \"GET /users/{username}/gpg_keys\": {\n        parameters: Endpoints[\"GET /users/{username}/gpg_keys\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/gpg_keys\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-public-keys-for-a-user\n     */\n    \"GET /users/{username}/keys\": {\n        parameters: Endpoints[\"GET /users/{username}/keys\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/keys\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-organizations-for-a-user\n     */\n    \"GET /users/{username}/orgs\": {\n        parameters: Endpoints[\"GET /users/{username}/orgs\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/orgs\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/projects/#list-user-projects\n     */\n    \"GET /users/{username}/projects\": {\n        parameters: Endpoints[\"GET /users/{username}/projects\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/projects\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user\n     */\n    \"GET /users/{username}/received_events\": {\n        parameters: Endpoints[\"GET /users/{username}/received_events\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/received_events\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user\n     */\n    \"GET /users/{username}/received_events/public\": {\n        parameters: Endpoints[\"GET /users/{username}/received_events/public\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/received_events/public\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repositories-for-a-user\n     */\n    \"GET /users/{username}/repos\": {\n        parameters: Endpoints[\"GET /users/{username}/repos\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/repos\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user\n     */\n    \"GET /users/{username}/starred\": {\n        parameters: Endpoints[\"GET /users/{username}/starred\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/starred\"][\"response\"];\n    };\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user\n     */\n    \"GET /users/{username}/subscriptions\": {\n        parameters: Endpoints[\"GET /users/{username}/subscriptions\"][\"parameters\"];\n        response: Endpoints[\"GET /users/{username}/subscriptions\"][\"response\"];\n    };\n}\n","node_modules/@octokit/plugin-paginate-rest/dist-web/index.js":"const VERSION = \"2.9.1\";\n\n/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\nfunction normalizePaginatedListResponse(response) {\n    const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n    if (!responseNeedsNormalization)\n        return response;\n    // keep the additional properties intact as there is currently no other way\n    // to retrieve the same information.\n    const incompleteResults = response.data.incomplete_results;\n    const repositorySelection = response.data.repository_selection;\n    const totalCount = response.data.total_count;\n    delete response.data.incomplete_results;\n    delete response.data.repository_selection;\n    delete response.data.total_count;\n    const namespaceKey = Object.keys(response.data)[0];\n    const data = response.data[namespaceKey];\n    response.data = data;\n    if (typeof incompleteResults !== \"undefined\") {\n        response.data.incomplete_results = incompleteResults;\n    }\n    if (typeof repositorySelection !== \"undefined\") {\n        response.data.repository_selection = repositorySelection;\n    }\n    response.data.total_count = totalCount;\n    return response;\n}\n\nfunction iterator(octokit, route, parameters) {\n    const options = typeof route === \"function\"\n        ? route.endpoint(parameters)\n        : octokit.request.endpoint(route, parameters);\n    const requestMethod = typeof route === \"function\" ? route : octokit.request;\n    const method = options.method;\n    const headers = options.headers;\n    let url = options.url;\n    return {\n        [Symbol.asyncIterator]: () => ({\n            async next() {\n                if (!url)\n                    return { done: true };\n                const response = await requestMethod({ method, url, headers });\n                const normalizedResponse = normalizePaginatedListResponse(response);\n                // `response.headers.link` format:\n                // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n                // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n                url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n                return { value: normalizedResponse };\n            },\n        }),\n    };\n}\n\nfunction paginate(octokit, route, parameters, mapFn) {\n    if (typeof parameters === \"function\") {\n        mapFn = parameters;\n        parameters = undefined;\n    }\n    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\nfunction gather(octokit, results, iterator, mapFn) {\n    return iterator.next().then((result) => {\n        if (result.done) {\n            return results;\n        }\n        let earlyExit = false;\n        function done() {\n            earlyExit = true;\n        }\n        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n        if (earlyExit) {\n            return results;\n        }\n        return gather(octokit, results, iterator, mapFn);\n    });\n}\n\nconst composePaginateRest = Object.assign(paginate, {\n    iterator,\n});\n\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nfunction paginateRest(octokit) {\n    return {\n        paginate: Object.assign(paginate.bind(null, octokit), {\n            iterator: iterator.bind(null, octokit),\n        }),\n    };\n}\npaginateRest.VERSION = VERSION;\n\nexport { composePaginateRest, paginateRest };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/plugin-request-log/package.json":"{\n  \"name\": \"@octokit/plugin-request-log\",\n  \"description\": \"Log all requests and request errors\",\n  \"version\": \"1.0.3\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"github\",\n    \"api\",\n    \"sdk\",\n    \"toolkit\"\n  ],\n  \"repository\": \"https://github.com/octokit/plugin-request-log.js\",\n  \"dependencies\": {},\n  \"peerDependencies\": {\n    \"@octokit/core\": \">=3\"\n  },\n  \"devDependencies\": {\n    \"@octokit/core\": \"^3.0.0\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/fetch-mock\": \"^7.3.2\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/node\": \"^14.0.4\",\n    \"fetch-mock\": \"^9.0.0\",\n    \"jest\": \"^26.0.0\",\n    \"prettier\": \"^2.0.1\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"ts-jest\": \"^26.0.0\",\n    \"typescript\": \"^4.0.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/plugin-request-log/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst VERSION = \"1.0.3\";\n\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\n\nfunction requestLog(octokit) {\n  octokit.hook.wrap(\"request\", (request, options) => {\n    octokit.log.debug(\"request\", options);\n    const start = Date.now();\n    const requestOptions = octokit.request.endpoint.parse(options);\n    const path = requestOptions.url.replace(options.baseUrl, \"\");\n    return request(options).then(response => {\n      octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);\n      return response;\n    }).catch(error => {\n      octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);\n      throw error;\n    });\n  });\n}\nrequestLog.VERSION = VERSION;\n\nexports.requestLog = requestLog;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/plugin-request-log/dist-src/index.js":"import { VERSION } from \"./version\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport function requestLog(octokit) {\n    octokit.hook.wrap(\"request\", (request, options) => {\n        octokit.log.debug(\"request\", options);\n        const start = Date.now();\n        const requestOptions = octokit.request.endpoint.parse(options);\n        const path = requestOptions.url.replace(options.baseUrl, \"\");\n        return request(options)\n            .then((response) => {\n            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);\n            return response;\n        })\n            .catch((error) => {\n            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);\n            throw error;\n        });\n    });\n}\nrequestLog.VERSION = VERSION;\n","node_modules/@octokit/plugin-request-log/dist-src/version.js":"export const VERSION = \"1.0.3\";\n","node_modules/@octokit/plugin-request-log/dist-types/index.d.ts":"import type { Octokit } from \"@octokit/core\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport declare function requestLog(octokit: Octokit): void;\nexport declare namespace requestLog {\n    var VERSION: string;\n}\n","node_modules/@octokit/plugin-request-log/dist-types/version.d.ts":"export declare const VERSION = \"1.0.3\";\n","node_modules/@octokit/plugin-request-log/dist-web/index.js":"const VERSION = \"1.0.3\";\n\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nfunction requestLog(octokit) {\n    octokit.hook.wrap(\"request\", (request, options) => {\n        octokit.log.debug(\"request\", options);\n        const start = Date.now();\n        const requestOptions = octokit.request.endpoint.parse(options);\n        const path = requestOptions.url.replace(options.baseUrl, \"\");\n        return request(options)\n            .then((response) => {\n            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);\n            return response;\n        })\n            .catch((error) => {\n            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);\n            throw error;\n        });\n    });\n}\nrequestLog.VERSION = VERSION;\n\nexport { requestLog };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/plugin-rest-endpoint-methods/package.json":"{\n  \"name\": \"@octokit/plugin-rest-endpoint-methods\",\n  \"description\": \"Octokit plugin adding one method for all of api.github.com REST API endpoints\",\n  \"version\": \"4.10.3\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"github\",\n    \"api\",\n    \"sdk\",\n    \"toolkit\"\n  ],\n  \"repository\": \"https://github.com/octokit/plugin-rest-endpoint-methods.js\",\n  \"dependencies\": {\n    \"@octokit/types\": \"^6.8.3\",\n    \"deprecation\": \"^2.3.1\"\n  },\n  \"peerDependencies\": {\n    \"@octokit/core\": \">=3\"\n  },\n  \"devDependencies\": {\n    \"@gimenete/type-writer\": \"^0.1.5\",\n    \"@octokit/core\": \"^3.0.0\",\n    \"@octokit/graphql\": \"^4.3.1\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/fetch-mock\": \"^7.3.1\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/node\": \"^14.0.4\",\n    \"fetch-mock\": \"^9.0.0\",\n    \"fs-extra\": \"^9.0.0\",\n    \"jest\": \"^26.1.0\",\n    \"lodash.camelcase\": \"^4.3.0\",\n    \"lodash.set\": \"^4.3.2\",\n    \"lodash.upperfirst\": \"^4.3.1\",\n    \"mustache\": \"^4.0.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"prettier\": \"^2.0.1\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"sort-keys\": \"^4.0.0\",\n    \"string-to-jsdoc-comment\": \"^1.0.0\",\n    \"ts-jest\": \"^26.1.3\",\n    \"typescript\": \"^4.0.2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst Endpoints = {\n  actions: {\n    addSelectedRepoToOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"],\n    cancelWorkflowRun: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\"],\n    createOrUpdateOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}\"],\n    createOrUpdateRepoSecret: [\"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n    createRegistrationTokenForOrg: [\"POST /orgs/{org}/actions/runners/registration-token\"],\n    createRegistrationTokenForRepo: [\"POST /repos/{owner}/{repo}/actions/runners/registration-token\"],\n    createRemoveTokenForOrg: [\"POST /orgs/{org}/actions/runners/remove-token\"],\n    createRemoveTokenForRepo: [\"POST /repos/{owner}/{repo}/actions/runners/remove-token\"],\n    createWorkflowDispatch: [\"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\"],\n    deleteArtifact: [\"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"],\n    deleteOrgSecret: [\"DELETE /orgs/{org}/actions/secrets/{secret_name}\"],\n    deleteRepoSecret: [\"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n    deleteSelfHostedRunnerFromOrg: [\"DELETE /orgs/{org}/actions/runners/{runner_id}\"],\n    deleteSelfHostedRunnerFromRepo: [\"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\"],\n    deleteWorkflowRun: [\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n    deleteWorkflowRunLogs: [\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"],\n    disableSelectedRepositoryGithubActionsOrganization: [\"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\"],\n    disableWorkflow: [\"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\"],\n    downloadArtifact: [\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\"],\n    downloadJobLogsForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\"],\n    downloadWorkflowRunLogs: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"],\n    enableSelectedRepositoryGithubActionsOrganization: [\"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\"],\n    enableWorkflow: [\"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\"],\n    getAllowedActionsOrganization: [\"GET /orgs/{org}/actions/permissions/selected-actions\"],\n    getAllowedActionsRepository: [\"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\"],\n    getArtifact: [\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"],\n    getGithubActionsPermissionsOrganization: [\"GET /orgs/{org}/actions/permissions\"],\n    getGithubActionsPermissionsRepository: [\"GET /repos/{owner}/{repo}/actions/permissions\"],\n    getJobForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"],\n    getOrgPublicKey: [\"GET /orgs/{org}/actions/secrets/public-key\"],\n    getOrgSecret: [\"GET /orgs/{org}/actions/secrets/{secret_name}\"],\n    getRepoPermissions: [\"GET /repos/{owner}/{repo}/actions/permissions\", {}, {\n      renamed: [\"actions\", \"getGithubActionsPermissionsRepository\"]\n    }],\n    getRepoPublicKey: [\"GET /repos/{owner}/{repo}/actions/secrets/public-key\"],\n    getRepoSecret: [\"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n    getSelfHostedRunnerForOrg: [\"GET /orgs/{org}/actions/runners/{runner_id}\"],\n    getSelfHostedRunnerForRepo: [\"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\"],\n    getWorkflow: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"],\n    getWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n    getWorkflowRunUsage: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\"],\n    getWorkflowUsage: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\"],\n    listArtifactsForRepo: [\"GET /repos/{owner}/{repo}/actions/artifacts\"],\n    listJobsForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"],\n    listOrgSecrets: [\"GET /orgs/{org}/actions/secrets\"],\n    listRepoSecrets: [\"GET /repos/{owner}/{repo}/actions/secrets\"],\n    listRepoWorkflows: [\"GET /repos/{owner}/{repo}/actions/workflows\"],\n    listRunnerApplicationsForOrg: [\"GET /orgs/{org}/actions/runners/downloads\"],\n    listRunnerApplicationsForRepo: [\"GET /repos/{owner}/{repo}/actions/runners/downloads\"],\n    listSelectedReposForOrgSecret: [\"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"],\n    listSelectedRepositoriesEnabledGithubActionsOrganization: [\"GET /orgs/{org}/actions/permissions/repositories\"],\n    listSelfHostedRunnersForOrg: [\"GET /orgs/{org}/actions/runners\"],\n    listSelfHostedRunnersForRepo: [\"GET /repos/{owner}/{repo}/actions/runners\"],\n    listWorkflowRunArtifacts: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"],\n    listWorkflowRuns: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"],\n    listWorkflowRunsForRepo: [\"GET /repos/{owner}/{repo}/actions/runs\"],\n    reRunWorkflow: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"],\n    removeSelectedRepoFromOrgSecret: [\"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"],\n    setAllowedActionsOrganization: [\"PUT /orgs/{org}/actions/permissions/selected-actions\"],\n    setAllowedActionsRepository: [\"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\"],\n    setGithubActionsPermissionsOrganization: [\"PUT /orgs/{org}/actions/permissions\"],\n    setGithubActionsPermissionsRepository: [\"PUT /repos/{owner}/{repo}/actions/permissions\"],\n    setSelectedReposForOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\"],\n    setSelectedRepositoriesEnabledGithubActionsOrganization: [\"PUT /orgs/{org}/actions/permissions/repositories\"]\n  },\n  activity: {\n    checkRepoIsStarredByAuthenticatedUser: [\"GET /user/starred/{owner}/{repo}\"],\n    deleteRepoSubscription: [\"DELETE /repos/{owner}/{repo}/subscription\"],\n    deleteThreadSubscription: [\"DELETE /notifications/threads/{thread_id}/subscription\"],\n    getFeeds: [\"GET /feeds\"],\n    getRepoSubscription: [\"GET /repos/{owner}/{repo}/subscription\"],\n    getThread: [\"GET /notifications/threads/{thread_id}\"],\n    getThreadSubscriptionForAuthenticatedUser: [\"GET /notifications/threads/{thread_id}/subscription\"],\n    listEventsForAuthenticatedUser: [\"GET /users/{username}/events\"],\n    listNotificationsForAuthenticatedUser: [\"GET /notifications\"],\n    listOrgEventsForAuthenticatedUser: [\"GET /users/{username}/events/orgs/{org}\"],\n    listPublicEvents: [\"GET /events\"],\n    listPublicEventsForRepoNetwork: [\"GET /networks/{owner}/{repo}/events\"],\n    listPublicEventsForUser: [\"GET /users/{username}/events/public\"],\n    listPublicOrgEvents: [\"GET /orgs/{org}/events\"],\n    listReceivedEventsForUser: [\"GET /users/{username}/received_events\"],\n    listReceivedPublicEventsForUser: [\"GET /users/{username}/received_events/public\"],\n    listRepoEvents: [\"GET /repos/{owner}/{repo}/events\"],\n    listRepoNotificationsForAuthenticatedUser: [\"GET /repos/{owner}/{repo}/notifications\"],\n    listReposStarredByAuthenticatedUser: [\"GET /user/starred\"],\n    listReposStarredByUser: [\"GET /users/{username}/starred\"],\n    listReposWatchedByUser: [\"GET /users/{username}/subscriptions\"],\n    listStargazersForRepo: [\"GET /repos/{owner}/{repo}/stargazers\"],\n    listWatchedReposForAuthenticatedUser: [\"GET /user/subscriptions\"],\n    listWatchersForRepo: [\"GET /repos/{owner}/{repo}/subscribers\"],\n    markNotificationsAsRead: [\"PUT /notifications\"],\n    markRepoNotificationsAsRead: [\"PUT /repos/{owner}/{repo}/notifications\"],\n    markThreadAsRead: [\"PATCH /notifications/threads/{thread_id}\"],\n    setRepoSubscription: [\"PUT /repos/{owner}/{repo}/subscription\"],\n    setThreadSubscription: [\"PUT /notifications/threads/{thread_id}/subscription\"],\n    starRepoForAuthenticatedUser: [\"PUT /user/starred/{owner}/{repo}\"],\n    unstarRepoForAuthenticatedUser: [\"DELETE /user/starred/{owner}/{repo}\"]\n  },\n  apps: {\n    addRepoToInstallation: [\"PUT /user/installations/{installation_id}/repositories/{repository_id}\"],\n    checkToken: [\"POST /applications/{client_id}/token\"],\n    createContentAttachment: [\"POST /content_references/{content_reference_id}/attachments\", {\n      mediaType: {\n        previews: [\"corsair\"]\n      }\n    }],\n    createFromManifest: [\"POST /app-manifests/{code}/conversions\"],\n    createInstallationAccessToken: [\"POST /app/installations/{installation_id}/access_tokens\"],\n    deleteAuthorization: [\"DELETE /applications/{client_id}/grant\"],\n    deleteInstallation: [\"DELETE /app/installations/{installation_id}\"],\n    deleteToken: [\"DELETE /applications/{client_id}/token\"],\n    getAuthenticated: [\"GET /app\"],\n    getBySlug: [\"GET /apps/{app_slug}\"],\n    getInstallation: [\"GET /app/installations/{installation_id}\"],\n    getOrgInstallation: [\"GET /orgs/{org}/installation\"],\n    getRepoInstallation: [\"GET /repos/{owner}/{repo}/installation\"],\n    getSubscriptionPlanForAccount: [\"GET /marketplace_listing/accounts/{account_id}\"],\n    getSubscriptionPlanForAccountStubbed: [\"GET /marketplace_listing/stubbed/accounts/{account_id}\"],\n    getUserInstallation: [\"GET /users/{username}/installation\"],\n    getWebhookConfigForApp: [\"GET /app/hook/config\"],\n    listAccountsForPlan: [\"GET /marketplace_listing/plans/{plan_id}/accounts\"],\n    listAccountsForPlanStubbed: [\"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"],\n    listInstallationReposForAuthenticatedUser: [\"GET /user/installations/{installation_id}/repositories\"],\n    listInstallations: [\"GET /app/installations\"],\n    listInstallationsForAuthenticatedUser: [\"GET /user/installations\"],\n    listPlans: [\"GET /marketplace_listing/plans\"],\n    listPlansStubbed: [\"GET /marketplace_listing/stubbed/plans\"],\n    listReposAccessibleToInstallation: [\"GET /installation/repositories\"],\n    listSubscriptionsForAuthenticatedUser: [\"GET /user/marketplace_purchases\"],\n    listSubscriptionsForAuthenticatedUserStubbed: [\"GET /user/marketplace_purchases/stubbed\"],\n    removeRepoFromInstallation: [\"DELETE /user/installations/{installation_id}/repositories/{repository_id}\"],\n    resetToken: [\"PATCH /applications/{client_id}/token\"],\n    revokeInstallationAccessToken: [\"DELETE /installation/token\"],\n    scopeToken: [\"POST /applications/{client_id}/token/scoped\"],\n    suspendInstallation: [\"PUT /app/installations/{installation_id}/suspended\"],\n    unsuspendInstallation: [\"DELETE /app/installations/{installation_id}/suspended\"],\n    updateWebhookConfigForApp: [\"PATCH /app/hook/config\"]\n  },\n  billing: {\n    getGithubActionsBillingOrg: [\"GET /orgs/{org}/settings/billing/actions\"],\n    getGithubActionsBillingUser: [\"GET /users/{username}/settings/billing/actions\"],\n    getGithubPackagesBillingOrg: [\"GET /orgs/{org}/settings/billing/packages\"],\n    getGithubPackagesBillingUser: [\"GET /users/{username}/settings/billing/packages\"],\n    getSharedStorageBillingOrg: [\"GET /orgs/{org}/settings/billing/shared-storage\"],\n    getSharedStorageBillingUser: [\"GET /users/{username}/settings/billing/shared-storage\"]\n  },\n  checks: {\n    create: [\"POST /repos/{owner}/{repo}/check-runs\"],\n    createSuite: [\"POST /repos/{owner}/{repo}/check-suites\"],\n    get: [\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"],\n    getSuite: [\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"],\n    listAnnotations: [\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"],\n    listForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"],\n    listForSuite: [\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"],\n    listSuitesForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"],\n    rerequestSuite: [\"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\"],\n    setSuitesPreferences: [\"PATCH /repos/{owner}/{repo}/check-suites/preferences\"],\n    update: [\"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"]\n  },\n  codeScanning: {\n    getAlert: [\"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\", {}, {\n      renamedParameters: {\n        alert_id: \"alert_number\"\n      }\n    }],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/code-scanning/alerts\"],\n    listRecentAnalyses: [\"GET /repos/{owner}/{repo}/code-scanning/analyses\"],\n    updateAlert: [\"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"],\n    uploadSarif: [\"POST /repos/{owner}/{repo}/code-scanning/sarifs\"]\n  },\n  codesOfConduct: {\n    getAllCodesOfConduct: [\"GET /codes_of_conduct\", {\n      mediaType: {\n        previews: [\"scarlet-witch\"]\n      }\n    }],\n    getConductCode: [\"GET /codes_of_conduct/{key}\", {\n      mediaType: {\n        previews: [\"scarlet-witch\"]\n      }\n    }],\n    getForRepo: [\"GET /repos/{owner}/{repo}/community/code_of_conduct\", {\n      mediaType: {\n        previews: [\"scarlet-witch\"]\n      }\n    }]\n  },\n  emojis: {\n    get: [\"GET /emojis\"]\n  },\n  enterpriseAdmin: {\n    disableSelectedOrganizationGithubActionsEnterprise: [\"DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\"],\n    enableSelectedOrganizationGithubActionsEnterprise: [\"PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\"],\n    getAllowedActionsEnterprise: [\"GET /enterprises/{enterprise}/actions/permissions/selected-actions\"],\n    getGithubActionsPermissionsEnterprise: [\"GET /enterprises/{enterprise}/actions/permissions\"],\n    listSelectedOrganizationsEnabledGithubActionsEnterprise: [\"GET /enterprises/{enterprise}/actions/permissions/organizations\"],\n    setAllowedActionsEnterprise: [\"PUT /enterprises/{enterprise}/actions/permissions/selected-actions\"],\n    setGithubActionsPermissionsEnterprise: [\"PUT /enterprises/{enterprise}/actions/permissions\"],\n    setSelectedOrganizationsEnabledGithubActionsEnterprise: [\"PUT /enterprises/{enterprise}/actions/permissions/organizations\"]\n  },\n  gists: {\n    checkIsStarred: [\"GET /gists/{gist_id}/star\"],\n    create: [\"POST /gists\"],\n    createComment: [\"POST /gists/{gist_id}/comments\"],\n    delete: [\"DELETE /gists/{gist_id}\"],\n    deleteComment: [\"DELETE /gists/{gist_id}/comments/{comment_id}\"],\n    fork: [\"POST /gists/{gist_id}/forks\"],\n    get: [\"GET /gists/{gist_id}\"],\n    getComment: [\"GET /gists/{gist_id}/comments/{comment_id}\"],\n    getRevision: [\"GET /gists/{gist_id}/{sha}\"],\n    list: [\"GET /gists\"],\n    listComments: [\"GET /gists/{gist_id}/comments\"],\n    listCommits: [\"GET /gists/{gist_id}/commits\"],\n    listForUser: [\"GET /users/{username}/gists\"],\n    listForks: [\"GET /gists/{gist_id}/forks\"],\n    listPublic: [\"GET /gists/public\"],\n    listStarred: [\"GET /gists/starred\"],\n    star: [\"PUT /gists/{gist_id}/star\"],\n    unstar: [\"DELETE /gists/{gist_id}/star\"],\n    update: [\"PATCH /gists/{gist_id}\"],\n    updateComment: [\"PATCH /gists/{gist_id}/comments/{comment_id}\"]\n  },\n  git: {\n    createBlob: [\"POST /repos/{owner}/{repo}/git/blobs\"],\n    createCommit: [\"POST /repos/{owner}/{repo}/git/commits\"],\n    createRef: [\"POST /repos/{owner}/{repo}/git/refs\"],\n    createTag: [\"POST /repos/{owner}/{repo}/git/tags\"],\n    createTree: [\"POST /repos/{owner}/{repo}/git/trees\"],\n    deleteRef: [\"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"],\n    getBlob: [\"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"],\n    getCommit: [\"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"],\n    getRef: [\"GET /repos/{owner}/{repo}/git/ref/{ref}\"],\n    getTag: [\"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"],\n    getTree: [\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"],\n    listMatchingRefs: [\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"],\n    updateRef: [\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"]\n  },\n  gitignore: {\n    getAllTemplates: [\"GET /gitignore/templates\"],\n    getTemplate: [\"GET /gitignore/templates/{name}\"]\n  },\n  interactions: {\n    getRestrictionsForAuthenticatedUser: [\"GET /user/interaction-limits\"],\n    getRestrictionsForOrg: [\"GET /orgs/{org}/interaction-limits\"],\n    getRestrictionsForRepo: [\"GET /repos/{owner}/{repo}/interaction-limits\"],\n    getRestrictionsForYourPublicRepos: [\"GET /user/interaction-limits\", {}, {\n      renamed: [\"interactions\", \"getRestrictionsForAuthenticatedUser\"]\n    }],\n    removeRestrictionsForAuthenticatedUser: [\"DELETE /user/interaction-limits\"],\n    removeRestrictionsForOrg: [\"DELETE /orgs/{org}/interaction-limits\"],\n    removeRestrictionsForRepo: [\"DELETE /repos/{owner}/{repo}/interaction-limits\"],\n    removeRestrictionsForYourPublicRepos: [\"DELETE /user/interaction-limits\", {}, {\n      renamed: [\"interactions\", \"removeRestrictionsForAuthenticatedUser\"]\n    }],\n    setRestrictionsForAuthenticatedUser: [\"PUT /user/interaction-limits\"],\n    setRestrictionsForOrg: [\"PUT /orgs/{org}/interaction-limits\"],\n    setRestrictionsForRepo: [\"PUT /repos/{owner}/{repo}/interaction-limits\"],\n    setRestrictionsForYourPublicRepos: [\"PUT /user/interaction-limits\", {}, {\n      renamed: [\"interactions\", \"setRestrictionsForAuthenticatedUser\"]\n    }]\n  },\n  issues: {\n    addAssignees: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\"],\n    addLabels: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    checkUserCanBeAssigned: [\"GET /repos/{owner}/{repo}/assignees/{assignee}\"],\n    create: [\"POST /repos/{owner}/{repo}/issues\"],\n    createComment: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\"],\n    createLabel: [\"POST /repos/{owner}/{repo}/labels\"],\n    createMilestone: [\"POST /repos/{owner}/{repo}/milestones\"],\n    deleteComment: [\"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    deleteLabel: [\"DELETE /repos/{owner}/{repo}/labels/{name}\"],\n    deleteMilestone: [\"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\"],\n    get: [\"GET /repos/{owner}/{repo}/issues/{issue_number}\"],\n    getComment: [\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    getEvent: [\"GET /repos/{owner}/{repo}/issues/events/{event_id}\"],\n    getLabel: [\"GET /repos/{owner}/{repo}/labels/{name}\"],\n    getMilestone: [\"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"],\n    list: [\"GET /issues\"],\n    listAssignees: [\"GET /repos/{owner}/{repo}/assignees\"],\n    listComments: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"],\n    listCommentsForRepo: [\"GET /repos/{owner}/{repo}/issues/comments\"],\n    listEvents: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"],\n    listEventsForRepo: [\"GET /repos/{owner}/{repo}/issues/events\"],\n    listEventsForTimeline: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\", {\n      mediaType: {\n        previews: [\"mockingbird\"]\n      }\n    }],\n    listForAuthenticatedUser: [\"GET /user/issues\"],\n    listForOrg: [\"GET /orgs/{org}/issues\"],\n    listForRepo: [\"GET /repos/{owner}/{repo}/issues\"],\n    listLabelsForMilestone: [\"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"],\n    listLabelsForRepo: [\"GET /repos/{owner}/{repo}/labels\"],\n    listLabelsOnIssue: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    listMilestones: [\"GET /repos/{owner}/{repo}/milestones\"],\n    lock: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n    removeAllLabels: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    removeAssignees: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\"],\n    removeLabel: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\"],\n    setLabels: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n    unlock: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n    update: [\"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"],\n    updateComment: [\"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n    updateLabel: [\"PATCH /repos/{owner}/{repo}/labels/{name}\"],\n    updateMilestone: [\"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\"]\n  },\n  licenses: {\n    get: [\"GET /licenses/{license}\"],\n    getAllCommonlyUsed: [\"GET /licenses\"],\n    getForRepo: [\"GET /repos/{owner}/{repo}/license\"]\n  },\n  markdown: {\n    render: [\"POST /markdown\"],\n    renderRaw: [\"POST /markdown/raw\", {\n      headers: {\n        \"content-type\": \"text/plain; charset=utf-8\"\n      }\n    }]\n  },\n  meta: {\n    get: [\"GET /meta\"],\n    getOctocat: [\"GET /octocat\"],\n    getZen: [\"GET /zen\"],\n    root: [\"GET /\"]\n  },\n  migrations: {\n    cancelImport: [\"DELETE /repos/{owner}/{repo}/import\"],\n    deleteArchiveForAuthenticatedUser: [\"DELETE /user/migrations/{migration_id}/archive\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    deleteArchiveForOrg: [\"DELETE /orgs/{org}/migrations/{migration_id}/archive\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    downloadArchiveForOrg: [\"GET /orgs/{org}/migrations/{migration_id}/archive\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    getArchiveForAuthenticatedUser: [\"GET /user/migrations/{migration_id}/archive\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    getCommitAuthors: [\"GET /repos/{owner}/{repo}/import/authors\"],\n    getImportStatus: [\"GET /repos/{owner}/{repo}/import\"],\n    getLargeFiles: [\"GET /repos/{owner}/{repo}/import/large_files\"],\n    getStatusForAuthenticatedUser: [\"GET /user/migrations/{migration_id}\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    getStatusForOrg: [\"GET /orgs/{org}/migrations/{migration_id}\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    listForAuthenticatedUser: [\"GET /user/migrations\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    listForOrg: [\"GET /orgs/{org}/migrations\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    listReposForOrg: [\"GET /orgs/{org}/migrations/{migration_id}/repositories\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    listReposForUser: [\"GET /user/migrations/{migration_id}/repositories\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    mapCommitAuthor: [\"PATCH /repos/{owner}/{repo}/import/authors/{author_id}\"],\n    setLfsPreference: [\"PATCH /repos/{owner}/{repo}/import/lfs\"],\n    startForAuthenticatedUser: [\"POST /user/migrations\"],\n    startForOrg: [\"POST /orgs/{org}/migrations\"],\n    startImport: [\"PUT /repos/{owner}/{repo}/import\"],\n    unlockRepoForAuthenticatedUser: [\"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    unlockRepoForOrg: [\"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\", {\n      mediaType: {\n        previews: [\"wyandotte\"]\n      }\n    }],\n    updateImport: [\"PATCH /repos/{owner}/{repo}/import\"]\n  },\n  orgs: {\n    blockUser: [\"PUT /orgs/{org}/blocks/{username}\"],\n    cancelInvitation: [\"DELETE /orgs/{org}/invitations/{invitation_id}\"],\n    checkBlockedUser: [\"GET /orgs/{org}/blocks/{username}\"],\n    checkMembershipForUser: [\"GET /orgs/{org}/members/{username}\"],\n    checkPublicMembershipForUser: [\"GET /orgs/{org}/public_members/{username}\"],\n    convertMemberToOutsideCollaborator: [\"PUT /orgs/{org}/outside_collaborators/{username}\"],\n    createInvitation: [\"POST /orgs/{org}/invitations\"],\n    createWebhook: [\"POST /orgs/{org}/hooks\"],\n    deleteWebhook: [\"DELETE /orgs/{org}/hooks/{hook_id}\"],\n    get: [\"GET /orgs/{org}\"],\n    getMembershipForAuthenticatedUser: [\"GET /user/memberships/orgs/{org}\"],\n    getMembershipForUser: [\"GET /orgs/{org}/memberships/{username}\"],\n    getWebhook: [\"GET /orgs/{org}/hooks/{hook_id}\"],\n    getWebhookConfigForOrg: [\"GET /orgs/{org}/hooks/{hook_id}/config\"],\n    list: [\"GET /organizations\"],\n    listAppInstallations: [\"GET /orgs/{org}/installations\"],\n    listBlockedUsers: [\"GET /orgs/{org}/blocks\"],\n    listFailedInvitations: [\"GET /orgs/{org}/failed_invitations\"],\n    listForAuthenticatedUser: [\"GET /user/orgs\"],\n    listForUser: [\"GET /users/{username}/orgs\"],\n    listInvitationTeams: [\"GET /orgs/{org}/invitations/{invitation_id}/teams\"],\n    listMembers: [\"GET /orgs/{org}/members\"],\n    listMembershipsForAuthenticatedUser: [\"GET /user/memberships/orgs\"],\n    listOutsideCollaborators: [\"GET /orgs/{org}/outside_collaborators\"],\n    listPendingInvitations: [\"GET /orgs/{org}/invitations\"],\n    listPublicMembers: [\"GET /orgs/{org}/public_members\"],\n    listWebhooks: [\"GET /orgs/{org}/hooks\"],\n    pingWebhook: [\"POST /orgs/{org}/hooks/{hook_id}/pings\"],\n    removeMember: [\"DELETE /orgs/{org}/members/{username}\"],\n    removeMembershipForUser: [\"DELETE /orgs/{org}/memberships/{username}\"],\n    removeOutsideCollaborator: [\"DELETE /orgs/{org}/outside_collaborators/{username}\"],\n    removePublicMembershipForAuthenticatedUser: [\"DELETE /orgs/{org}/public_members/{username}\"],\n    setMembershipForUser: [\"PUT /orgs/{org}/memberships/{username}\"],\n    setPublicMembershipForAuthenticatedUser: [\"PUT /orgs/{org}/public_members/{username}\"],\n    unblockUser: [\"DELETE /orgs/{org}/blocks/{username}\"],\n    update: [\"PATCH /orgs/{org}\"],\n    updateMembershipForAuthenticatedUser: [\"PATCH /user/memberships/orgs/{org}\"],\n    updateWebhook: [\"PATCH /orgs/{org}/hooks/{hook_id}\"],\n    updateWebhookConfigForOrg: [\"PATCH /orgs/{org}/hooks/{hook_id}/config\"]\n  },\n  projects: {\n    addCollaborator: [\"PUT /projects/{project_id}/collaborators/{username}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createCard: [\"POST /projects/columns/{column_id}/cards\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createColumn: [\"POST /projects/{project_id}/columns\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createForAuthenticatedUser: [\"POST /user/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createForOrg: [\"POST /orgs/{org}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    createForRepo: [\"POST /repos/{owner}/{repo}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    delete: [\"DELETE /projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    deleteCard: [\"DELETE /projects/columns/cards/{card_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    deleteColumn: [\"DELETE /projects/columns/{column_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    get: [\"GET /projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    getCard: [\"GET /projects/columns/cards/{card_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    getColumn: [\"GET /projects/columns/{column_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    getPermissionForUser: [\"GET /projects/{project_id}/collaborators/{username}/permission\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listCards: [\"GET /projects/columns/{column_id}/cards\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listCollaborators: [\"GET /projects/{project_id}/collaborators\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listColumns: [\"GET /projects/{project_id}/columns\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listForOrg: [\"GET /orgs/{org}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listForRepo: [\"GET /repos/{owner}/{repo}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listForUser: [\"GET /users/{username}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    moveCard: [\"POST /projects/columns/cards/{card_id}/moves\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    moveColumn: [\"POST /projects/columns/{column_id}/moves\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    removeCollaborator: [\"DELETE /projects/{project_id}/collaborators/{username}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    update: [\"PATCH /projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    updateCard: [\"PATCH /projects/columns/cards/{card_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    updateColumn: [\"PATCH /projects/columns/{column_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }]\n  },\n  pulls: {\n    checkIfMerged: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n    create: [\"POST /repos/{owner}/{repo}/pulls\"],\n    createReplyForReviewComment: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\"],\n    createReview: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n    createReviewComment: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\"],\n    deletePendingReview: [\"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"],\n    deleteReviewComment: [\"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\"],\n    dismissReview: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\"],\n    get: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}\"],\n    getReview: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"],\n    getReviewComment: [\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"],\n    list: [\"GET /repos/{owner}/{repo}/pulls\"],\n    listCommentsForReview: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"],\n    listCommits: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"],\n    listFiles: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"],\n    listRequestedReviewers: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"],\n    listReviewComments: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"],\n    listReviewCommentsForRepo: [\"GET /repos/{owner}/{repo}/pulls/comments\"],\n    listReviews: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n    merge: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n    removeRequestedReviewers: [\"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"],\n    requestReviewers: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"],\n    submitReview: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\"],\n    update: [\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"],\n    updateBranch: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\", {\n      mediaType: {\n        previews: [\"lydian\"]\n      }\n    }],\n    updateReview: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"],\n    updateReviewComment: [\"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\"]\n  },\n  rateLimit: {\n    get: [\"GET /rate_limit\"]\n  },\n  reactions: {\n    createForCommitComment: [\"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForIssue: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForIssueComment: [\"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForPullRequestReviewComment: [\"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForTeamDiscussionCommentInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    createForTeamDiscussionInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForCommitComment: [\"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForIssue: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForIssueComment: [\"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForPullRequestComment: [\"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForTeamDiscussion: [\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteForTeamDiscussionComment: [\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    deleteLegacy: [\"DELETE /reactions/{reaction_id}\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }, {\n      deprecated: \"octokit.reactions.deleteLegacy() is deprecated, see https://docs.github.com/v3/reactions/#delete-a-reaction-legacy\"\n    }],\n    listForCommitComment: [\"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForIssue: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForIssueComment: [\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForPullRequestReviewComment: [\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForTeamDiscussionCommentInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }],\n    listForTeamDiscussionInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\", {\n      mediaType: {\n        previews: [\"squirrel-girl\"]\n      }\n    }]\n  },\n  repos: {\n    acceptInvitation: [\"PATCH /user/repository_invitations/{invitation_id}\"],\n    addAppAccessRestrictions: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", {}, {\n      mapToData: \"apps\"\n    }],\n    addCollaborator: [\"PUT /repos/{owner}/{repo}/collaborators/{username}\"],\n    addStatusCheckContexts: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", {}, {\n      mapToData: \"contexts\"\n    }],\n    addTeamAccessRestrictions: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", {}, {\n      mapToData: \"teams\"\n    }],\n    addUserAccessRestrictions: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", {}, {\n      mapToData: \"users\"\n    }],\n    checkCollaborator: [\"GET /repos/{owner}/{repo}/collaborators/{username}\"],\n    checkVulnerabilityAlerts: [\"GET /repos/{owner}/{repo}/vulnerability-alerts\", {\n      mediaType: {\n        previews: [\"dorian\"]\n      }\n    }],\n    compareCommits: [\"GET /repos/{owner}/{repo}/compare/{base}...{head}\"],\n    createCommitComment: [\"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\"],\n    createCommitSignatureProtection: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", {\n      mediaType: {\n        previews: [\"zzzax\"]\n      }\n    }],\n    createCommitStatus: [\"POST /repos/{owner}/{repo}/statuses/{sha}\"],\n    createDeployKey: [\"POST /repos/{owner}/{repo}/keys\"],\n    createDeployment: [\"POST /repos/{owner}/{repo}/deployments\"],\n    createDeploymentStatus: [\"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"],\n    createDispatchEvent: [\"POST /repos/{owner}/{repo}/dispatches\"],\n    createForAuthenticatedUser: [\"POST /user/repos\"],\n    createFork: [\"POST /repos/{owner}/{repo}/forks\"],\n    createInOrg: [\"POST /orgs/{org}/repos\"],\n    createOrUpdateFileContents: [\"PUT /repos/{owner}/{repo}/contents/{path}\"],\n    createPagesSite: [\"POST /repos/{owner}/{repo}/pages\", {\n      mediaType: {\n        previews: [\"switcheroo\"]\n      }\n    }],\n    createRelease: [\"POST /repos/{owner}/{repo}/releases\"],\n    createUsingTemplate: [\"POST /repos/{template_owner}/{template_repo}/generate\", {\n      mediaType: {\n        previews: [\"baptiste\"]\n      }\n    }],\n    createWebhook: [\"POST /repos/{owner}/{repo}/hooks\"],\n    declineInvitation: [\"DELETE /user/repository_invitations/{invitation_id}\"],\n    delete: [\"DELETE /repos/{owner}/{repo}\"],\n    deleteAccessRestrictions: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"],\n    deleteAdminBranchProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"],\n    deleteBranchProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\"],\n    deleteCommitComment: [\"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"],\n    deleteCommitSignatureProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", {\n      mediaType: {\n        previews: [\"zzzax\"]\n      }\n    }],\n    deleteDeployKey: [\"DELETE /repos/{owner}/{repo}/keys/{key_id}\"],\n    deleteDeployment: [\"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\"],\n    deleteFile: [\"DELETE /repos/{owner}/{repo}/contents/{path}\"],\n    deleteInvitation: [\"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\"],\n    deletePagesSite: [\"DELETE /repos/{owner}/{repo}/pages\", {\n      mediaType: {\n        previews: [\"switcheroo\"]\n      }\n    }],\n    deletePullRequestReviewProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"],\n    deleteRelease: [\"DELETE /repos/{owner}/{repo}/releases/{release_id}\"],\n    deleteReleaseAsset: [\"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n    deleteWebhook: [\"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    disableAutomatedSecurityFixes: [\"DELETE /repos/{owner}/{repo}/automated-security-fixes\", {\n      mediaType: {\n        previews: [\"london\"]\n      }\n    }],\n    disableVulnerabilityAlerts: [\"DELETE /repos/{owner}/{repo}/vulnerability-alerts\", {\n      mediaType: {\n        previews: [\"dorian\"]\n      }\n    }],\n    downloadArchive: [\"GET /repos/{owner}/{repo}/zipball/{ref}\", {}, {\n      renamed: [\"repos\", \"downloadZipballArchive\"]\n    }],\n    downloadTarballArchive: [\"GET /repos/{owner}/{repo}/tarball/{ref}\"],\n    downloadZipballArchive: [\"GET /repos/{owner}/{repo}/zipball/{ref}\"],\n    enableAutomatedSecurityFixes: [\"PUT /repos/{owner}/{repo}/automated-security-fixes\", {\n      mediaType: {\n        previews: [\"london\"]\n      }\n    }],\n    enableVulnerabilityAlerts: [\"PUT /repos/{owner}/{repo}/vulnerability-alerts\", {\n      mediaType: {\n        previews: [\"dorian\"]\n      }\n    }],\n    get: [\"GET /repos/{owner}/{repo}\"],\n    getAccessRestrictions: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"],\n    getAdminBranchProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"],\n    getAllStatusCheckContexts: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"],\n    getAllTopics: [\"GET /repos/{owner}/{repo}/topics\", {\n      mediaType: {\n        previews: [\"mercy\"]\n      }\n    }],\n    getAppsWithAccessToProtectedBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"],\n    getBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}\"],\n    getBranchProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection\"],\n    getClones: [\"GET /repos/{owner}/{repo}/traffic/clones\"],\n    getCodeFrequencyStats: [\"GET /repos/{owner}/{repo}/stats/code_frequency\"],\n    getCollaboratorPermissionLevel: [\"GET /repos/{owner}/{repo}/collaborators/{username}/permission\"],\n    getCombinedStatusForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/status\"],\n    getCommit: [\"GET /repos/{owner}/{repo}/commits/{ref}\"],\n    getCommitActivityStats: [\"GET /repos/{owner}/{repo}/stats/commit_activity\"],\n    getCommitComment: [\"GET /repos/{owner}/{repo}/comments/{comment_id}\"],\n    getCommitSignatureProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", {\n      mediaType: {\n        previews: [\"zzzax\"]\n      }\n    }],\n    getCommunityProfileMetrics: [\"GET /repos/{owner}/{repo}/community/profile\"],\n    getContent: [\"GET /repos/{owner}/{repo}/contents/{path}\"],\n    getContributorsStats: [\"GET /repos/{owner}/{repo}/stats/contributors\"],\n    getDeployKey: [\"GET /repos/{owner}/{repo}/keys/{key_id}\"],\n    getDeployment: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"],\n    getDeploymentStatus: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\"],\n    getLatestPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/latest\"],\n    getLatestRelease: [\"GET /repos/{owner}/{repo}/releases/latest\"],\n    getPages: [\"GET /repos/{owner}/{repo}/pages\"],\n    getPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"],\n    getParticipationStats: [\"GET /repos/{owner}/{repo}/stats/participation\"],\n    getPullRequestReviewProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"],\n    getPunchCardStats: [\"GET /repos/{owner}/{repo}/stats/punch_card\"],\n    getReadme: [\"GET /repos/{owner}/{repo}/readme\"],\n    getRelease: [\"GET /repos/{owner}/{repo}/releases/{release_id}\"],\n    getReleaseAsset: [\"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n    getReleaseByTag: [\"GET /repos/{owner}/{repo}/releases/tags/{tag}\"],\n    getStatusChecksProtection: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"],\n    getTeamsWithAccessToProtectedBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"],\n    getTopPaths: [\"GET /repos/{owner}/{repo}/traffic/popular/paths\"],\n    getTopReferrers: [\"GET /repos/{owner}/{repo}/traffic/popular/referrers\"],\n    getUsersWithAccessToProtectedBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"],\n    getViews: [\"GET /repos/{owner}/{repo}/traffic/views\"],\n    getWebhook: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    getWebhookConfigForRepo: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\"],\n    listBranches: [\"GET /repos/{owner}/{repo}/branches\"],\n    listBranchesForHeadCommit: [\"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\", {\n      mediaType: {\n        previews: [\"groot\"]\n      }\n    }],\n    listCollaborators: [\"GET /repos/{owner}/{repo}/collaborators\"],\n    listCommentsForCommit: [\"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"],\n    listCommitCommentsForRepo: [\"GET /repos/{owner}/{repo}/comments\"],\n    listCommitStatusesForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"],\n    listCommits: [\"GET /repos/{owner}/{repo}/commits\"],\n    listContributors: [\"GET /repos/{owner}/{repo}/contributors\"],\n    listDeployKeys: [\"GET /repos/{owner}/{repo}/keys\"],\n    listDeploymentStatuses: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"],\n    listDeployments: [\"GET /repos/{owner}/{repo}/deployments\"],\n    listForAuthenticatedUser: [\"GET /user/repos\"],\n    listForOrg: [\"GET /orgs/{org}/repos\"],\n    listForUser: [\"GET /users/{username}/repos\"],\n    listForks: [\"GET /repos/{owner}/{repo}/forks\"],\n    listInvitations: [\"GET /repos/{owner}/{repo}/invitations\"],\n    listInvitationsForAuthenticatedUser: [\"GET /user/repository_invitations\"],\n    listLanguages: [\"GET /repos/{owner}/{repo}/languages\"],\n    listPagesBuilds: [\"GET /repos/{owner}/{repo}/pages/builds\"],\n    listPublic: [\"GET /repositories\"],\n    listPullRequestsAssociatedWithCommit: [\"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\", {\n      mediaType: {\n        previews: [\"groot\"]\n      }\n    }],\n    listReleaseAssets: [\"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"],\n    listReleases: [\"GET /repos/{owner}/{repo}/releases\"],\n    listTags: [\"GET /repos/{owner}/{repo}/tags\"],\n    listTeams: [\"GET /repos/{owner}/{repo}/teams\"],\n    listWebhooks: [\"GET /repos/{owner}/{repo}/hooks\"],\n    merge: [\"POST /repos/{owner}/{repo}/merges\"],\n    pingWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"],\n    removeAppAccessRestrictions: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", {}, {\n      mapToData: \"apps\"\n    }],\n    removeCollaborator: [\"DELETE /repos/{owner}/{repo}/collaborators/{username}\"],\n    removeStatusCheckContexts: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", {}, {\n      mapToData: \"contexts\"\n    }],\n    removeStatusCheckProtection: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"],\n    removeTeamAccessRestrictions: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", {}, {\n      mapToData: \"teams\"\n    }],\n    removeUserAccessRestrictions: [\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", {}, {\n      mapToData: \"users\"\n    }],\n    renameBranch: [\"POST /repos/{owner}/{repo}/branches/{branch}/rename\"],\n    replaceAllTopics: [\"PUT /repos/{owner}/{repo}/topics\", {\n      mediaType: {\n        previews: [\"mercy\"]\n      }\n    }],\n    requestPagesBuild: [\"POST /repos/{owner}/{repo}/pages/builds\"],\n    setAdminBranchProtection: [\"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"],\n    setAppAccessRestrictions: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", {}, {\n      mapToData: \"apps\"\n    }],\n    setStatusCheckContexts: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", {}, {\n      mapToData: \"contexts\"\n    }],\n    setTeamAccessRestrictions: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", {}, {\n      mapToData: \"teams\"\n    }],\n    setUserAccessRestrictions: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", {}, {\n      mapToData: \"users\"\n    }],\n    testPushWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"],\n    transfer: [\"POST /repos/{owner}/{repo}/transfer\"],\n    update: [\"PATCH /repos/{owner}/{repo}\"],\n    updateBranchProtection: [\"PUT /repos/{owner}/{repo}/branches/{branch}/protection\"],\n    updateCommitComment: [\"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"],\n    updateInformationAboutPagesSite: [\"PUT /repos/{owner}/{repo}/pages\"],\n    updateInvitation: [\"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\"],\n    updatePullRequestReviewProtection: [\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"],\n    updateRelease: [\"PATCH /repos/{owner}/{repo}/releases/{release_id}\"],\n    updateReleaseAsset: [\"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n    updateStatusCheckPotection: [\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\", {}, {\n      renamed: [\"repos\", \"updateStatusCheckProtection\"]\n    }],\n    updateStatusCheckProtection: [\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"],\n    updateWebhook: [\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"],\n    updateWebhookConfigForRepo: [\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\"],\n    uploadReleaseAsset: [\"POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\", {\n      baseUrl: \"https://uploads.github.com\"\n    }]\n  },\n  search: {\n    code: [\"GET /search/code\"],\n    commits: [\"GET /search/commits\", {\n      mediaType: {\n        previews: [\"cloak\"]\n      }\n    }],\n    issuesAndPullRequests: [\"GET /search/issues\"],\n    labels: [\"GET /search/labels\"],\n    repos: [\"GET /search/repositories\"],\n    topics: [\"GET /search/topics\", {\n      mediaType: {\n        previews: [\"mercy\"]\n      }\n    }],\n    users: [\"GET /search/users\"]\n  },\n  secretScanning: {\n    getAlert: [\"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"],\n    listAlertsForRepo: [\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"],\n    updateAlert: [\"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"]\n  },\n  teams: {\n    addOrUpdateMembershipForUserInOrg: [\"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\"],\n    addOrUpdateProjectPermissionsInOrg: [\"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    addOrUpdateRepoPermissionsInOrg: [\"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"],\n    checkPermissionsForProjectInOrg: [\"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    checkPermissionsForRepoInOrg: [\"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"],\n    create: [\"POST /orgs/{org}/teams\"],\n    createDiscussionCommentInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"],\n    createDiscussionInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions\"],\n    deleteDiscussionCommentInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"],\n    deleteDiscussionInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"],\n    deleteInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}\"],\n    getByName: [\"GET /orgs/{org}/teams/{team_slug}\"],\n    getDiscussionCommentInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"],\n    getDiscussionInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"],\n    getMembershipForUserInOrg: [\"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\"],\n    list: [\"GET /orgs/{org}/teams\"],\n    listChildInOrg: [\"GET /orgs/{org}/teams/{team_slug}/teams\"],\n    listDiscussionCommentsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"],\n    listDiscussionsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions\"],\n    listForAuthenticatedUser: [\"GET /user/teams\"],\n    listMembersInOrg: [\"GET /orgs/{org}/teams/{team_slug}/members\"],\n    listPendingInvitationsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/invitations\"],\n    listProjectsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/projects\", {\n      mediaType: {\n        previews: [\"inertia\"]\n      }\n    }],\n    listReposInOrg: [\"GET /orgs/{org}/teams/{team_slug}/repos\"],\n    removeMembershipForUserInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\"],\n    removeProjectInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\"],\n    removeRepoInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"],\n    updateDiscussionCommentInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"],\n    updateDiscussionInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"],\n    updateInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}\"]\n  },\n  users: {\n    addEmailForAuthenticated: [\"POST /user/emails\"],\n    block: [\"PUT /user/blocks/{username}\"],\n    checkBlocked: [\"GET /user/blocks/{username}\"],\n    checkFollowingForUser: [\"GET /users/{username}/following/{target_user}\"],\n    checkPersonIsFollowedByAuthenticated: [\"GET /user/following/{username}\"],\n    createGpgKeyForAuthenticated: [\"POST /user/gpg_keys\"],\n    createPublicSshKeyForAuthenticated: [\"POST /user/keys\"],\n    deleteEmailForAuthenticated: [\"DELETE /user/emails\"],\n    deleteGpgKeyForAuthenticated: [\"DELETE /user/gpg_keys/{gpg_key_id}\"],\n    deletePublicSshKeyForAuthenticated: [\"DELETE /user/keys/{key_id}\"],\n    follow: [\"PUT /user/following/{username}\"],\n    getAuthenticated: [\"GET /user\"],\n    getByUsername: [\"GET /users/{username}\"],\n    getContextForUser: [\"GET /users/{username}/hovercard\"],\n    getGpgKeyForAuthenticated: [\"GET /user/gpg_keys/{gpg_key_id}\"],\n    getPublicSshKeyForAuthenticated: [\"GET /user/keys/{key_id}\"],\n    list: [\"GET /users\"],\n    listBlockedByAuthenticated: [\"GET /user/blocks\"],\n    listEmailsForAuthenticated: [\"GET /user/emails\"],\n    listFollowedByAuthenticated: [\"GET /user/following\"],\n    listFollowersForAuthenticatedUser: [\"GET /user/followers\"],\n    listFollowersForUser: [\"GET /users/{username}/followers\"],\n    listFollowingForUser: [\"GET /users/{username}/following\"],\n    listGpgKeysForAuthenticated: [\"GET /user/gpg_keys\"],\n    listGpgKeysForUser: [\"GET /users/{username}/gpg_keys\"],\n    listPublicEmailsForAuthenticated: [\"GET /user/public_emails\"],\n    listPublicKeysForUser: [\"GET /users/{username}/keys\"],\n    listPublicSshKeysForAuthenticated: [\"GET /user/keys\"],\n    setPrimaryEmailVisibilityForAuthenticated: [\"PATCH /user/email/visibility\"],\n    unblock: [\"DELETE /user/blocks/{username}\"],\n    unfollow: [\"DELETE /user/following/{username}\"],\n    updateAuthenticated: [\"PATCH /user\"]\n  }\n};\n\nconst VERSION = \"4.10.3\";\n\nfunction endpointsToMethods(octokit, endpointsMap) {\n  const newMethods = {};\n\n  for (const [scope, endpoints] of Object.entries(endpointsMap)) {\n    for (const [methodName, endpoint] of Object.entries(endpoints)) {\n      const [route, defaults, decorations] = endpoint;\n      const [method, url] = route.split(/ /);\n      const endpointDefaults = Object.assign({\n        method,\n        url\n      }, defaults);\n\n      if (!newMethods[scope]) {\n        newMethods[scope] = {};\n      }\n\n      const scopeMethods = newMethods[scope];\n\n      if (decorations) {\n        scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);\n        continue;\n      }\n\n      scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);\n    }\n  }\n\n  return newMethods;\n}\n\nfunction decorate(octokit, scope, methodName, defaults, decorations) {\n  const requestWithDefaults = octokit.request.defaults(defaults);\n  /* istanbul ignore next */\n\n  function withDecorations(...args) {\n    // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n    let options = requestWithDefaults.endpoint.merge(...args); // There are currently no other decorations than `.mapToData`\n\n    if (decorations.mapToData) {\n      options = Object.assign({}, options, {\n        data: options[decorations.mapToData],\n        [decorations.mapToData]: undefined\n      });\n      return requestWithDefaults(options);\n    }\n\n    if (decorations.renamed) {\n      const [newScope, newMethodName] = decorations.renamed;\n      octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);\n    }\n\n    if (decorations.deprecated) {\n      octokit.log.warn(decorations.deprecated);\n    }\n\n    if (decorations.renamedParameters) {\n      // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n      const options = requestWithDefaults.endpoint.merge(...args);\n\n      for (const [name, alias] of Object.entries(decorations.renamedParameters)) {\n        if (name in options) {\n          octokit.log.warn(`\"${name}\" parameter is deprecated for \"octokit.${scope}.${methodName}()\". Use \"${alias}\" instead`);\n\n          if (!(alias in options)) {\n            options[alias] = options[name];\n          }\n\n          delete options[name];\n        }\n      }\n\n      return requestWithDefaults(options);\n    } // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n\n\n    return requestWithDefaults(...args);\n  }\n\n  return Object.assign(withDecorations, requestWithDefaults);\n}\n\n/**\n * This plugin is a 1:1 copy of internal @octokit/rest plugins. The primary\n * goal is to rebuild @octokit/rest on top of @octokit/core. Once that is\n * done, we will remove the registerEndpoints methods and return the methods\n * directly as with the other plugins. At that point we will also remove the\n * legacy workarounds and deprecations.\n *\n * See the plan at\n * https://github.com/octokit/plugin-rest-endpoint-methods.js/pull/1\n */\n\nfunction restEndpointMethods(octokit) {\n  return endpointsToMethods(octokit, Endpoints);\n}\nrestEndpointMethods.VERSION = VERSION;\n\nexports.restEndpointMethods = restEndpointMethods;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/endpoints-to-methods.js":"export function endpointsToMethods(octokit, endpointsMap) {\n    const newMethods = {};\n    for (const [scope, endpoints] of Object.entries(endpointsMap)) {\n        for (const [methodName, endpoint] of Object.entries(endpoints)) {\n            const [route, defaults, decorations] = endpoint;\n            const [method, url] = route.split(/ /);\n            const endpointDefaults = Object.assign({ method, url }, defaults);\n            if (!newMethods[scope]) {\n                newMethods[scope] = {};\n            }\n            const scopeMethods = newMethods[scope];\n            if (decorations) {\n                scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);\n                continue;\n            }\n            scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);\n        }\n    }\n    return newMethods;\n}\nfunction decorate(octokit, scope, methodName, defaults, decorations) {\n    const requestWithDefaults = octokit.request.defaults(defaults);\n    /* istanbul ignore next */\n    function withDecorations(...args) {\n        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n        let options = requestWithDefaults.endpoint.merge(...args);\n        // There are currently no other decorations than `.mapToData`\n        if (decorations.mapToData) {\n            options = Object.assign({}, options, {\n                data: options[decorations.mapToData],\n                [decorations.mapToData]: undefined,\n            });\n            return requestWithDefaults(options);\n        }\n        if (decorations.renamed) {\n            const [newScope, newMethodName] = decorations.renamed;\n            octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);\n        }\n        if (decorations.deprecated) {\n            octokit.log.warn(decorations.deprecated);\n        }\n        if (decorations.renamedParameters) {\n            // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n            const options = requestWithDefaults.endpoint.merge(...args);\n            for (const [name, alias] of Object.entries(decorations.renamedParameters)) {\n                if (name in options) {\n                    octokit.log.warn(`\"${name}\" parameter is deprecated for \"octokit.${scope}.${methodName}()\". Use \"${alias}\" instead`);\n                    if (!(alias in options)) {\n                        options[alias] = options[name];\n                    }\n                    delete options[name];\n                }\n            }\n            return requestWithDefaults(options);\n        }\n        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n        return requestWithDefaults(...args);\n    }\n    return Object.assign(withDecorations, requestWithDefaults);\n}\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/index.js":"import ENDPOINTS from \"./generated/endpoints\";\nimport { VERSION } from \"./version\";\nimport { endpointsToMethods } from \"./endpoints-to-methods\";\n/**\n * This plugin is a 1:1 copy of internal @octokit/rest plugins. The primary\n * goal is to rebuild @octokit/rest on top of @octokit/core. Once that is\n * done, we will remove the registerEndpoints methods and return the methods\n * directly as with the other plugins. At that point we will also remove the\n * legacy workarounds and deprecations.\n *\n * See the plan at\n * https://github.com/octokit/plugin-rest-endpoint-methods.js/pull/1\n */\nexport function restEndpointMethods(octokit) {\n    return endpointsToMethods(octokit, ENDPOINTS);\n}\nrestEndpointMethods.VERSION = VERSION;\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/types.js":"export {};\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/version.js":"export const VERSION = \"4.10.3\";\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/generated/endpoints.js":"const Endpoints = {\n    actions: {\n        addSelectedRepoToOrgSecret: [\n            \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\",\n        ],\n        cancelWorkflowRun: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\",\n        ],\n        createOrUpdateOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}\"],\n        createOrUpdateRepoSecret: [\n            \"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\",\n        ],\n        createRegistrationTokenForOrg: [\n            \"POST /orgs/{org}/actions/runners/registration-token\",\n        ],\n        createRegistrationTokenForRepo: [\n            \"POST /repos/{owner}/{repo}/actions/runners/registration-token\",\n        ],\n        createRemoveTokenForOrg: [\"POST /orgs/{org}/actions/runners/remove-token\"],\n        createRemoveTokenForRepo: [\n            \"POST /repos/{owner}/{repo}/actions/runners/remove-token\",\n        ],\n        createWorkflowDispatch: [\n            \"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\",\n        ],\n        deleteArtifact: [\n            \"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\",\n        ],\n        deleteOrgSecret: [\"DELETE /orgs/{org}/actions/secrets/{secret_name}\"],\n        deleteRepoSecret: [\n            \"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\",\n        ],\n        deleteSelfHostedRunnerFromOrg: [\n            \"DELETE /orgs/{org}/actions/runners/{runner_id}\",\n        ],\n        deleteSelfHostedRunnerFromRepo: [\n            \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\",\n        ],\n        deleteWorkflowRun: [\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n        deleteWorkflowRunLogs: [\n            \"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\",\n        ],\n        disableSelectedRepositoryGithubActionsOrganization: [\n            \"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\",\n        ],\n        disableWorkflow: [\n            \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\",\n        ],\n        downloadArtifact: [\n            \"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\",\n        ],\n        downloadJobLogsForWorkflowRun: [\n            \"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\",\n        ],\n        downloadWorkflowRunLogs: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\",\n        ],\n        enableSelectedRepositoryGithubActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\",\n        ],\n        enableWorkflow: [\n            \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\",\n        ],\n        getAllowedActionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions/selected-actions\",\n        ],\n        getAllowedActionsRepository: [\n            \"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\",\n        ],\n        getArtifact: [\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"],\n        getGithubActionsPermissionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions\",\n        ],\n        getGithubActionsPermissionsRepository: [\n            \"GET /repos/{owner}/{repo}/actions/permissions\",\n        ],\n        getJobForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"],\n        getOrgPublicKey: [\"GET /orgs/{org}/actions/secrets/public-key\"],\n        getOrgSecret: [\"GET /orgs/{org}/actions/secrets/{secret_name}\"],\n        getRepoPermissions: [\n            \"GET /repos/{owner}/{repo}/actions/permissions\",\n            {},\n            { renamed: [\"actions\", \"getGithubActionsPermissionsRepository\"] },\n        ],\n        getRepoPublicKey: [\"GET /repos/{owner}/{repo}/actions/secrets/public-key\"],\n        getRepoSecret: [\"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n        getSelfHostedRunnerForOrg: [\"GET /orgs/{org}/actions/runners/{runner_id}\"],\n        getSelfHostedRunnerForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\",\n        ],\n        getWorkflow: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"],\n        getWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n        getWorkflowRunUsage: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\",\n        ],\n        getWorkflowUsage: [\n            \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\",\n        ],\n        listArtifactsForRepo: [\"GET /repos/{owner}/{repo}/actions/artifacts\"],\n        listJobsForWorkflowRun: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\",\n        ],\n        listOrgSecrets: [\"GET /orgs/{org}/actions/secrets\"],\n        listRepoSecrets: [\"GET /repos/{owner}/{repo}/actions/secrets\"],\n        listRepoWorkflows: [\"GET /repos/{owner}/{repo}/actions/workflows\"],\n        listRunnerApplicationsForOrg: [\"GET /orgs/{org}/actions/runners/downloads\"],\n        listRunnerApplicationsForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runners/downloads\",\n        ],\n        listSelectedReposForOrgSecret: [\n            \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n        ],\n        listSelectedRepositoriesEnabledGithubActionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions/repositories\",\n        ],\n        listSelfHostedRunnersForOrg: [\"GET /orgs/{org}/actions/runners\"],\n        listSelfHostedRunnersForRepo: [\"GET /repos/{owner}/{repo}/actions/runners\"],\n        listWorkflowRunArtifacts: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\",\n        ],\n        listWorkflowRuns: [\n            \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\",\n        ],\n        listWorkflowRunsForRepo: [\"GET /repos/{owner}/{repo}/actions/runs\"],\n        reRunWorkflow: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"],\n        removeSelectedRepoFromOrgSecret: [\n            \"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\",\n        ],\n        setAllowedActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/selected-actions\",\n        ],\n        setAllowedActionsRepository: [\n            \"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\",\n        ],\n        setGithubActionsPermissionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions\",\n        ],\n        setGithubActionsPermissionsRepository: [\n            \"PUT /repos/{owner}/{repo}/actions/permissions\",\n        ],\n        setSelectedReposForOrgSecret: [\n            \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n        ],\n        setSelectedRepositoriesEnabledGithubActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/repositories\",\n        ],\n    },\n    activity: {\n        checkRepoIsStarredByAuthenticatedUser: [\"GET /user/starred/{owner}/{repo}\"],\n        deleteRepoSubscription: [\"DELETE /repos/{owner}/{repo}/subscription\"],\n        deleteThreadSubscription: [\n            \"DELETE /notifications/threads/{thread_id}/subscription\",\n        ],\n        getFeeds: [\"GET /feeds\"],\n        getRepoSubscription: [\"GET /repos/{owner}/{repo}/subscription\"],\n        getThread: [\"GET /notifications/threads/{thread_id}\"],\n        getThreadSubscriptionForAuthenticatedUser: [\n            \"GET /notifications/threads/{thread_id}/subscription\",\n        ],\n        listEventsForAuthenticatedUser: [\"GET /users/{username}/events\"],\n        listNotificationsForAuthenticatedUser: [\"GET /notifications\"],\n        listOrgEventsForAuthenticatedUser: [\n            \"GET /users/{username}/events/orgs/{org}\",\n        ],\n        listPublicEvents: [\"GET /events\"],\n        listPublicEventsForRepoNetwork: [\"GET /networks/{owner}/{repo}/events\"],\n        listPublicEventsForUser: [\"GET /users/{username}/events/public\"],\n        listPublicOrgEvents: [\"GET /orgs/{org}/events\"],\n        listReceivedEventsForUser: [\"GET /users/{username}/received_events\"],\n        listReceivedPublicEventsForUser: [\n            \"GET /users/{username}/received_events/public\",\n        ],\n        listRepoEvents: [\"GET /repos/{owner}/{repo}/events\"],\n        listRepoNotificationsForAuthenticatedUser: [\n            \"GET /repos/{owner}/{repo}/notifications\",\n        ],\n        listReposStarredByAuthenticatedUser: [\"GET /user/starred\"],\n        listReposStarredByUser: [\"GET /users/{username}/starred\"],\n        listReposWatchedByUser: [\"GET /users/{username}/subscriptions\"],\n        listStargazersForRepo: [\"GET /repos/{owner}/{repo}/stargazers\"],\n        listWatchedReposForAuthenticatedUser: [\"GET /user/subscriptions\"],\n        listWatchersForRepo: [\"GET /repos/{owner}/{repo}/subscribers\"],\n        markNotificationsAsRead: [\"PUT /notifications\"],\n        markRepoNotificationsAsRead: [\"PUT /repos/{owner}/{repo}/notifications\"],\n        markThreadAsRead: [\"PATCH /notifications/threads/{thread_id}\"],\n        setRepoSubscription: [\"PUT /repos/{owner}/{repo}/subscription\"],\n        setThreadSubscription: [\n            \"PUT /notifications/threads/{thread_id}/subscription\",\n        ],\n        starRepoForAuthenticatedUser: [\"PUT /user/starred/{owner}/{repo}\"],\n        unstarRepoForAuthenticatedUser: [\"DELETE /user/starred/{owner}/{repo}\"],\n    },\n    apps: {\n        addRepoToInstallation: [\n            \"PUT /user/installations/{installation_id}/repositories/{repository_id}\",\n        ],\n        checkToken: [\"POST /applications/{client_id}/token\"],\n        createContentAttachment: [\n            \"POST /content_references/{content_reference_id}/attachments\",\n            { mediaType: { previews: [\"corsair\"] } },\n        ],\n        createFromManifest: [\"POST /app-manifests/{code}/conversions\"],\n        createInstallationAccessToken: [\n            \"POST /app/installations/{installation_id}/access_tokens\",\n        ],\n        deleteAuthorization: [\"DELETE /applications/{client_id}/grant\"],\n        deleteInstallation: [\"DELETE /app/installations/{installation_id}\"],\n        deleteToken: [\"DELETE /applications/{client_id}/token\"],\n        getAuthenticated: [\"GET /app\"],\n        getBySlug: [\"GET /apps/{app_slug}\"],\n        getInstallation: [\"GET /app/installations/{installation_id}\"],\n        getOrgInstallation: [\"GET /orgs/{org}/installation\"],\n        getRepoInstallation: [\"GET /repos/{owner}/{repo}/installation\"],\n        getSubscriptionPlanForAccount: [\n            \"GET /marketplace_listing/accounts/{account_id}\",\n        ],\n        getSubscriptionPlanForAccountStubbed: [\n            \"GET /marketplace_listing/stubbed/accounts/{account_id}\",\n        ],\n        getUserInstallation: [\"GET /users/{username}/installation\"],\n        getWebhookConfigForApp: [\"GET /app/hook/config\"],\n        listAccountsForPlan: [\"GET /marketplace_listing/plans/{plan_id}/accounts\"],\n        listAccountsForPlanStubbed: [\n            \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\",\n        ],\n        listInstallationReposForAuthenticatedUser: [\n            \"GET /user/installations/{installation_id}/repositories\",\n        ],\n        listInstallations: [\"GET /app/installations\"],\n        listInstallationsForAuthenticatedUser: [\"GET /user/installations\"],\n        listPlans: [\"GET /marketplace_listing/plans\"],\n        listPlansStubbed: [\"GET /marketplace_listing/stubbed/plans\"],\n        listReposAccessibleToInstallation: [\"GET /installation/repositories\"],\n        listSubscriptionsForAuthenticatedUser: [\"GET /user/marketplace_purchases\"],\n        listSubscriptionsForAuthenticatedUserStubbed: [\n            \"GET /user/marketplace_purchases/stubbed\",\n        ],\n        removeRepoFromInstallation: [\n            \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\",\n        ],\n        resetToken: [\"PATCH /applications/{client_id}/token\"],\n        revokeInstallationAccessToken: [\"DELETE /installation/token\"],\n        scopeToken: [\"POST /applications/{client_id}/token/scoped\"],\n        suspendInstallation: [\"PUT /app/installations/{installation_id}/suspended\"],\n        unsuspendInstallation: [\n            \"DELETE /app/installations/{installation_id}/suspended\",\n        ],\n        updateWebhookConfigForApp: [\"PATCH /app/hook/config\"],\n    },\n    billing: {\n        getGithubActionsBillingOrg: [\"GET /orgs/{org}/settings/billing/actions\"],\n        getGithubActionsBillingUser: [\n            \"GET /users/{username}/settings/billing/actions\",\n        ],\n        getGithubPackagesBillingOrg: [\"GET /orgs/{org}/settings/billing/packages\"],\n        getGithubPackagesBillingUser: [\n            \"GET /users/{username}/settings/billing/packages\",\n        ],\n        getSharedStorageBillingOrg: [\n            \"GET /orgs/{org}/settings/billing/shared-storage\",\n        ],\n        getSharedStorageBillingUser: [\n            \"GET /users/{username}/settings/billing/shared-storage\",\n        ],\n    },\n    checks: {\n        create: [\"POST /repos/{owner}/{repo}/check-runs\"],\n        createSuite: [\"POST /repos/{owner}/{repo}/check-suites\"],\n        get: [\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"],\n        getSuite: [\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"],\n        listAnnotations: [\n            \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\",\n        ],\n        listForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"],\n        listForSuite: [\n            \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\",\n        ],\n        listSuitesForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"],\n        rerequestSuite: [\n            \"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\",\n        ],\n        setSuitesPreferences: [\n            \"PATCH /repos/{owner}/{repo}/check-suites/preferences\",\n        ],\n        update: [\"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"],\n    },\n    codeScanning: {\n        getAlert: [\n            \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\",\n            {},\n            { renamedParameters: { alert_id: \"alert_number\" } },\n        ],\n        listAlertsForRepo: [\"GET /repos/{owner}/{repo}/code-scanning/alerts\"],\n        listRecentAnalyses: [\"GET /repos/{owner}/{repo}/code-scanning/analyses\"],\n        updateAlert: [\n            \"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\",\n        ],\n        uploadSarif: [\"POST /repos/{owner}/{repo}/code-scanning/sarifs\"],\n    },\n    codesOfConduct: {\n        getAllCodesOfConduct: [\n            \"GET /codes_of_conduct\",\n            { mediaType: { previews: [\"scarlet-witch\"] } },\n        ],\n        getConductCode: [\n            \"GET /codes_of_conduct/{key}\",\n            { mediaType: { previews: [\"scarlet-witch\"] } },\n        ],\n        getForRepo: [\n            \"GET /repos/{owner}/{repo}/community/code_of_conduct\",\n            { mediaType: { previews: [\"scarlet-witch\"] } },\n        ],\n    },\n    emojis: { get: [\"GET /emojis\"] },\n    enterpriseAdmin: {\n        disableSelectedOrganizationGithubActionsEnterprise: [\n            \"DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\",\n        ],\n        enableSelectedOrganizationGithubActionsEnterprise: [\n            \"PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\",\n        ],\n        getAllowedActionsEnterprise: [\n            \"GET /enterprises/{enterprise}/actions/permissions/selected-actions\",\n        ],\n        getGithubActionsPermissionsEnterprise: [\n            \"GET /enterprises/{enterprise}/actions/permissions\",\n        ],\n        listSelectedOrganizationsEnabledGithubActionsEnterprise: [\n            \"GET /enterprises/{enterprise}/actions/permissions/organizations\",\n        ],\n        setAllowedActionsEnterprise: [\n            \"PUT /enterprises/{enterprise}/actions/permissions/selected-actions\",\n        ],\n        setGithubActionsPermissionsEnterprise: [\n            \"PUT /enterprises/{enterprise}/actions/permissions\",\n        ],\n        setSelectedOrganizationsEnabledGithubActionsEnterprise: [\n            \"PUT /enterprises/{enterprise}/actions/permissions/organizations\",\n        ],\n    },\n    gists: {\n        checkIsStarred: [\"GET /gists/{gist_id}/star\"],\n        create: [\"POST /gists\"],\n        createComment: [\"POST /gists/{gist_id}/comments\"],\n        delete: [\"DELETE /gists/{gist_id}\"],\n        deleteComment: [\"DELETE /gists/{gist_id}/comments/{comment_id}\"],\n        fork: [\"POST /gists/{gist_id}/forks\"],\n        get: [\"GET /gists/{gist_id}\"],\n        getComment: [\"GET /gists/{gist_id}/comments/{comment_id}\"],\n        getRevision: [\"GET /gists/{gist_id}/{sha}\"],\n        list: [\"GET /gists\"],\n        listComments: [\"GET /gists/{gist_id}/comments\"],\n        listCommits: [\"GET /gists/{gist_id}/commits\"],\n        listForUser: [\"GET /users/{username}/gists\"],\n        listForks: [\"GET /gists/{gist_id}/forks\"],\n        listPublic: [\"GET /gists/public\"],\n        listStarred: [\"GET /gists/starred\"],\n        star: [\"PUT /gists/{gist_id}/star\"],\n        unstar: [\"DELETE /gists/{gist_id}/star\"],\n        update: [\"PATCH /gists/{gist_id}\"],\n        updateComment: [\"PATCH /gists/{gist_id}/comments/{comment_id}\"],\n    },\n    git: {\n        createBlob: [\"POST /repos/{owner}/{repo}/git/blobs\"],\n        createCommit: [\"POST /repos/{owner}/{repo}/git/commits\"],\n        createRef: [\"POST /repos/{owner}/{repo}/git/refs\"],\n        createTag: [\"POST /repos/{owner}/{repo}/git/tags\"],\n        createTree: [\"POST /repos/{owner}/{repo}/git/trees\"],\n        deleteRef: [\"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"],\n        getBlob: [\"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"],\n        getCommit: [\"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"],\n        getRef: [\"GET /repos/{owner}/{repo}/git/ref/{ref}\"],\n        getTag: [\"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"],\n        getTree: [\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"],\n        listMatchingRefs: [\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"],\n        updateRef: [\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"],\n    },\n    gitignore: {\n        getAllTemplates: [\"GET /gitignore/templates\"],\n        getTemplate: [\"GET /gitignore/templates/{name}\"],\n    },\n    interactions: {\n        getRestrictionsForAuthenticatedUser: [\"GET /user/interaction-limits\"],\n        getRestrictionsForOrg: [\"GET /orgs/{org}/interaction-limits\"],\n        getRestrictionsForRepo: [\"GET /repos/{owner}/{repo}/interaction-limits\"],\n        getRestrictionsForYourPublicRepos: [\n            \"GET /user/interaction-limits\",\n            {},\n            { renamed: [\"interactions\", \"getRestrictionsForAuthenticatedUser\"] },\n        ],\n        removeRestrictionsForAuthenticatedUser: [\"DELETE /user/interaction-limits\"],\n        removeRestrictionsForOrg: [\"DELETE /orgs/{org}/interaction-limits\"],\n        removeRestrictionsForRepo: [\n            \"DELETE /repos/{owner}/{repo}/interaction-limits\",\n        ],\n        removeRestrictionsForYourPublicRepos: [\n            \"DELETE /user/interaction-limits\",\n            {},\n            { renamed: [\"interactions\", \"removeRestrictionsForAuthenticatedUser\"] },\n        ],\n        setRestrictionsForAuthenticatedUser: [\"PUT /user/interaction-limits\"],\n        setRestrictionsForOrg: [\"PUT /orgs/{org}/interaction-limits\"],\n        setRestrictionsForRepo: [\"PUT /repos/{owner}/{repo}/interaction-limits\"],\n        setRestrictionsForYourPublicRepos: [\n            \"PUT /user/interaction-limits\",\n            {},\n            { renamed: [\"interactions\", \"setRestrictionsForAuthenticatedUser\"] },\n        ],\n    },\n    issues: {\n        addAssignees: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\",\n        ],\n        addLabels: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n        checkUserCanBeAssigned: [\"GET /repos/{owner}/{repo}/assignees/{assignee}\"],\n        create: [\"POST /repos/{owner}/{repo}/issues\"],\n        createComment: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\",\n        ],\n        createLabel: [\"POST /repos/{owner}/{repo}/labels\"],\n        createMilestone: [\"POST /repos/{owner}/{repo}/milestones\"],\n        deleteComment: [\n            \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\",\n        ],\n        deleteLabel: [\"DELETE /repos/{owner}/{repo}/labels/{name}\"],\n        deleteMilestone: [\n            \"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\",\n        ],\n        get: [\"GET /repos/{owner}/{repo}/issues/{issue_number}\"],\n        getComment: [\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n        getEvent: [\"GET /repos/{owner}/{repo}/issues/events/{event_id}\"],\n        getLabel: [\"GET /repos/{owner}/{repo}/labels/{name}\"],\n        getMilestone: [\"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"],\n        list: [\"GET /issues\"],\n        listAssignees: [\"GET /repos/{owner}/{repo}/assignees\"],\n        listComments: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"],\n        listCommentsForRepo: [\"GET /repos/{owner}/{repo}/issues/comments\"],\n        listEvents: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"],\n        listEventsForRepo: [\"GET /repos/{owner}/{repo}/issues/events\"],\n        listEventsForTimeline: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\",\n            { mediaType: { previews: [\"mockingbird\"] } },\n        ],\n        listForAuthenticatedUser: [\"GET /user/issues\"],\n        listForOrg: [\"GET /orgs/{org}/issues\"],\n        listForRepo: [\"GET /repos/{owner}/{repo}/issues\"],\n        listLabelsForMilestone: [\n            \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\",\n        ],\n        listLabelsForRepo: [\"GET /repos/{owner}/{repo}/labels\"],\n        listLabelsOnIssue: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n        ],\n        listMilestones: [\"GET /repos/{owner}/{repo}/milestones\"],\n        lock: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n        removeAllLabels: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n        ],\n        removeAssignees: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\",\n        ],\n        removeLabel: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\",\n        ],\n        setLabels: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n        unlock: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n        update: [\"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"],\n        updateComment: [\"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n        updateLabel: [\"PATCH /repos/{owner}/{repo}/labels/{name}\"],\n        updateMilestone: [\n            \"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\",\n        ],\n    },\n    licenses: {\n        get: [\"GET /licenses/{license}\"],\n        getAllCommonlyUsed: [\"GET /licenses\"],\n        getForRepo: [\"GET /repos/{owner}/{repo}/license\"],\n    },\n    markdown: {\n        render: [\"POST /markdown\"],\n        renderRaw: [\n            \"POST /markdown/raw\",\n            { headers: { \"content-type\": \"text/plain; charset=utf-8\" } },\n        ],\n    },\n    meta: {\n        get: [\"GET /meta\"],\n        getOctocat: [\"GET /octocat\"],\n        getZen: [\"GET /zen\"],\n        root: [\"GET /\"],\n    },\n    migrations: {\n        cancelImport: [\"DELETE /repos/{owner}/{repo}/import\"],\n        deleteArchiveForAuthenticatedUser: [\n            \"DELETE /user/migrations/{migration_id}/archive\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        deleteArchiveForOrg: [\n            \"DELETE /orgs/{org}/migrations/{migration_id}/archive\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        downloadArchiveForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}/archive\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        getArchiveForAuthenticatedUser: [\n            \"GET /user/migrations/{migration_id}/archive\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        getCommitAuthors: [\"GET /repos/{owner}/{repo}/import/authors\"],\n        getImportStatus: [\"GET /repos/{owner}/{repo}/import\"],\n        getLargeFiles: [\"GET /repos/{owner}/{repo}/import/large_files\"],\n        getStatusForAuthenticatedUser: [\n            \"GET /user/migrations/{migration_id}\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        getStatusForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        listForAuthenticatedUser: [\n            \"GET /user/migrations\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        listForOrg: [\n            \"GET /orgs/{org}/migrations\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        listReposForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}/repositories\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        listReposForUser: [\n            \"GET /user/migrations/{migration_id}/repositories\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        mapCommitAuthor: [\"PATCH /repos/{owner}/{repo}/import/authors/{author_id}\"],\n        setLfsPreference: [\"PATCH /repos/{owner}/{repo}/import/lfs\"],\n        startForAuthenticatedUser: [\"POST /user/migrations\"],\n        startForOrg: [\"POST /orgs/{org}/migrations\"],\n        startImport: [\"PUT /repos/{owner}/{repo}/import\"],\n        unlockRepoForAuthenticatedUser: [\n            \"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        unlockRepoForOrg: [\n            \"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        updateImport: [\"PATCH /repos/{owner}/{repo}/import\"],\n    },\n    orgs: {\n        blockUser: [\"PUT /orgs/{org}/blocks/{username}\"],\n        cancelInvitation: [\"DELETE /orgs/{org}/invitations/{invitation_id}\"],\n        checkBlockedUser: [\"GET /orgs/{org}/blocks/{username}\"],\n        checkMembershipForUser: [\"GET /orgs/{org}/members/{username}\"],\n        checkPublicMembershipForUser: [\"GET /orgs/{org}/public_members/{username}\"],\n        convertMemberToOutsideCollaborator: [\n            \"PUT /orgs/{org}/outside_collaborators/{username}\",\n        ],\n        createInvitation: [\"POST /orgs/{org}/invitations\"],\n        createWebhook: [\"POST /orgs/{org}/hooks\"],\n        deleteWebhook: [\"DELETE /orgs/{org}/hooks/{hook_id}\"],\n        get: [\"GET /orgs/{org}\"],\n        getMembershipForAuthenticatedUser: [\"GET /user/memberships/orgs/{org}\"],\n        getMembershipForUser: [\"GET /orgs/{org}/memberships/{username}\"],\n        getWebhook: [\"GET /orgs/{org}/hooks/{hook_id}\"],\n        getWebhookConfigForOrg: [\"GET /orgs/{org}/hooks/{hook_id}/config\"],\n        list: [\"GET /organizations\"],\n        listAppInstallations: [\"GET /orgs/{org}/installations\"],\n        listBlockedUsers: [\"GET /orgs/{org}/blocks\"],\n        listFailedInvitations: [\"GET /orgs/{org}/failed_invitations\"],\n        listForAuthenticatedUser: [\"GET /user/orgs\"],\n        listForUser: [\"GET /users/{username}/orgs\"],\n        listInvitationTeams: [\"GET /orgs/{org}/invitations/{invitation_id}/teams\"],\n        listMembers: [\"GET /orgs/{org}/members\"],\n        listMembershipsForAuthenticatedUser: [\"GET /user/memberships/orgs\"],\n        listOutsideCollaborators: [\"GET /orgs/{org}/outside_collaborators\"],\n        listPendingInvitations: [\"GET /orgs/{org}/invitations\"],\n        listPublicMembers: [\"GET /orgs/{org}/public_members\"],\n        listWebhooks: [\"GET /orgs/{org}/hooks\"],\n        pingWebhook: [\"POST /orgs/{org}/hooks/{hook_id}/pings\"],\n        removeMember: [\"DELETE /orgs/{org}/members/{username}\"],\n        removeMembershipForUser: [\"DELETE /orgs/{org}/memberships/{username}\"],\n        removeOutsideCollaborator: [\n            \"DELETE /orgs/{org}/outside_collaborators/{username}\",\n        ],\n        removePublicMembershipForAuthenticatedUser: [\n            \"DELETE /orgs/{org}/public_members/{username}\",\n        ],\n        setMembershipForUser: [\"PUT /orgs/{org}/memberships/{username}\"],\n        setPublicMembershipForAuthenticatedUser: [\n            \"PUT /orgs/{org}/public_members/{username}\",\n        ],\n        unblockUser: [\"DELETE /orgs/{org}/blocks/{username}\"],\n        update: [\"PATCH /orgs/{org}\"],\n        updateMembershipForAuthenticatedUser: [\n            \"PATCH /user/memberships/orgs/{org}\",\n        ],\n        updateWebhook: [\"PATCH /orgs/{org}/hooks/{hook_id}\"],\n        updateWebhookConfigForOrg: [\"PATCH /orgs/{org}/hooks/{hook_id}/config\"],\n    },\n    projects: {\n        addCollaborator: [\n            \"PUT /projects/{project_id}/collaborators/{username}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createCard: [\n            \"POST /projects/columns/{column_id}/cards\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createColumn: [\n            \"POST /projects/{project_id}/columns\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createForAuthenticatedUser: [\n            \"POST /user/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createForOrg: [\n            \"POST /orgs/{org}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createForRepo: [\n            \"POST /repos/{owner}/{repo}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        delete: [\n            \"DELETE /projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        deleteCard: [\n            \"DELETE /projects/columns/cards/{card_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        deleteColumn: [\n            \"DELETE /projects/columns/{column_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        get: [\n            \"GET /projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        getCard: [\n            \"GET /projects/columns/cards/{card_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        getColumn: [\n            \"GET /projects/columns/{column_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        getPermissionForUser: [\n            \"GET /projects/{project_id}/collaborators/{username}/permission\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listCards: [\n            \"GET /projects/columns/{column_id}/cards\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listCollaborators: [\n            \"GET /projects/{project_id}/collaborators\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listColumns: [\n            \"GET /projects/{project_id}/columns\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listForOrg: [\n            \"GET /orgs/{org}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listForRepo: [\n            \"GET /repos/{owner}/{repo}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listForUser: [\n            \"GET /users/{username}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        moveCard: [\n            \"POST /projects/columns/cards/{card_id}/moves\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        moveColumn: [\n            \"POST /projects/columns/{column_id}/moves\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        removeCollaborator: [\n            \"DELETE /projects/{project_id}/collaborators/{username}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        update: [\n            \"PATCH /projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        updateCard: [\n            \"PATCH /projects/columns/cards/{card_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        updateColumn: [\n            \"PATCH /projects/columns/{column_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n    },\n    pulls: {\n        checkIfMerged: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n        create: [\"POST /repos/{owner}/{repo}/pulls\"],\n        createReplyForReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\",\n        ],\n        createReview: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n        createReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n        ],\n        deletePendingReview: [\n            \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\",\n        ],\n        deleteReviewComment: [\n            \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\",\n        ],\n        dismissReview: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\",\n        ],\n        get: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}\"],\n        getReview: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\",\n        ],\n        getReviewComment: [\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"],\n        list: [\"GET /repos/{owner}/{repo}/pulls\"],\n        listCommentsForReview: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\",\n        ],\n        listCommits: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"],\n        listFiles: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"],\n        listRequestedReviewers: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n        ],\n        listReviewComments: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n        ],\n        listReviewCommentsForRepo: [\"GET /repos/{owner}/{repo}/pulls/comments\"],\n        listReviews: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n        merge: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n        removeRequestedReviewers: [\n            \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n        ],\n        requestReviewers: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n        ],\n        submitReview: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\",\n        ],\n        update: [\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"],\n        updateBranch: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\",\n            { mediaType: { previews: [\"lydian\"] } },\n        ],\n        updateReview: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\",\n        ],\n        updateReviewComment: [\n            \"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\",\n        ],\n    },\n    rateLimit: { get: [\"GET /rate_limit\"] },\n    reactions: {\n        createForCommitComment: [\n            \"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForIssue: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForIssueComment: [\n            \"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForPullRequestReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForTeamDiscussionCommentInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForTeamDiscussionInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForCommitComment: [\n            \"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForIssue: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForIssueComment: [\n            \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForPullRequestComment: [\n            \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForTeamDiscussion: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForTeamDiscussionComment: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteLegacy: [\n            \"DELETE /reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n            {\n                deprecated: \"octokit.reactions.deleteLegacy() is deprecated, see https://docs.github.com/v3/reactions/#delete-a-reaction-legacy\",\n            },\n        ],\n        listForCommitComment: [\n            \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForIssue: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForIssueComment: [\n            \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForPullRequestReviewComment: [\n            \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForTeamDiscussionCommentInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForTeamDiscussionInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n    },\n    repos: {\n        acceptInvitation: [\"PATCH /user/repository_invitations/{invitation_id}\"],\n        addAppAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            { mapToData: \"apps\" },\n        ],\n        addCollaborator: [\"PUT /repos/{owner}/{repo}/collaborators/{username}\"],\n        addStatusCheckContexts: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            { mapToData: \"contexts\" },\n        ],\n        addTeamAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            { mapToData: \"teams\" },\n        ],\n        addUserAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            { mapToData: \"users\" },\n        ],\n        checkCollaborator: [\"GET /repos/{owner}/{repo}/collaborators/{username}\"],\n        checkVulnerabilityAlerts: [\n            \"GET /repos/{owner}/{repo}/vulnerability-alerts\",\n            { mediaType: { previews: [\"dorian\"] } },\n        ],\n        compareCommits: [\"GET /repos/{owner}/{repo}/compare/{base}...{head}\"],\n        createCommitComment: [\n            \"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n        ],\n        createCommitSignatureProtection: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\",\n            { mediaType: { previews: [\"zzzax\"] } },\n        ],\n        createCommitStatus: [\"POST /repos/{owner}/{repo}/statuses/{sha}\"],\n        createDeployKey: [\"POST /repos/{owner}/{repo}/keys\"],\n        createDeployment: [\"POST /repos/{owner}/{repo}/deployments\"],\n        createDeploymentStatus: [\n            \"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n        ],\n        createDispatchEvent: [\"POST /repos/{owner}/{repo}/dispatches\"],\n        createForAuthenticatedUser: [\"POST /user/repos\"],\n        createFork: [\"POST /repos/{owner}/{repo}/forks\"],\n        createInOrg: [\"POST /orgs/{org}/repos\"],\n        createOrUpdateFileContents: [\"PUT /repos/{owner}/{repo}/contents/{path}\"],\n        createPagesSite: [\n            \"POST /repos/{owner}/{repo}/pages\",\n            { mediaType: { previews: [\"switcheroo\"] } },\n        ],\n        createRelease: [\"POST /repos/{owner}/{repo}/releases\"],\n        createUsingTemplate: [\n            \"POST /repos/{template_owner}/{template_repo}/generate\",\n            { mediaType: { previews: [\"baptiste\"] } },\n        ],\n        createWebhook: [\"POST /repos/{owner}/{repo}/hooks\"],\n        declineInvitation: [\"DELETE /user/repository_invitations/{invitation_id}\"],\n        delete: [\"DELETE /repos/{owner}/{repo}\"],\n        deleteAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\",\n        ],\n        deleteAdminBranchProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\",\n        ],\n        deleteBranchProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\",\n        ],\n        deleteCommitComment: [\"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"],\n        deleteCommitSignatureProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\",\n            { mediaType: { previews: [\"zzzax\"] } },\n        ],\n        deleteDeployKey: [\"DELETE /repos/{owner}/{repo}/keys/{key_id}\"],\n        deleteDeployment: [\n            \"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\",\n        ],\n        deleteFile: [\"DELETE /repos/{owner}/{repo}/contents/{path}\"],\n        deleteInvitation: [\n            \"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\",\n        ],\n        deletePagesSite: [\n            \"DELETE /repos/{owner}/{repo}/pages\",\n            { mediaType: { previews: [\"switcheroo\"] } },\n        ],\n        deletePullRequestReviewProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\",\n        ],\n        deleteRelease: [\"DELETE /repos/{owner}/{repo}/releases/{release_id}\"],\n        deleteReleaseAsset: [\n            \"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\",\n        ],\n        deleteWebhook: [\"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"],\n        disableAutomatedSecurityFixes: [\n            \"DELETE /repos/{owner}/{repo}/automated-security-fixes\",\n            { mediaType: { previews: [\"london\"] } },\n        ],\n        disableVulnerabilityAlerts: [\n            \"DELETE /repos/{owner}/{repo}/vulnerability-alerts\",\n            { mediaType: { previews: [\"dorian\"] } },\n        ],\n        downloadArchive: [\n            \"GET /repos/{owner}/{repo}/zipball/{ref}\",\n            {},\n            { renamed: [\"repos\", \"downloadZipballArchive\"] },\n        ],\n        downloadTarballArchive: [\"GET /repos/{owner}/{repo}/tarball/{ref}\"],\n        downloadZipballArchive: [\"GET /repos/{owner}/{repo}/zipball/{ref}\"],\n        enableAutomatedSecurityFixes: [\n            \"PUT /repos/{owner}/{repo}/automated-security-fixes\",\n            { mediaType: { previews: [\"london\"] } },\n        ],\n        enableVulnerabilityAlerts: [\n            \"PUT /repos/{owner}/{repo}/vulnerability-alerts\",\n            { mediaType: { previews: [\"dorian\"] } },\n        ],\n        get: [\"GET /repos/{owner}/{repo}\"],\n        getAccessRestrictions: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\",\n        ],\n        getAdminBranchProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\",\n        ],\n        getAllStatusCheckContexts: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n        ],\n        getAllTopics: [\n            \"GET /repos/{owner}/{repo}/topics\",\n            { mediaType: { previews: [\"mercy\"] } },\n        ],\n        getAppsWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n        ],\n        getBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}\"],\n        getBranchProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection\",\n        ],\n        getClones: [\"GET /repos/{owner}/{repo}/traffic/clones\"],\n        getCodeFrequencyStats: [\"GET /repos/{owner}/{repo}/stats/code_frequency\"],\n        getCollaboratorPermissionLevel: [\n            \"GET /repos/{owner}/{repo}/collaborators/{username}/permission\",\n        ],\n        getCombinedStatusForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/status\"],\n        getCommit: [\"GET /repos/{owner}/{repo}/commits/{ref}\"],\n        getCommitActivityStats: [\"GET /repos/{owner}/{repo}/stats/commit_activity\"],\n        getCommitComment: [\"GET /repos/{owner}/{repo}/comments/{comment_id}\"],\n        getCommitSignatureProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\",\n            { mediaType: { previews: [\"zzzax\"] } },\n        ],\n        getCommunityProfileMetrics: [\"GET /repos/{owner}/{repo}/community/profile\"],\n        getContent: [\"GET /repos/{owner}/{repo}/contents/{path}\"],\n        getContributorsStats: [\"GET /repos/{owner}/{repo}/stats/contributors\"],\n        getDeployKey: [\"GET /repos/{owner}/{repo}/keys/{key_id}\"],\n        getDeployment: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"],\n        getDeploymentStatus: [\n            \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\",\n        ],\n        getLatestPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/latest\"],\n        getLatestRelease: [\"GET /repos/{owner}/{repo}/releases/latest\"],\n        getPages: [\"GET /repos/{owner}/{repo}/pages\"],\n        getPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"],\n        getParticipationStats: [\"GET /repos/{owner}/{repo}/stats/participation\"],\n        getPullRequestReviewProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\",\n        ],\n        getPunchCardStats: [\"GET /repos/{owner}/{repo}/stats/punch_card\"],\n        getReadme: [\"GET /repos/{owner}/{repo}/readme\"],\n        getRelease: [\"GET /repos/{owner}/{repo}/releases/{release_id}\"],\n        getReleaseAsset: [\"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n        getReleaseByTag: [\"GET /repos/{owner}/{repo}/releases/tags/{tag}\"],\n        getStatusChecksProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n        ],\n        getTeamsWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n        ],\n        getTopPaths: [\"GET /repos/{owner}/{repo}/traffic/popular/paths\"],\n        getTopReferrers: [\"GET /repos/{owner}/{repo}/traffic/popular/referrers\"],\n        getUsersWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n        ],\n        getViews: [\"GET /repos/{owner}/{repo}/traffic/views\"],\n        getWebhook: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}\"],\n        getWebhookConfigForRepo: [\n            \"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\",\n        ],\n        listBranches: [\"GET /repos/{owner}/{repo}/branches\"],\n        listBranchesForHeadCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\",\n            { mediaType: { previews: [\"groot\"] } },\n        ],\n        listCollaborators: [\"GET /repos/{owner}/{repo}/collaborators\"],\n        listCommentsForCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n        ],\n        listCommitCommentsForRepo: [\"GET /repos/{owner}/{repo}/comments\"],\n        listCommitStatusesForRef: [\n            \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\",\n        ],\n        listCommits: [\"GET /repos/{owner}/{repo}/commits\"],\n        listContributors: [\"GET /repos/{owner}/{repo}/contributors\"],\n        listDeployKeys: [\"GET /repos/{owner}/{repo}/keys\"],\n        listDeploymentStatuses: [\n            \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n        ],\n        listDeployments: [\"GET /repos/{owner}/{repo}/deployments\"],\n        listForAuthenticatedUser: [\"GET /user/repos\"],\n        listForOrg: [\"GET /orgs/{org}/repos\"],\n        listForUser: [\"GET /users/{username}/repos\"],\n        listForks: [\"GET /repos/{owner}/{repo}/forks\"],\n        listInvitations: [\"GET /repos/{owner}/{repo}/invitations\"],\n        listInvitationsForAuthenticatedUser: [\"GET /user/repository_invitations\"],\n        listLanguages: [\"GET /repos/{owner}/{repo}/languages\"],\n        listPagesBuilds: [\"GET /repos/{owner}/{repo}/pages/builds\"],\n        listPublic: [\"GET /repositories\"],\n        listPullRequestsAssociatedWithCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\",\n            { mediaType: { previews: [\"groot\"] } },\n        ],\n        listReleaseAssets: [\n            \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\",\n        ],\n        listReleases: [\"GET /repos/{owner}/{repo}/releases\"],\n        listTags: [\"GET /repos/{owner}/{repo}/tags\"],\n        listTeams: [\"GET /repos/{owner}/{repo}/teams\"],\n        listWebhooks: [\"GET /repos/{owner}/{repo}/hooks\"],\n        merge: [\"POST /repos/{owner}/{repo}/merges\"],\n        pingWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"],\n        removeAppAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            { mapToData: \"apps\" },\n        ],\n        removeCollaborator: [\n            \"DELETE /repos/{owner}/{repo}/collaborators/{username}\",\n        ],\n        removeStatusCheckContexts: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            { mapToData: \"contexts\" },\n        ],\n        removeStatusCheckProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n        ],\n        removeTeamAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            { mapToData: \"teams\" },\n        ],\n        removeUserAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            { mapToData: \"users\" },\n        ],\n        renameBranch: [\"POST /repos/{owner}/{repo}/branches/{branch}/rename\"],\n        replaceAllTopics: [\n            \"PUT /repos/{owner}/{repo}/topics\",\n            { mediaType: { previews: [\"mercy\"] } },\n        ],\n        requestPagesBuild: [\"POST /repos/{owner}/{repo}/pages/builds\"],\n        setAdminBranchProtection: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\",\n        ],\n        setAppAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            { mapToData: \"apps\" },\n        ],\n        setStatusCheckContexts: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            { mapToData: \"contexts\" },\n        ],\n        setTeamAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            { mapToData: \"teams\" },\n        ],\n        setUserAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            { mapToData: \"users\" },\n        ],\n        testPushWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"],\n        transfer: [\"POST /repos/{owner}/{repo}/transfer\"],\n        update: [\"PATCH /repos/{owner}/{repo}\"],\n        updateBranchProtection: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection\",\n        ],\n        updateCommitComment: [\"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"],\n        updateInformationAboutPagesSite: [\"PUT /repos/{owner}/{repo}/pages\"],\n        updateInvitation: [\n            \"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\",\n        ],\n        updatePullRequestReviewProtection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\",\n        ],\n        updateRelease: [\"PATCH /repos/{owner}/{repo}/releases/{release_id}\"],\n        updateReleaseAsset: [\n            \"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\",\n        ],\n        updateStatusCheckPotection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n            {},\n            { renamed: [\"repos\", \"updateStatusCheckProtection\"] },\n        ],\n        updateStatusCheckProtection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n        ],\n        updateWebhook: [\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"],\n        updateWebhookConfigForRepo: [\n            \"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\",\n        ],\n        uploadReleaseAsset: [\n            \"POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\",\n            { baseUrl: \"https://uploads.github.com\" },\n        ],\n    },\n    search: {\n        code: [\"GET /search/code\"],\n        commits: [\"GET /search/commits\", { mediaType: { previews: [\"cloak\"] } }],\n        issuesAndPullRequests: [\"GET /search/issues\"],\n        labels: [\"GET /search/labels\"],\n        repos: [\"GET /search/repositories\"],\n        topics: [\"GET /search/topics\", { mediaType: { previews: [\"mercy\"] } }],\n        users: [\"GET /search/users\"],\n    },\n    secretScanning: {\n        getAlert: [\n            \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\",\n        ],\n        listAlertsForRepo: [\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"],\n        updateAlert: [\n            \"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\",\n        ],\n    },\n    teams: {\n        addOrUpdateMembershipForUserInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\",\n        ],\n        addOrUpdateProjectPermissionsInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        addOrUpdateRepoPermissionsInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\",\n        ],\n        checkPermissionsForProjectInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        checkPermissionsForRepoInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\",\n        ],\n        create: [\"POST /orgs/{org}/teams\"],\n        createDiscussionCommentInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n        ],\n        createDiscussionInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions\"],\n        deleteDiscussionCommentInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\",\n        ],\n        deleteDiscussionInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\",\n        ],\n        deleteInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}\"],\n        getByName: [\"GET /orgs/{org}/teams/{team_slug}\"],\n        getDiscussionCommentInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\",\n        ],\n        getDiscussionInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\",\n        ],\n        getMembershipForUserInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\",\n        ],\n        list: [\"GET /orgs/{org}/teams\"],\n        listChildInOrg: [\"GET /orgs/{org}/teams/{team_slug}/teams\"],\n        listDiscussionCommentsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n        ],\n        listDiscussionsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions\"],\n        listForAuthenticatedUser: [\"GET /user/teams\"],\n        listMembersInOrg: [\"GET /orgs/{org}/teams/{team_slug}/members\"],\n        listPendingInvitationsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/invitations\",\n        ],\n        listProjectsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listReposInOrg: [\"GET /orgs/{org}/teams/{team_slug}/repos\"],\n        removeMembershipForUserInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\",\n        ],\n        removeProjectInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\",\n        ],\n        removeRepoInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\",\n        ],\n        updateDiscussionCommentInOrg: [\n            \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\",\n        ],\n        updateDiscussionInOrg: [\n            \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\",\n        ],\n        updateInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}\"],\n    },\n    users: {\n        addEmailForAuthenticated: [\"POST /user/emails\"],\n        block: [\"PUT /user/blocks/{username}\"],\n        checkBlocked: [\"GET /user/blocks/{username}\"],\n        checkFollowingForUser: [\"GET /users/{username}/following/{target_user}\"],\n        checkPersonIsFollowedByAuthenticated: [\"GET /user/following/{username}\"],\n        createGpgKeyForAuthenticated: [\"POST /user/gpg_keys\"],\n        createPublicSshKeyForAuthenticated: [\"POST /user/keys\"],\n        deleteEmailForAuthenticated: [\"DELETE /user/emails\"],\n        deleteGpgKeyForAuthenticated: [\"DELETE /user/gpg_keys/{gpg_key_id}\"],\n        deletePublicSshKeyForAuthenticated: [\"DELETE /user/keys/{key_id}\"],\n        follow: [\"PUT /user/following/{username}\"],\n        getAuthenticated: [\"GET /user\"],\n        getByUsername: [\"GET /users/{username}\"],\n        getContextForUser: [\"GET /users/{username}/hovercard\"],\n        getGpgKeyForAuthenticated: [\"GET /user/gpg_keys/{gpg_key_id}\"],\n        getPublicSshKeyForAuthenticated: [\"GET /user/keys/{key_id}\"],\n        list: [\"GET /users\"],\n        listBlockedByAuthenticated: [\"GET /user/blocks\"],\n        listEmailsForAuthenticated: [\"GET /user/emails\"],\n        listFollowedByAuthenticated: [\"GET /user/following\"],\n        listFollowersForAuthenticatedUser: [\"GET /user/followers\"],\n        listFollowersForUser: [\"GET /users/{username}/followers\"],\n        listFollowingForUser: [\"GET /users/{username}/following\"],\n        listGpgKeysForAuthenticated: [\"GET /user/gpg_keys\"],\n        listGpgKeysForUser: [\"GET /users/{username}/gpg_keys\"],\n        listPublicEmailsForAuthenticated: [\"GET /user/public_emails\"],\n        listPublicKeysForUser: [\"GET /users/{username}/keys\"],\n        listPublicSshKeysForAuthenticated: [\"GET /user/keys\"],\n        setPrimaryEmailVisibilityForAuthenticated: [\"PATCH /user/email/visibility\"],\n        unblock: [\"DELETE /user/blocks/{username}\"],\n        unfollow: [\"DELETE /user/following/{username}\"],\n        updateAuthenticated: [\"PATCH /user\"],\n    },\n};\nexport default Endpoints;\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/generated/method-types.js":"export {};\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/generated/parameters-and-response-types.js":"export {};\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-types/endpoints-to-methods.d.ts":"import { Octokit } from \"@octokit/core\";\nimport { EndpointsDefaultsAndDecorations } from \"./types\";\nimport { RestEndpointMethods } from \"./generated/method-types\";\nexport declare function endpointsToMethods(octokit: Octokit, endpointsMap: EndpointsDefaultsAndDecorations): RestEndpointMethods;\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-types/index.d.ts":"import { Octokit } from \"@octokit/core\";\nexport { RestEndpointMethodTypes } from \"./generated/parameters-and-response-types\";\nimport { Api } from \"./types\";\n/**\n * This plugin is a 1:1 copy of internal @octokit/rest plugins. The primary\n * goal is to rebuild @octokit/rest on top of @octokit/core. Once that is\n * done, we will remove the registerEndpoints methods and return the methods\n * directly as with the other plugins. At that point we will also remove the\n * legacy workarounds and deprecations.\n *\n * See the plan at\n * https://github.com/octokit/plugin-rest-endpoint-methods.js/pull/1\n */\nexport declare function restEndpointMethods(octokit: Octokit): Api;\nexport declare namespace restEndpointMethods {\n    var VERSION: string;\n}\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-types/types.d.ts":"import { Route, RequestParameters } from \"@octokit/types\";\nimport { RestEndpointMethods } from \"./generated/method-types\";\nexport declare type Api = RestEndpointMethods;\nexport declare type EndpointDecorations = {\n    mapToData?: string;\n    deprecated?: string;\n    renamed?: [string, string];\n    renamedParameters?: {\n        [name: string]: string;\n    };\n};\nexport declare type EndpointsDefaultsAndDecorations = {\n    [scope: string]: {\n        [methodName: string]: [Route, RequestParameters?, EndpointDecorations?];\n    };\n};\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-types/version.d.ts":"export declare const VERSION = \"4.10.3\";\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-types/generated/endpoints.d.ts":"import { EndpointsDefaultsAndDecorations } from \"../types\";\ndeclare const Endpoints: EndpointsDefaultsAndDecorations;\nexport default Endpoints;\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-types/generated/method-types.d.ts":"import { EndpointInterface, RequestInterface } from \"@octokit/types\";\nimport { RestEndpointMethodTypes } from \"./parameters-and-response-types\";\nexport declare type RestEndpointMethods = {\n    actions: {\n        /**\n         * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.\n         */\n        addSelectedRepoToOrgSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"addSelectedRepoToOrgSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"addSelectedRepoToOrgSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n         */\n        cancelWorkflowRun: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"cancelWorkflowRun\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"cancelWorkflowRun\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n         * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\n         * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to\n         * use this endpoint.\n         *\n         * #### Example encrypting a secret using Node.js\n         *\n         * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n         *\n         * ```\n         * const sodium = require('tweetsodium');\n         *\n         * const key = \"base64-encoded-public-key\";\n         * const value = \"plain-text-secret\";\n         *\n         * // Convert the message and key to Uint8Array's (Buffer implements that interface)\n         * const messageBytes = Buffer.from(value);\n         * const keyBytes = Buffer.from(key, 'base64');\n         *\n         * // Encrypt using LibSodium.\n         * const encryptedBytes = sodium.seal(messageBytes, keyBytes);\n         *\n         * // Base64 the encrypted secret\n         * const encrypted = Buffer.from(encryptedBytes).toString('base64');\n         *\n         * console.log(encrypted);\n         * ```\n         *\n         *\n         * #### Example encrypting a secret using Python\n         *\n         * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n         *\n         * ```\n         * from base64 import b64encode\n         * from nacl import encoding, public\n         *\n         * def encrypt(public_key: str, secret_value: str) -> str:\n         *   \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n         *   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n         *   sealed_box = public.SealedBox(public_key)\n         *   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n         *   return b64encode(encrypted).decode(\"utf-8\")\n         * ```\n         *\n         * #### Example encrypting a secret using C#\n         *\n         * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n         *\n         * ```\n         * var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\n         * var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n         *\n         * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n         *\n         * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n         * ```\n         *\n         * #### Example encrypting a secret using Ruby\n         *\n         * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n         *\n         * ```ruby\n         * require \"rbnacl\"\n         * require \"base64\"\n         *\n         * key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\n         * public_key = RbNaCl::PublicKey.new(key)\n         *\n         * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)\n         * encrypted_secret = box.encrypt(\"my_secret\")\n         *\n         * # Print the base64 encoded secret\n         * puts Base64.strict_encode64(encrypted_secret)\n         * ```\n         */\n        createOrUpdateOrgSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"createOrUpdateOrgSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"createOrUpdateOrgSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n         * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\n         * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\n         * this endpoint.\n         *\n         * #### Example encrypting a secret using Node.js\n         *\n         * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n         *\n         * ```\n         * const sodium = require('tweetsodium');\n         *\n         * const key = \"base64-encoded-public-key\";\n         * const value = \"plain-text-secret\";\n         *\n         * // Convert the message and key to Uint8Array's (Buffer implements that interface)\n         * const messageBytes = Buffer.from(value);\n         * const keyBytes = Buffer.from(key, 'base64');\n         *\n         * // Encrypt using LibSodium.\n         * const encryptedBytes = sodium.seal(messageBytes, keyBytes);\n         *\n         * // Base64 the encrypted secret\n         * const encrypted = Buffer.from(encryptedBytes).toString('base64');\n         *\n         * console.log(encrypted);\n         * ```\n         *\n         *\n         * #### Example encrypting a secret using Python\n         *\n         * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n         *\n         * ```\n         * from base64 import b64encode\n         * from nacl import encoding, public\n         *\n         * def encrypt(public_key: str, secret_value: str) -> str:\n         *   \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n         *   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n         *   sealed_box = public.SealedBox(public_key)\n         *   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n         *   return b64encode(encrypted).decode(\"utf-8\")\n         * ```\n         *\n         * #### Example encrypting a secret using C#\n         *\n         * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n         *\n         * ```\n         * var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\n         * var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n         *\n         * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n         *\n         * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n         * ```\n         *\n         * #### Example encrypting a secret using Ruby\n         *\n         * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n         *\n         * ```ruby\n         * require \"rbnacl\"\n         * require \"base64\"\n         *\n         * key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\n         * public_key = RbNaCl::PublicKey.new(key)\n         *\n         * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)\n         * encrypted_secret = box.encrypt(\"my_secret\")\n         *\n         * # Print the base64 encoded secret\n         * puts Base64.strict_encode64(encrypted_secret)\n         * ```\n         */\n        createOrUpdateRepoSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"createOrUpdateRepoSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"createOrUpdateRepoSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a token that you can pass to the `config` script. The token expires after one hour.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         *\n         * #### Example using registration token\n         *\n         * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n         *\n         * ```\n         * ./config.sh --url https://github.com/octo-org --token TOKEN\n         * ```\n         */\n        createRegistrationTokenForOrg: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"createRegistrationTokenForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"createRegistrationTokenForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\n         * using an access token with the `repo` scope to use this endpoint.\n         *\n         * #### Example using registration token\n         *\n         * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n         *\n         * ```\n         * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n         * ```\n         */\n        createRegistrationTokenForRepo: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"createRegistrationTokenForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"createRegistrationTokenForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         *\n         * #### Example using remove token\n         *\n         * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this\n         * endpoint.\n         *\n         * ```\n         * ./config.sh remove --token TOKEN\n         * ```\n         */\n        createRemoveTokenForOrg: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"createRemoveTokenForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"createRemoveTokenForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\n         * You must authenticate using an access token with the `repo` scope to use this endpoint.\n         *\n         * #### Example using remove token\n         *\n         * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.\n         *\n         * ```\n         * ./config.sh remove --token TOKEN\n         * ```\n         */\n        createRemoveTokenForRepo: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"createRemoveTokenForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"createRemoveTokenForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n         *\n         * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"\n         */\n        createWorkflowDispatch: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"createWorkflowDispatch\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"createWorkflowDispatch\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n         */\n        deleteArtifact: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"deleteArtifact\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"deleteArtifact\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.\n         */\n        deleteOrgSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"deleteOrgSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"deleteOrgSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.\n         */\n        deleteRepoSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"deleteRepoSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"deleteRepoSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        deleteSelfHostedRunnerFromOrg: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"deleteSelfHostedRunnerFromOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"deleteSelfHostedRunnerFromOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n         *\n         * You must authenticate using an access token with the `repo`\n         * scope to use this endpoint.\n         */\n        deleteSelfHostedRunnerFromRepo: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"deleteSelfHostedRunnerFromRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"deleteSelfHostedRunnerFromRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is\n         * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use\n         * this endpoint.\n         */\n        deleteWorkflowRun: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"deleteWorkflowRun\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"deleteWorkflowRun\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n         */\n        deleteWorkflowRunLogs: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"deleteWorkflowRunLogs\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"deleteWorkflowRunLogs\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        disableSelectedRepositoryGithubActionsOrganization: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"disableSelectedRepositoryGithubActionsOrganization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"disableSelectedRepositoryGithubActionsOrganization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n         */\n        disableWorkflow: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"disableWorkflow\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"disableWorkflow\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\n         * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to\n         * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\n         * GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        downloadArtifact: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"downloadArtifact\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"downloadArtifact\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\n         * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can\n         * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must\n         * have the `actions:read` permission to use this endpoint.\n         */\n        downloadJobLogsForWorkflowRun: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"downloadJobLogsForWorkflowRun\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"downloadJobLogsForWorkflowRun\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n         * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use\n         * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have\n         * the `actions:read` permission to use this endpoint.\n         */\n        downloadWorkflowRunLogs: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"downloadWorkflowRunLogs\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"downloadWorkflowRunLogs\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        enableSelectedRepositoryGithubActionsOrganization: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"enableSelectedRepositoryGithubActionsOrganization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"enableSelectedRepositoryGithubActionsOrganization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n         */\n        enableWorkflow: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"enableWorkflow\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"enableWorkflow\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        getAllowedActionsOrganization: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getAllowedActionsOrganization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getAllowedActionsOrganization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         */\n        getAllowedActionsRepository: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getAllowedActionsRepository\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getAllowedActionsRepository\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        getArtifact: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getArtifact\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getArtifact\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        getGithubActionsPermissionsOrganization: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getGithubActionsPermissionsOrganization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getGithubActionsPermissionsOrganization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this\n         * endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         */\n        getGithubActionsPermissionsRepository: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getGithubActionsPermissionsRepository\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getGithubActionsPermissionsRepository\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        getJobForWorkflowRun: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getJobForWorkflowRun\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getJobForWorkflowRun\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.\n         */\n        getOrgPublicKey: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getOrgPublicKey\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getOrgPublicKey\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.\n         */\n        getOrgSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getOrgSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getOrgSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this\n         * endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         * @deprecated octokit.actions.getRepoPermissions() has been renamed to octokit.actions.getGithubActionsPermissionsRepository() (2020-11-10)\n         */\n        getRepoPermissions: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getRepoPermissions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getRepoPermissions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.\n         */\n        getRepoPublicKey: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getRepoPublicKey\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getRepoPublicKey\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.\n         */\n        getRepoSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getRepoSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getRepoSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a specific self-hosted runner configured in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        getSelfHostedRunnerForOrg: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getSelfHostedRunnerForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getSelfHostedRunnerForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a specific self-hosted runner configured in a repository.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this\n         * endpoint.\n         */\n        getSelfHostedRunnerForRepo: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getSelfHostedRunnerForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getSelfHostedRunnerForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        getWorkflow: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getWorkflow\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getWorkflow\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        getWorkflowRun: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getWorkflowRun\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getWorkflowRun\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        getWorkflowRunUsage: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getWorkflowRunUsage\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getWorkflowRunUsage\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        getWorkflowUsage: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"getWorkflowUsage\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"getWorkflowUsage\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        listArtifactsForRepo: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listArtifactsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listArtifactsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n         */\n        listJobsForWorkflowRun: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listJobsForWorkflowRun\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listJobsForWorkflowRun\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.\n         */\n        listOrgSecrets: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listOrgSecrets\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listOrgSecrets\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.\n         */\n        listRepoSecrets: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listRepoSecrets\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listRepoSecrets\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        listRepoWorkflows: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listRepoWorkflows\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listRepoWorkflows\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists binaries for the runner application that you can download and run.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        listRunnerApplicationsForOrg: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listRunnerApplicationsForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listRunnerApplicationsForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists binaries for the runner application that you can download and run.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint.\n         */\n        listRunnerApplicationsForRepo: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listRunnerApplicationsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listRunnerApplicationsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.\n         */\n        listSelectedReposForOrgSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listSelectedReposForOrgSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listSelectedReposForOrgSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        listSelectedRepositoriesEnabledGithubActionsOrganization: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listSelectedRepositoriesEnabledGithubActionsOrganization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listSelectedRepositoriesEnabledGithubActionsOrganization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all self-hosted runners configured in an organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint.\n         */\n        listSelfHostedRunnersForOrg: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listSelfHostedRunnersForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listSelfHostedRunnersForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.\n         */\n        listSelfHostedRunnersForRepo: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listSelfHostedRunnersForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listSelfHostedRunnersForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        listWorkflowRunArtifacts: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listWorkflowRunArtifacts\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listWorkflowRunArtifacts\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n         *\n         * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\n         */\n        listWorkflowRuns: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listWorkflowRuns\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listWorkflowRuns\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n         *\n         * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.\n         */\n        listWorkflowRunsForRepo: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"listWorkflowRunsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"listWorkflowRunsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.\n         */\n        reRunWorkflow: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"reRunWorkflow\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"reRunWorkflow\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.\n         */\n        removeSelectedRepoFromOrgSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"removeSelectedRepoFromOrgSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"removeSelectedRepoFromOrgSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.\n         *\n         * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        setAllowedActionsOrganization: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"setAllowedActionsOrganization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"setAllowedActionsOrganization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"\n         *\n         * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.\n         *\n         * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         */\n        setAllowedActionsRepository: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"setAllowedActionsRepository\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"setAllowedActionsRepository\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.\n         *\n         * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        setGithubActionsPermissionsOrganization: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"setGithubActionsPermissionsOrganization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"setGithubActionsPermissionsOrganization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.\n         *\n         * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.\n         *\n         * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.\n         */\n        setGithubActionsPermissionsRepository: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"setGithubActionsPermissionsRepository\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"setGithubActionsPermissionsRepository\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.\n         */\n        setSelectedReposForOrgSecret: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"setSelectedReposForOrgSecret\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"setSelectedReposForOrgSecret\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n         *\n         * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.\n         */\n        setSelectedRepositoriesEnabledGithubActionsOrganization: {\n            (params?: RestEndpointMethodTypes[\"actions\"][\"setSelectedRepositoriesEnabledGithubActionsOrganization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"actions\"][\"setSelectedRepositoriesEnabledGithubActionsOrganization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    activity: {\n        checkRepoIsStarredByAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"checkRepoIsStarredByAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"checkRepoIsStarredByAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).\n         */\n        deleteRepoSubscription: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"deleteRepoSubscription\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"deleteRepoSubscription\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.\n         */\n        deleteThreadSubscription: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"deleteThreadSubscription\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"deleteThreadSubscription\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n         *\n         * *   **Timeline**: The GitHub global public timeline\n         * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)\n         * *   **Current user public**: The public timeline for the authenticated user\n         * *   **Current user**: The private timeline for the authenticated user\n         * *   **Current user actor**: The private timeline for activity created by the authenticated user\n         * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n         * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n         *\n         * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.\n         */\n        getFeeds: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"getFeeds\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"getFeeds\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getRepoSubscription: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"getRepoSubscription\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"getRepoSubscription\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getThread: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"getThread\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"getThread\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).\n         *\n         * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.\n         */\n        getThreadSubscriptionForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"getThreadSubscriptionForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"getThreadSubscriptionForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.\n         */\n        listEventsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listEventsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listEventsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all notifications for the current user, sorted by most recently updated.\n         */\n        listNotificationsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listNotificationsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listNotificationsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This is the user's organization dashboard. You must be authenticated as the user to view this.\n         */\n        listOrgEventsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listOrgEventsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listOrgEventsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.\n         */\n        listPublicEvents: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listPublicEvents\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listPublicEvents\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listPublicEventsForRepoNetwork: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listPublicEventsForRepoNetwork\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listPublicEventsForRepoNetwork\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listPublicEventsForUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listPublicEventsForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listPublicEventsForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listPublicOrgEvents: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listPublicOrgEvents\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listPublicOrgEvents\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.\n         */\n        listReceivedEventsForUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listReceivedEventsForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listReceivedEventsForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listReceivedPublicEventsForUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listReceivedPublicEventsForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listReceivedPublicEventsForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listRepoEvents: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listRepoEvents\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listRepoEvents\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all notifications for the current user.\n         */\n        listRepoNotificationsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listRepoNotificationsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listRepoNotificationsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists repositories the authenticated user has starred.\n         *\n         * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n         */\n        listReposStarredByAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listReposStarredByAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listReposStarredByAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists repositories a user has starred.\n         *\n         * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n         */\n        listReposStarredByUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listReposStarredByUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listReposStarredByUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists repositories a user is watching.\n         */\n        listReposWatchedByUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listReposWatchedByUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listReposWatchedByUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the people that have starred the repository.\n         *\n         * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:\n         */\n        listStargazersForRepo: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listStargazersForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listStargazersForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists repositories the authenticated user is watching.\n         */\n        listWatchedReposForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listWatchedReposForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listWatchedReposForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the people watching the specified repository.\n         */\n        listWatchersForRepo: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"listWatchersForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"listWatchersForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Marks all notifications as \"read\" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.\n         */\n        markNotificationsAsRead: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"markNotificationsAsRead\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"markNotificationsAsRead\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Marks all notifications in a repository as \"read\" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.\n         */\n        markRepoNotificationsAsRead: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"markRepoNotificationsAsRead\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"markRepoNotificationsAsRead\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        markThreadAsRead: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"markThreadAsRead\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"markThreadAsRead\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.\n         */\n        setRepoSubscription: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"setRepoSubscription\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"setRepoSubscription\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n         *\n         * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n         *\n         * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.\n         */\n        setThreadSubscription: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"setThreadSubscription\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"setThreadSubscription\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         */\n        starRepoForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"starRepoForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"starRepoForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        unstarRepoForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"activity\"][\"unstarRepoForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"activity\"][\"unstarRepoForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    apps: {\n        /**\n         * Add a single repository to an installation. The authenticated user must have admin access to the repository.\n         *\n         * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.\n         */\n        addRepoToInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"addRepoToInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"addRepoToInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.\n         */\n        checkToken: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"checkToken\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"checkToken\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.\n         *\n         * The app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://docs.github.com/apps/using-content-attachments/)\" for details about content attachments.\n         *\n         * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n         */\n        createContentAttachment: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"createContentAttachment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"createContentAttachment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.\n         */\n        createFromManifest: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"createFromManifest\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"createFromManifest\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        createInstallationAccessToken: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"createInstallationAccessToken\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"createInstallationAccessToken\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\n         * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).\n         */\n        deleteAuthorization: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"deleteAuthorization\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"deleteAuthorization\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://docs.github.com/v3/apps/#suspend-an-app-installation)\" endpoint.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        deleteInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"deleteInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"deleteInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.\n         */\n        deleteToken: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"deleteToken\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"deleteToken\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)\" endpoint.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        getAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n         *\n         * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n         */\n        getBySlug: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getBySlug\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getBySlug\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        getInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Enables an authenticated GitHub App to find the organization's installation information.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        getOrgInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getOrgInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getOrgInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        getRepoInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getRepoInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getRepoInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        getSubscriptionPlanForAccount: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getSubscriptionPlanForAccount\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getSubscriptionPlanForAccount\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        getSubscriptionPlanForAccountStubbed: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getSubscriptionPlanForAccountStubbed\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getSubscriptionPlanForAccountStubbed\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Enables an authenticated GitHub App to find the user’s installation information.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        getUserInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getUserInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getUserInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        getWebhookConfigForApp: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"getWebhookConfigForApp\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"getWebhookConfigForApp\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        listAccountsForPlan: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listAccountsForPlan\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listAccountsForPlan\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        listAccountsForPlanStubbed: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listAccountsForPlanStubbed\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listAccountsForPlanStubbed\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n         *\n         * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n         *\n         * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n         *\n         * The access the user has to each repository is included in the hash under the `permissions` key.\n         */\n        listInstallationReposForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listInstallationReposForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listInstallationReposForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         *\n         * The permissions the installation has are included under the `permissions` key.\n         */\n        listInstallations: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listInstallations\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listInstallations\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n         *\n         * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n         *\n         * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n         *\n         * You can find the permissions for the installation under the `permissions` key.\n         */\n        listInstallationsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listInstallationsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listInstallationsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all plans that are part of your GitHub Marketplace listing.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        listPlans: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listPlans\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listPlans\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all plans that are part of your GitHub Marketplace listing.\n         *\n         * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.\n         */\n        listPlansStubbed: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listPlansStubbed\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listPlansStubbed\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List repositories that an app installation can access.\n         *\n         * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n         */\n        listReposAccessibleToInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listReposAccessibleToInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listReposAccessibleToInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).\n         */\n        listSubscriptionsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listSubscriptionsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listSubscriptionsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).\n         */\n        listSubscriptionsForAuthenticatedUserStubbed: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"listSubscriptionsForAuthenticatedUserStubbed\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"listSubscriptionsForAuthenticatedUserStubbed\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Remove a single repository from an installation. The authenticated user must have admin access to the repository.\n         *\n         * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.\n         */\n        removeRepoFromInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"removeRepoFromInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"removeRepoFromInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.\n         */\n        resetToken: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"resetToken\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"resetToken\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Revokes the installation token you're using to authenticate as an installation and access this endpoint.\n         *\n         * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)\" endpoint.\n         *\n         * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.\n         */\n        revokeInstallationAccessToken: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"revokeInstallationAccessToken\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"revokeInstallationAccessToken\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.\n         */\n        scopeToken: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"scopeToken\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"scopeToken\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        suspendInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"suspendInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"suspendInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes a GitHub App installation suspension.\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        unsuspendInstallation: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"unsuspendInstallation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"unsuspendInstallation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n         *\n         * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n         */\n        updateWebhookConfigForApp: {\n            (params?: RestEndpointMethodTypes[\"apps\"][\"updateWebhookConfigForApp\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"apps\"][\"updateWebhookConfigForApp\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    billing: {\n        /**\n         * Gets the summary of the free and paid GitHub Actions minutes used.\n         *\n         * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * Access tokens must have the `repo` or `admin:org` scope.\n         */\n        getGithubActionsBillingOrg: {\n            (params?: RestEndpointMethodTypes[\"billing\"][\"getGithubActionsBillingOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"billing\"][\"getGithubActionsBillingOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the summary of the free and paid GitHub Actions minutes used.\n         *\n         * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n         *\n         * Access tokens must have the `user` scope.\n         */\n        getGithubActionsBillingUser: {\n            (params?: RestEndpointMethodTypes[\"billing\"][\"getGithubActionsBillingUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"billing\"][\"getGithubActionsBillingUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the free and paid storage usued for GitHub Packages in gigabytes.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * Access tokens must have the `repo` or `admin:org` scope.\n         */\n        getGithubPackagesBillingOrg: {\n            (params?: RestEndpointMethodTypes[\"billing\"][\"getGithubPackagesBillingOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"billing\"][\"getGithubPackagesBillingOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the free and paid storage used for GitHub Packages in gigabytes.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * Access tokens must have the `user` scope.\n         */\n        getGithubPackagesBillingUser: {\n            (params?: RestEndpointMethodTypes[\"billing\"][\"getGithubPackagesBillingUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"billing\"][\"getGithubPackagesBillingUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * Access tokens must have the `repo` or `admin:org` scope.\n         */\n        getSharedStorageBillingOrg: {\n            (params?: RestEndpointMethodTypes[\"billing\"][\"getSharedStorageBillingOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"billing\"][\"getSharedStorageBillingOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n         *\n         * Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n         *\n         * Access tokens must have the `user` scope.\n         */\n        getSharedStorageBillingUser: {\n            (params?: RestEndpointMethodTypes[\"billing\"][\"getSharedStorageBillingUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"billing\"][\"getSharedStorageBillingUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    checks: {\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.\n         *\n         * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.\n         */\n        create: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"create\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"create\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n         *\n         * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\". Your GitHub App must have the `checks:write` permission to create check suites.\n         */\n        createSuite: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"createSuite\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"createSuite\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n         *\n         * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.\n         */\n        getSuite: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"getSuite\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"getSuite\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.\n         */\n        listAnnotations: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"listAnnotations\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"listAnnotations\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n         */\n        listForRef: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"listForRef\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"listForRef\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.\n         */\n        listForSuite: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"listForSuite\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"listForSuite\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n         *\n         * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.\n         */\n        listSuitesForRef: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"listSuitesForRef\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"listSuitesForRef\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n         *\n         * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.\n         */\n        rerequestSuite: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"rerequestSuite\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"rerequestSuite\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.\n         */\n        setSuitesPreferences: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"setSuitesPreferences\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"setSuitesPreferences\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n         *\n         * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.\n         */\n        update: {\n            (params?: RestEndpointMethodTypes[\"checks\"][\"update\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"checks\"][\"update\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    codeScanning: {\n        /**\n         * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.\n         *\n         * The security `alert_number` is found at the end of the security alert's URL. For example, the security alert ID for `https://github.com/Octo-org/octo-repo/security/code-scanning/88` is `88`.\n         */\n        getAlert: {\n            (params?: RestEndpointMethodTypes[\"codeScanning\"][\"getAlert\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"codeScanning\"][\"getAlert\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all open code scanning alerts for the default branch (usually `main` or `master`). You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.\n         */\n        listAlertsForRepo: {\n            (params?: RestEndpointMethodTypes[\"codeScanning\"][\"listAlertsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"codeScanning\"][\"listAlertsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the details of recent code scanning analyses for a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.\n         */\n        listRecentAnalyses: {\n            (params?: RestEndpointMethodTypes[\"codeScanning\"][\"listRecentAnalyses\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"codeScanning\"][\"listRecentAnalyses\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.\n         */\n        updateAlert: {\n            (params?: RestEndpointMethodTypes[\"codeScanning\"][\"updateAlert\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"codeScanning\"][\"updateAlert\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Upload a SARIF file containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.\n         */\n        uploadSarif: {\n            (params?: RestEndpointMethodTypes[\"codeScanning\"][\"uploadSarif\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"codeScanning\"][\"uploadSarif\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    codesOfConduct: {\n        getAllCodesOfConduct: {\n            (params?: RestEndpointMethodTypes[\"codesOfConduct\"][\"getAllCodesOfConduct\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"codesOfConduct\"][\"getAllCodesOfConduct\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getConductCode: {\n            (params?: RestEndpointMethodTypes[\"codesOfConduct\"][\"getConductCode\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"codesOfConduct\"][\"getConductCode\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the contents of the repository's code of conduct file, if one is detected.\n         *\n         * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.\n         */\n        getForRepo: {\n            (params?: RestEndpointMethodTypes[\"codesOfConduct\"][\"getForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"codesOfConduct\"][\"getForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    emojis: {\n        /**\n         * Lists all the emojis available to use on GitHub.\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"emojis\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"emojis\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    enterpriseAdmin: {\n        /**\n         * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        disableSelectedOrganizationGithubActionsEnterprise: {\n            (params?: RestEndpointMethodTypes[\"enterpriseAdmin\"][\"disableSelectedOrganizationGithubActionsEnterprise\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"enterpriseAdmin\"][\"disableSelectedOrganizationGithubActionsEnterprise\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        enableSelectedOrganizationGithubActionsEnterprise: {\n            (params?: RestEndpointMethodTypes[\"enterpriseAdmin\"][\"enableSelectedOrganizationGithubActionsEnterprise\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"enterpriseAdmin\"][\"enableSelectedOrganizationGithubActionsEnterprise\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        getAllowedActionsEnterprise: {\n            (params?: RestEndpointMethodTypes[\"enterpriseAdmin\"][\"getAllowedActionsEnterprise\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"enterpriseAdmin\"][\"getAllowedActionsEnterprise\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        getGithubActionsPermissionsEnterprise: {\n            (params?: RestEndpointMethodTypes[\"enterpriseAdmin\"][\"getGithubActionsPermissionsEnterprise\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"enterpriseAdmin\"][\"getGithubActionsPermissionsEnterprise\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        listSelectedOrganizationsEnabledGithubActionsEnterprise: {\n            (params?: RestEndpointMethodTypes[\"enterpriseAdmin\"][\"listSelectedOrganizationsEnabledGithubActionsEnterprise\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"enterpriseAdmin\"][\"listSelectedOrganizationsEnabledGithubActionsEnterprise\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        setAllowedActionsEnterprise: {\n            (params?: RestEndpointMethodTypes[\"enterpriseAdmin\"][\"setAllowedActionsEnterprise\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"enterpriseAdmin\"][\"setAllowedActionsEnterprise\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        setGithubActionsPermissionsEnterprise: {\n            (params?: RestEndpointMethodTypes[\"enterpriseAdmin\"][\"setGithubActionsPermissionsEnterprise\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"enterpriseAdmin\"][\"setGithubActionsPermissionsEnterprise\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n         *\n         * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n         */\n        setSelectedOrganizationsEnabledGithubActionsEnterprise: {\n            (params?: RestEndpointMethodTypes[\"enterpriseAdmin\"][\"setSelectedOrganizationsEnabledGithubActionsEnterprise\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"enterpriseAdmin\"][\"setSelectedOrganizationsEnabledGithubActionsEnterprise\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    gists: {\n        checkIsStarred: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"checkIsStarred\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"checkIsStarred\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Allows you to add a new gist with one or more files.\n         *\n         * **Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.\n         */\n        create: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"create\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"create\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        createComment: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"createComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"createComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        delete: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"delete\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"delete\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteComment: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"deleteComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"deleteComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note**: This was previously `/gists/:gist_id/fork`.\n         */\n        fork: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"fork\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"fork\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        get: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getComment: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"getComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"getComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getRevision: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"getRevision\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"getRevision\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:\n         */\n        list: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"list\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"list\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listComments: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"listComments\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"listComments\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listCommits: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"listCommits\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"listCommits\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists public gists for the specified user:\n         */\n        listForUser: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"listForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"listForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listForks: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"listForks\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"listForks\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List public gists sorted by most recently updated to least recently updated.\n         *\n         * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.\n         */\n        listPublic: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"listPublic\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"listPublic\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the authenticated user's starred gists:\n         */\n        listStarred: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"listStarred\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"listStarred\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         */\n        star: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"star\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"star\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        unstar: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"unstar\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"unstar\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.\n         */\n        update: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"update\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"update\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateComment: {\n            (params?: RestEndpointMethodTypes[\"gists\"][\"updateComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gists\"][\"updateComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    git: {\n        createBlob: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"createBlob\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"createBlob\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        createCommit: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"createCommit\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"createCommit\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.\n         */\n        createRef: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"createRef\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"createRef\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        createTag: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"createTag\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"createTag\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n         *\n         * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)\" and \"[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference).\"\n         */\n        createTree: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"createTree\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"createTree\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteRef: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"deleteRef\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"deleteRef\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The `content` in the response will always be Base64 encoded.\n         *\n         * _Note_: This API supports blobs up to 100 megabytes in size.\n         */\n        getBlob: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"getBlob\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"getBlob\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        getCommit: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"getCommit\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"getCommit\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n         *\n         * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n         */\n        getRef: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"getRef\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"getRef\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        getTag: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"getTag\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"getTag\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a single tree using the SHA1 value for that tree.\n         *\n         * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n         */\n        getTree: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"getTree\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"getTree\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n         *\n         * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n         *\n         * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n         *\n         * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.\n         */\n        listMatchingRefs: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"listMatchingRefs\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"listMatchingRefs\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateRef: {\n            (params?: RestEndpointMethodTypes[\"git\"][\"updateRef\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"git\"][\"updateRef\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    gitignore: {\n        /**\n         * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).\n         */\n        getAllTemplates: {\n            (params?: RestEndpointMethodTypes[\"gitignore\"][\"getAllTemplates\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gitignore\"][\"getAllTemplates\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The API also allows fetching the source of a single template.\n         * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.\n         */\n        getTemplate: {\n            (params?: RestEndpointMethodTypes[\"gitignore\"][\"getTemplate\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"gitignore\"][\"getTemplate\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    interactions: {\n        /**\n         * Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response.\n         */\n        getRestrictionsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"getRestrictionsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"getRestrictionsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.\n         */\n        getRestrictionsForOrg: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"getRestrictionsForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"getRestrictionsForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.\n         */\n        getRestrictionsForRepo: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"getRestrictionsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"getRestrictionsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response.\n         * @deprecated octokit.interactions.getRestrictionsForYourPublicRepos() has been renamed to octokit.interactions.getRestrictionsForAuthenticatedUser() (2021-02-02)\n         */\n        getRestrictionsForYourPublicRepos: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"getRestrictionsForYourPublicRepos\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"getRestrictionsForYourPublicRepos\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes any interaction restrictions from your public repositories.\n         */\n        removeRestrictionsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"removeRestrictionsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"removeRestrictionsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.\n         */\n        removeRestrictionsForOrg: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"removeRestrictionsForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"removeRestrictionsForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.\n         */\n        removeRestrictionsForRepo: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"removeRestrictionsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"removeRestrictionsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes any interaction restrictions from your public repositories.\n         * @deprecated octokit.interactions.removeRestrictionsForYourPublicRepos() has been renamed to octokit.interactions.removeRestrictionsForAuthenticatedUser() (2021-02-02)\n         */\n        removeRestrictionsForYourPublicRepos: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"removeRestrictionsForYourPublicRepos\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"removeRestrictionsForYourPublicRepos\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.\n         */\n        setRestrictionsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"setRestrictionsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"setRestrictionsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.\n         */\n        setRestrictionsForOrg: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"setRestrictionsForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"setRestrictionsForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.\n         */\n        setRestrictionsForRepo: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"setRestrictionsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"setRestrictionsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.\n         * @deprecated octokit.interactions.setRestrictionsForYourPublicRepos() has been renamed to octokit.interactions.setRestrictionsForAuthenticatedUser() (2021-02-02)\n         */\n        setRestrictionsForYourPublicRepos: {\n            (params?: RestEndpointMethodTypes[\"interactions\"][\"setRestrictionsForYourPublicRepos\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"interactions\"][\"setRestrictionsForYourPublicRepos\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    issues: {\n        /**\n         * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.\n         */\n        addAssignees: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"addAssignees\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"addAssignees\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        addLabels: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"addLabels\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"addLabels\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Checks if a user has permission to be assigned to an issue in this repository.\n         *\n         * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n         *\n         * Otherwise a `404` status code is returned.\n         */\n        checkUserCanBeAssigned: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"checkUserCanBeAssigned\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"checkUserCanBeAssigned\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.\n         */\n        create: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"create\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"create\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.\n         */\n        createComment: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"createComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"createComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        createLabel: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"createLabel\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"createLabel\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        createMilestone: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"createMilestone\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"createMilestone\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteComment: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"deleteComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"deleteComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteLabel: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"deleteLabel\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"deleteLabel\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteMilestone: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"deleteMilestone\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"deleteMilestone\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was\n         * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\n         * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\n         * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\n         * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\n         * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getComment: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"getComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"getComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getEvent: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"getEvent\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"getEvent\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getLabel: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"getLabel\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"getLabel\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getMilestone: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"getMilestone\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"getMilestone\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List issues assigned to the authenticated user across all visible repositories including owned repositories, member\n         * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\n         * necessarily assigned to you.\n         *\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        list: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"list\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"list\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.\n         */\n        listAssignees: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listAssignees\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listAssignees\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Issue Comments are ordered by ascending ID.\n         */\n        listComments: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listComments\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listComments\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * By default, Issue Comments are ordered by ascending ID.\n         */\n        listCommentsForRepo: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listCommentsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listCommentsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listEvents: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listEvents\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listEvents\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listEventsForRepo: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listEventsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listEventsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listEventsForTimeline: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listEventsForTimeline\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listEventsForTimeline\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List issues across owned and member repositories assigned to the authenticated user.\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        listForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List issues in an organization assigned to the authenticated user.\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        listForOrg: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List issues in a repository.\n         *\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\n         * reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\n         * the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\n         * request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        listForRepo: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listLabelsForMilestone: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listLabelsForMilestone\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listLabelsForMilestone\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listLabelsForRepo: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listLabelsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listLabelsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listLabelsOnIssue: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listLabelsOnIssue\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listLabelsOnIssue\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listMilestones: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"listMilestones\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"listMilestones\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with push access can lock an issue or pull request's conversation.\n         *\n         * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         */\n        lock: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"lock\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"lock\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        removeAllLabels: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"removeAllLabels\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"removeAllLabels\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes one or more assignees from an issue.\n         */\n        removeAssignees: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"removeAssignees\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"removeAssignees\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.\n         */\n        removeLabel: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"removeLabel\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"removeLabel\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes any previous labels and sets the new labels for an issue.\n         */\n        setLabels: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"setLabels\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"setLabels\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with push access can unlock an issue's conversation.\n         */\n        unlock: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"unlock\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"unlock\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Issue owners and users with push access can edit an issue.\n         */\n        update: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"update\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"update\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateComment: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"updateComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"updateComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateLabel: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"updateLabel\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"updateLabel\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateMilestone: {\n            (params?: RestEndpointMethodTypes[\"issues\"][\"updateMilestone\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"issues\"][\"updateMilestone\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    licenses: {\n        get: {\n            (params?: RestEndpointMethodTypes[\"licenses\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"licenses\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getAllCommonlyUsed: {\n            (params?: RestEndpointMethodTypes[\"licenses\"][\"getAllCommonlyUsed\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"licenses\"][\"getAllCommonlyUsed\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This method returns the contents of the repository's license file, if one is detected.\n         *\n         * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.\n         */\n        getForRepo: {\n            (params?: RestEndpointMethodTypes[\"licenses\"][\"getForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"licenses\"][\"getForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    markdown: {\n        render: {\n            (params?: RestEndpointMethodTypes[\"markdown\"][\"render\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"markdown\"][\"render\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.\n         */\n        renderRaw: {\n            (params?: RestEndpointMethodTypes[\"markdown\"][\"renderRaw\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"markdown\"][\"renderRaw\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    meta: {\n        /**\n         * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/).\"\n         *\n         * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"meta\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"meta\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get the octocat as ASCII art\n         */\n        getOctocat: {\n            (params?: RestEndpointMethodTypes[\"meta\"][\"getOctocat\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"meta\"][\"getOctocat\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get a random sentence from the Zen of GitHub\n         */\n        getZen: {\n            (params?: RestEndpointMethodTypes[\"meta\"][\"getZen\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"meta\"][\"getZen\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get Hypermedia links to resources accessible in GitHub's REST API\n         */\n        root: {\n            (params?: RestEndpointMethodTypes[\"meta\"][\"root\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"meta\"][\"root\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    migrations: {\n        /**\n         * Stop an import for a repository.\n         */\n        cancelImport: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"cancelImport\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"cancelImport\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.\n         */\n        deleteArchiveForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"deleteArchiveForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"deleteArchiveForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.\n         */\n        deleteArchiveForOrg: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"deleteArchiveForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"deleteArchiveForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Fetches the URL to a migration archive.\n         */\n        downloadArchiveForOrg: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"downloadArchiveForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"downloadArchiveForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n         *\n         * *   attachments\n         * *   bases\n         * *   commit\\_comments\n         * *   issue\\_comments\n         * *   issue\\_events\n         * *   issues\n         * *   milestones\n         * *   organizations\n         * *   projects\n         * *   protected\\_branches\n         * *   pull\\_request\\_reviews\n         * *   pull\\_requests\n         * *   releases\n         * *   repositories\n         * *   review\\_comments\n         * *   schema\n         * *   users\n         *\n         * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.\n         */\n        getArchiveForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"getArchiveForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"getArchiveForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n         *\n         * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.\n         */\n        getCommitAuthors: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"getCommitAuthors\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"getCommitAuthors\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * View the progress of an import.\n         *\n         * **Import status**\n         *\n         * This section includes details about the possible values of the `status` field of the Import Progress response.\n         *\n         * An import that does not have errors will progress through these steps:\n         *\n         * *   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n         * *   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n         * *   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n         * *   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\".\n         * *   `complete` - the import is complete, and the repository is ready on GitHub.\n         *\n         * If there are problems, you will see one of these in the `status` field:\n         *\n         * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n         * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.\n         * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n         * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.\n         * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.\n         *\n         * **The project_choices field**\n         *\n         * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n         *\n         * **Git LFS related fields**\n         *\n         * This section includes details about Git LFS related fields that may be present in the Import Progress response.\n         *\n         * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n         * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n         * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n         * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.\n         */\n        getImportStatus: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"getImportStatus\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"getImportStatus\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List files larger than 100MB found during the import\n         */\n        getLargeFiles: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"getLargeFiles\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"getLargeFiles\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n         *\n         * *   `pending` - the migration hasn't started yet.\n         * *   `exporting` - the migration is in progress.\n         * *   `exported` - the migration finished successfully.\n         * *   `failed` - the migration failed.\n         *\n         * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).\n         */\n        getStatusForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"getStatusForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"getStatusForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Fetches the status of a migration.\n         *\n         * The `state` of a migration can be one of the following values:\n         *\n         * *   `pending`, which means the migration hasn't started yet.\n         * *   `exporting`, which means the migration is in progress.\n         * *   `exported`, which means the migration finished successfully.\n         * *   `failed`, which means the migration failed.\n         */\n        getStatusForOrg: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"getStatusForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"getStatusForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all migrations a user has started.\n         */\n        listForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"listForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"listForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the most recent migrations.\n         */\n        listForOrg: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"listForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"listForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all the repositories for this organization migration.\n         */\n        listReposForOrg: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"listReposForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"listReposForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all the repositories for this user migration.\n         */\n        listReposForUser: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"listReposForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"listReposForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.\n         */\n        mapCommitAuthor: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"mapCommitAuthor\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"mapCommitAuthor\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).\n         */\n        setLfsPreference: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"setLfsPreference\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"setLfsPreference\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Initiates the generation of a user migration archive.\n         */\n        startForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"startForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"startForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Initiates the generation of a migration archive.\n         */\n        startForOrg: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"startForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"startForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Start a source import to a GitHub repository using GitHub Importer.\n         */\n        startImport: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"startImport\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"startImport\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.\n         */\n        unlockRepoForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"unlockRepoForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"unlockRepoForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.\n         */\n        unlockRepoForOrg: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"unlockRepoForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"unlockRepoForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\n         * request. If no parameters are provided, the import will be restarted.\n         */\n        updateImport: {\n            (params?: RestEndpointMethodTypes[\"migrations\"][\"updateImport\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"migrations\"][\"updateImport\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    orgs: {\n        blockUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"blockUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"blockUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).\n         */\n        cancelInvitation: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"cancelInvitation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"cancelInvitation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        checkBlockedUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"checkBlockedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"checkBlockedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Check if a user is, publicly or privately, a member of the organization.\n         */\n        checkMembershipForUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"checkMembershipForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"checkMembershipForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        checkPublicMembershipForUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"checkPublicMembershipForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"checkPublicMembershipForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\".\n         */\n        convertMemberToOutsideCollaborator: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"convertMemberToOutsideCollaborator\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"convertMemberToOutsideCollaborator\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        createInvitation: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"createInvitation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"createInvitation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Here's how you can create a hook that posts payloads in JSON format:\n         */\n        createWebhook: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"createWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"createWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteWebhook: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"deleteWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"deleteWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n         *\n         * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See \"[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see 'Response with GitHub plan information' below.\"\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getMembershipForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"getMembershipForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"getMembershipForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * In order to get a user's membership with an organization, the authenticated user must be an organization member.\n         */\n        getMembershipForUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"getMembershipForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"getMembershipForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a webhook configured in an organization. To get only the webhook `config` properties, see \"[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\"\n         */\n        getWebhook: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"getWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"getWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\"\n         *\n         * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.\n         */\n        getWebhookConfigForOrg: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"getWebhookConfigForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"getWebhookConfigForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all organizations, in the order that they were created on GitHub.\n         *\n         * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.\n         */\n        list: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"list\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"list\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.\n         */\n        listAppInstallations: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listAppInstallations\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listAppInstallations\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the users blocked by an organization.\n         */\n        listBlockedUsers: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listBlockedUsers\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listBlockedUsers\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.\n         */\n        listFailedInvitations: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listFailedInvitations\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listFailedInvitations\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List organizations for the authenticated user.\n         *\n         * **OAuth scope requirements**\n         *\n         * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.\n         */\n        listForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n         *\n         * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.\n         */\n        listForUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.\n         */\n        listInvitationTeams: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listInvitationTeams\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listInvitationTeams\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.\n         */\n        listMembers: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listMembers\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listMembers\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listMembershipsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listMembershipsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listMembershipsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all users who are outside collaborators of an organization.\n         */\n        listOutsideCollaborators: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listOutsideCollaborators\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listOutsideCollaborators\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n         */\n        listPendingInvitations: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listPendingInvitations\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listPendingInvitations\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Members of an organization can choose to have their membership publicized or not.\n         */\n        listPublicMembers: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listPublicMembers\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listPublicMembers\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listWebhooks: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"listWebhooks\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"listWebhooks\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.\n         */\n        pingWebhook: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"pingWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"pingWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.\n         */\n        removeMember: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"removeMember\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"removeMember\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n         *\n         * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.\n         */\n        removeMembershipForUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"removeMembershipForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"removeMembershipForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removing a user from this list will remove them from all the organization's repositories.\n         */\n        removeOutsideCollaborator: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"removeOutsideCollaborator\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"removeOutsideCollaborator\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        removePublicMembershipForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"removePublicMembershipForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"removePublicMembershipForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Only authenticated organization owners can add a member to the organization or update the member's role.\n         *\n         * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n         *\n         * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n         *\n         * **Rate limits**\n         *\n         * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.\n         */\n        setMembershipForUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"setMembershipForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"setMembershipForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n         *\n         * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         */\n        setPublicMembershipForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"setPublicMembershipForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"setPublicMembershipForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        unblockUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"unblockUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"unblockUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n         *\n         * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.\n         */\n        update: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"update\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"update\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateMembershipForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"updateMembershipForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"updateMembershipForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\"\n         */\n        updateWebhook: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"updateWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"updateWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\"\n         *\n         * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.\n         */\n        updateWebhookConfigForOrg: {\n            (params?: RestEndpointMethodTypes[\"orgs\"][\"updateWebhookConfigForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"orgs\"][\"updateWebhookConfigForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    projects: {\n        /**\n         * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.\n         */\n        addCollaborator: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"addCollaborator\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"addCollaborator\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n         *\n         * Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)\" endpoint.\n         */\n        createCard: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"createCard\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"createCard\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        createColumn: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"createColumn\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"createColumn\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        createForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"createForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"createForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.\n         */\n        createForOrg: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"createForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"createForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.\n         */\n        createForRepo: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"createForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"createForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.\n         */\n        delete: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"delete\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"delete\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteCard: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"deleteCard\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"deleteCard\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteColumn: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"deleteColumn\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"deleteColumn\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getCard: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"getCard\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"getCard\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getColumn: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"getColumn\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"getColumn\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.\n         */\n        getPermissionForUser: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"getPermissionForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"getPermissionForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listCards: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"listCards\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"listCards\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.\n         */\n        listCollaborators: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"listCollaborators\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"listCollaborators\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listColumns: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"listColumns\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"listColumns\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.\n         */\n        listForOrg: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"listForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"listForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.\n         */\n        listForRepo: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"listForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"listForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listForUser: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"listForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"listForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        moveCard: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"moveCard\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"moveCard\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        moveColumn: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"moveColumn\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"moveColumn\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.\n         */\n        removeCollaborator: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"removeCollaborator\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"removeCollaborator\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.\n         */\n        update: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"update\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"update\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateCard: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"updateCard\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"updateCard\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateColumn: {\n            (params?: RestEndpointMethodTypes[\"projects\"][\"updateColumn\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"projects\"][\"updateColumn\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    pulls: {\n        checkIfMerged: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"checkIfMerged\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"checkIfMerged\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n         *\n         * You can create a new pull request.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        create: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"create\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"create\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        createReplyForReviewComment: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"createReplyForReviewComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"createReplyForReviewComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         *\n         * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.\n         *\n         * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.\n         *\n         * The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n         */\n        createReview: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"createReview\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"createReview\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.\n         *\n         * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).\n         *\n         * **Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        createReviewComment: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"createReviewComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"createReviewComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deletePendingReview: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"deletePendingReview\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"deletePendingReview\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes a review comment.\n         */\n        deleteReviewComment: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"deleteReviewComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"deleteReviewComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.\n         */\n        dismissReview: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"dismissReview\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"dismissReview\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists details of a pull request by providing its number.\n         *\n         * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n         *\n         * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n         *\n         * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n         *\n         * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n         * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n         * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n         *\n         * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getReview: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"getReview\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"getReview\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Provides details for a review comment.\n         */\n        getReviewComment: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"getReviewComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"getReviewComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        list: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"list\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List comments for a specific pull request review.\n         */\n        listCommentsForReview: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"listCommentsForReview\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"listCommentsForReview\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.\n         */\n        listCommits: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"listCommits\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"listCommits\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.\n         */\n        listFiles: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"listFiles\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"listFiles\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listRequestedReviewers: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"listRequestedReviewers\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"listRequestedReviewers\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.\n         */\n        listReviewComments: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"listReviewComments\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"listReviewComments\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.\n         */\n        listReviewCommentsForRepo: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"listReviewCommentsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"listReviewCommentsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The list of reviews returns in chronological order.\n         */\n        listReviews: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"listReviews\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"listReviews\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.\n         */\n        merge: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"merge\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"merge\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        removeRequestedReviewers: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"removeRequestedReviewers\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"removeRequestedReviewers\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)\" for details.\n         */\n        requestReviewers: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"requestReviewers\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"requestReviewers\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        submitReview: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"submitReview\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"submitReview\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n         */\n        update: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"update\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"update\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.\n         */\n        updateBranch: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"updateBranch\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"updateBranch\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Update the review summary comment with new text.\n         */\n        updateReview: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"updateReview\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"updateReview\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Enables you to edit a review comment.\n         */\n        updateReviewComment: {\n            (params?: RestEndpointMethodTypes[\"pulls\"][\"updateReviewComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"pulls\"][\"updateReviewComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    rateLimit: {\n        /**\n         * **Note:** Accessing this endpoint does not count against your REST API rate limit.\n         *\n         * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"rateLimit\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"rateLimit\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    reactions: {\n        /**\n         * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.\n         */\n        createForCommitComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"createForCommitComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"createForCommitComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.\n         */\n        createForIssue: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"createForIssue\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"createForIssue\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.\n         */\n        createForIssueComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"createForIssueComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"createForIssueComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.\n         */\n        createForPullRequestReviewComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"createForPullRequestReviewComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"createForPullRequestReviewComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n         */\n        createForTeamDiscussionCommentInOrg: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"createForTeamDiscussionCommentInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"createForTeamDiscussionCommentInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n         */\n        createForTeamDiscussionInOrg: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"createForTeamDiscussionInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"createForTeamDiscussionInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n         *\n         * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).\n         */\n        deleteForCommitComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"deleteForCommitComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"deleteForCommitComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n         *\n         * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).\n         */\n        deleteForIssue: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"deleteForIssue\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"deleteForIssue\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n         *\n         * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).\n         */\n        deleteForIssueComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"deleteForIssueComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"deleteForIssueComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n         *\n         * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).\n         */\n        deleteForPullRequestComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"deleteForPullRequestComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"deleteForPullRequestComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n         *\n         * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        deleteForTeamDiscussion: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"deleteForTeamDiscussion\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"deleteForTeamDiscussion\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n         *\n         * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        deleteForTeamDiscussionComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"deleteForTeamDiscussionComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"deleteForTeamDiscussionComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).\n         *\n         * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).\n         * @deprecated octokit.reactions.deleteLegacy() is deprecated, see https://docs.github.com/v3/reactions/#delete-a-reaction-legacy\n         */\n        deleteLegacy: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"deleteLegacy\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"deleteLegacy\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).\n         */\n        listForCommitComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"listForCommitComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"listForCommitComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).\n         */\n        listForIssue: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"listForIssue\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"listForIssue\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).\n         */\n        listForIssueComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"listForIssueComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"listForIssueComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).\n         */\n        listForPullRequestReviewComment: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"listForPullRequestReviewComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"listForPullRequestReviewComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n         */\n        listForTeamDiscussionCommentInOrg: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"listForTeamDiscussionCommentInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"listForTeamDiscussionCommentInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n         */\n        listForTeamDiscussionInOrg: {\n            (params?: RestEndpointMethodTypes[\"reactions\"][\"listForTeamDiscussionInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"reactions\"][\"listForTeamDiscussionInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    repos: {\n        acceptInvitation: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"acceptInvitation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"acceptInvitation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n         *\n         * | Type    | Description                                                                                                                                                |\n         * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        addAppAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"addAppAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"addAppAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         *\n         * For more information the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".\n         *\n         * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         *\n         * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).\n         *\n         * **Rate limits**\n         *\n         * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.\n         */\n        addCollaborator: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"addCollaborator\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"addCollaborator\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        addStatusCheckContexts: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"addStatusCheckContexts\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"addStatusCheckContexts\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Grants the specified teams push access for this branch. You can also give push access to child teams.\n         *\n         * | Type    | Description                                                                                                                                |\n         * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n         * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        addTeamAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"addTeamAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"addTeamAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Grants the specified people push access for this branch.\n         *\n         * | Type    | Description                                                                                                                   |\n         * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        addUserAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"addUserAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"addUserAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n         *\n         * Team members will include the members of child teams.\n         */\n        checkCollaborator: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"checkCollaborator\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"checkCollaborator\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".\n         */\n        checkVulnerabilityAlerts: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"checkVulnerabilityAlerts\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"checkVulnerabilityAlerts\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.\n         *\n         * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n         *\n         * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n         *\n         * **Working with large comparisons**\n         *\n         * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.\n         *\n         * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long\n         * to generate. You can typically resolve this error by using a smaller commit range.\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        compareCommits: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"compareCommits\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"compareCommits\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Create a comment for a commit using its `:commit_sha`.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        createCommitComment: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createCommitComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createCommitComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.\n         */\n        createCommitSignatureProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createCommitSignatureProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createCommitSignatureProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with push access in a repository can create commit statuses for a given SHA.\n         *\n         * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.\n         */\n        createCommitStatus: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createCommitStatus\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createCommitStatus\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * You can create a read-only deploy key.\n         */\n        createDeployKey: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createDeployKey\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createDeployKey\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deployments offer a few configurable parameters with certain defaults.\n         *\n         * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\n         * before we merge a pull request.\n         *\n         * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\n         * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\n         * makes it easier to track which environments have requested deployments. The default environment is `production`.\n         *\n         * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\n         * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\n         * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\n         * return a failure response.\n         *\n         * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`\n         * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\n         * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\n         * not require any contexts or create any commit statuses, the deployment will always succeed.\n         *\n         * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\n         * field that will be passed on when a deployment event is dispatched.\n         *\n         * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\n         * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\n         * application with debugging enabled.\n         *\n         * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.\n         *\n         * #### Merged branch response\n         * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\n         * a deployment. This auto-merge happens when:\n         * *   Auto-merge option is enabled in the repository\n         * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n         * *   There are no merge conflicts\n         *\n         * If there are no new commits in the base branch, a new request to create a deployment should give a successful\n         * response.\n         *\n         * #### Merge conflict response\n         * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\n         * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n         *\n         * #### Failed commit status checks\n         * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\n         * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.\n         */\n        createDeployment: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createDeployment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createDeployment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with `push` access can create deployment statuses for a given deployment.\n         *\n         * GitHub Apps require `read & write` access to \"Deployments\" and `read-only` access to \"Repo contents\" (for private repos). OAuth Apps require the `repo_deployment` scope.\n         */\n        createDeploymentStatus: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createDeploymentStatus\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createDeploymentStatus\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\"\n         *\n         * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.\n         *\n         * This endpoint requires write access to the repository by providing either:\n         *\n         *   - Personal access tokens with `repo` scope. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\" in the GitHub Help documentation.\n         *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.\n         *\n         * This input example shows how you can use the `client_payload` as a test to debug your workflow.\n         */\n        createDispatchEvent: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createDispatchEvent\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createDispatchEvent\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a new repository for the authenticated user.\n         *\n         * **OAuth scope requirements**\n         *\n         * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n         *\n         * *   `public_repo` scope or `repo` scope to create a public repository\n         * *   `repo` scope to create a private repository\n         */\n        createForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Create a fork for the authenticated user.\n         *\n         * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).\n         */\n        createFork: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createFork\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createFork\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n         *\n         * **OAuth scope requirements**\n         *\n         * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n         *\n         * *   `public_repo` scope or `repo` scope to create a public repository\n         * *   `repo` scope to create a private repository\n         */\n        createInOrg: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a new file or replaces an existing file in a repository.\n         */\n        createOrUpdateFileContents: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createOrUpdateFileContents\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createOrUpdateFileContents\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Configures a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\"\n         */\n        createPagesSite: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createPagesSite\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createPagesSite\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with push access to the repository can create a release.\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         */\n        createRelease: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createRelease\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createRelease\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n         *\n         * **OAuth scope requirements**\n         *\n         * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n         *\n         * *   `public_repo` scope or `repo` scope to create a public repository\n         * *   `repo` scope to create a private repository\n         */\n        createUsingTemplate: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createUsingTemplate\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createUsingTemplate\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\n         * share the same `config` as long as those webhooks do not have any `events` that overlap.\n         */\n        createWebhook: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"createWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"createWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        declineInvitation: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"declineInvitation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"declineInvitation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n         *\n         * If an organization owner has configured the organization to prevent members from deleting organization-owned\n         * repositories, you will get a `403 Forbidden` response.\n         */\n        delete: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"delete\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"delete\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Disables the ability to restrict who can push to this branch.\n         */\n        deleteAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n         */\n        deleteAdminBranchProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteAdminBranchProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteAdminBranchProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        deleteBranchProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteBranchProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteBranchProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteCommitComment: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteCommitComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteCommitComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.\n         */\n        deleteCommitSignatureProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteCommitSignatureProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteCommitSignatureProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.\n         */\n        deleteDeployKey: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteDeployKey\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteDeployKey\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.\n         *\n         * To set a deployment as inactive, you must:\n         *\n         * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n         * *   Mark the active deployment as inactive by adding any non-successful deployment status.\n         *\n         * For more information, see \"[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)\" and \"[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status).\"\n         */\n        deleteDeployment: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteDeployment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteDeployment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes a file in a repository.\n         *\n         * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n         *\n         * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n         *\n         * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n         */\n        deleteFile: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteFile\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteFile\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteInvitation: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteInvitation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteInvitation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deletePagesSite: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deletePagesSite\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deletePagesSite\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        deletePullRequestReviewProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deletePullRequestReviewProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deletePullRequestReviewProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with push access to the repository can delete a release.\n         */\n        deleteRelease: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteRelease\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteRelease\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteReleaseAsset: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteReleaseAsset\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteReleaseAsset\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        deleteWebhook: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"deleteWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"deleteWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\".\n         */\n        disableAutomatedSecurityFixes: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"disableAutomatedSecurityFixes\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"disableAutomatedSecurityFixes\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".\n         */\n        disableVulnerabilityAlerts: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"disableVulnerabilityAlerts\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"disableVulnerabilityAlerts\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n         * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\n         * the `Location` header to make a second `GET` request.\n         * **Note**: For private repositories, these links are temporary and expire after five minutes.\n         * @deprecated octokit.repos.downloadArchive() has been renamed to octokit.repos.downloadZipballArchive() (2020-09-17)\n         */\n        downloadArchive: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"downloadArchive\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"downloadArchive\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n         * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\n         * the `Location` header to make a second `GET` request.\n         * **Note**: For private repositories, these links are temporary and expire after five minutes.\n         */\n        downloadTarballArchive: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"downloadTarballArchive\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"downloadTarballArchive\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n         * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\n         * the `Location` header to make a second `GET` request.\n         * **Note**: For private repositories, these links are temporary and expire after five minutes.\n         */\n        downloadZipballArchive: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"downloadZipballArchive\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"downloadZipballArchive\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\".\n         */\n        enableAutomatedSecurityFixes: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"enableAutomatedSecurityFixes\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"enableAutomatedSecurityFixes\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".\n         */\n        enableVulnerabilityAlerts: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"enableVulnerabilityAlerts\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"enableVulnerabilityAlerts\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.\n         *\n         * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n         */\n        get: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"get\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"get\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists who has access to this protected branch.\n         *\n         * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.\n         */\n        getAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        getAdminBranchProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getAdminBranchProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getAdminBranchProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        getAllStatusCheckContexts: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getAllStatusCheckContexts\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getAllStatusCheckContexts\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getAllTopics: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getAllTopics\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getAllTopics\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n         */\n        getAppsWithAccessToProtectedBranch: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getAppsWithAccessToProtectedBranch\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getAppsWithAccessToProtectedBranch\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getBranch: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getBranch\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getBranch\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        getBranchProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getBranchProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getBranchProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.\n         */\n        getClones: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getClones\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getClones\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.\n         */\n        getCodeFrequencyStats: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getCodeFrequencyStats\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getCodeFrequencyStats\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.\n         */\n        getCollaboratorPermissionLevel: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getCollaboratorPermissionLevel\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getCollaboratorPermissionLevel\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n         *\n         * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.\n         *\n         * Additionally, a combined `state` is returned. The `state` is one of:\n         *\n         * *   **failure** if any of the contexts report as `error` or `failure`\n         * *   **pending** if there are no statuses or a context is `pending`\n         * *   **success** if the latest status for all contexts is `success`\n         */\n        getCombinedStatusForRef: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getCombinedStatusForRef\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getCombinedStatusForRef\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n         *\n         * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n         *\n         * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n         *\n         * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n         *\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        getCommit: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getCommit\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getCommit\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.\n         */\n        getCommitActivityStats: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getCommitActivityStats\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getCommitActivityStats\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getCommitComment: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getCommitComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getCommitComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n         *\n         * **Note**: You must enable branch protection to require signed commits.\n         */\n        getCommitSignatureProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getCommitSignatureProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getCommitSignatureProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint will return all community profile metrics, including an\n         * overall health score, repository description, the presence of documentation, detected\n         * code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE,\n         * README, and CONTRIBUTING files.\n         *\n         * The `health_percentage` score is defined as a percentage of how many of\n         * these four documents are present: README, CONTRIBUTING, LICENSE, and\n         * CODE_OF_CONDUCT. For example, if all four documents are present, then\n         * the `health_percentage` is `100`. If only one is present, then the\n         * `health_percentage` is `25`.\n         *\n         * `content_reports_enabled` is only returned for organization-owned repositories.\n         */\n        getCommunityProfileMetrics: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getCommunityProfileMetrics\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getCommunityProfileMetrics\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n         * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.\n         *\n         * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for\n         * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media\n         * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent\n         * object format.\n         *\n         * **Note**:\n         * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).\n         * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\n         * API](https://docs.github.com/rest/reference/git#get-a-tree).\n         * *   This API supports files up to 1 megabyte in size.\n         *\n         * #### If the content is a directory\n         * The response will be an array of objects, one object for each item in the directory.\n         * When listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value\n         * _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\n         * In the next major version of the API, the type will be returned as \"submodule\".\n         *\n         * #### If the content is a symlink\n         * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the\n         * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object\n         * describing the symlink itself.\n         *\n         * #### If the content is a submodule\n         * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\n         * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\n         * the submodule at that specific commit.\n         *\n         * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the\n         * github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.\n         */\n        getContent: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getContent\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getContent\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n         *\n         * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n         * *   `a` - Number of additions\n         * *   `d` - Number of deletions\n         * *   `c` - Number of commits\n         */\n        getContributorsStats: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getContributorsStats\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getContributorsStats\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getDeployKey: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getDeployKey\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getDeployKey\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getDeployment: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getDeployment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getDeployment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with pull access can view a deployment status for a deployment:\n         */\n        getDeploymentStatus: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getDeploymentStatus\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getDeploymentStatus\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getLatestPagesBuild: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getLatestPagesBuild\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getLatestPagesBuild\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * View the latest published full release for the repository.\n         *\n         * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.\n         */\n        getLatestRelease: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getLatestRelease\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getLatestRelease\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getPages: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getPages\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getPages\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        getPagesBuild: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getPagesBuild\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getPagesBuild\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n         *\n         * The array order is oldest week (index 0) to most recent week.\n         */\n        getParticipationStats: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getParticipationStats\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getParticipationStats\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        getPullRequestReviewProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getPullRequestReviewProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getPullRequestReviewProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Each array contains the day number, hour number, and number of commits:\n         *\n         * *   `0-6`: Sunday - Saturday\n         * *   `0-23`: Hour of day\n         * *   Number of commits\n         *\n         * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.\n         */\n        getPunchCardStats: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getPunchCardStats\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getPunchCardStats\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets the preferred README for a repository.\n         *\n         * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.\n         */\n        getReadme: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getReadme\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getReadme\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).\n         */\n        getRelease: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getRelease\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getRelease\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.\n         */\n        getReleaseAsset: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getReleaseAsset\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getReleaseAsset\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get a published release with the specified tag.\n         */\n        getReleaseByTag: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getReleaseByTag\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getReleaseByTag\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        getStatusChecksProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getStatusChecksProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getStatusChecksProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists the teams who have push access to this branch. The list includes child teams.\n         */\n        getTeamsWithAccessToProtectedBranch: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getTeamsWithAccessToProtectedBranch\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getTeamsWithAccessToProtectedBranch\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get the top 10 popular contents over the last 14 days.\n         */\n        getTopPaths: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getTopPaths\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getTopPaths\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get the top 10 referrers over the last 14 days.\n         */\n        getTopReferrers: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getTopReferrers\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getTopReferrers\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Lists the people who have push access to this branch.\n         */\n        getUsersWithAccessToProtectedBranch: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getUsersWithAccessToProtectedBranch\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getUsersWithAccessToProtectedBranch\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.\n         */\n        getViews: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getViews\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getViews\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns a webhook configured in a repository. To get only the webhook `config` properties, see \"[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\"\n         */\n        getWebhook: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use \"[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook).\"\n         *\n         * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.\n         */\n        getWebhookConfigForRepo: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"getWebhookConfigForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"getWebhookConfigForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listBranches: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listBranches\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listBranches\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.\n         */\n        listBranchesForHeadCommit: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listBranchesForHeadCommit\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listBranchesForHeadCommit\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n         *\n         * Team members will include the members of child teams.\n         */\n        listCollaborators: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listCollaborators\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listCollaborators\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Use the `:commit_sha` to specify the commit that will have its comments listed.\n         */\n        listCommentsForCommit: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listCommentsForCommit\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listCommentsForCommit\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).\n         *\n         * Comments are ordered by ascending ID.\n         */\n        listCommitCommentsForRepo: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listCommitCommentsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listCommitCommentsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n         *\n         * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.\n         */\n        listCommitStatusesForRef: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listCommitStatusesForRef\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listCommitStatusesForRef\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Signature verification object**\n         *\n         * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n         *\n         * | Name | Type | Description |\n         * | ---- | ---- | ----------- |\n         * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n         * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n         * | `signature` | `string` | The signature that was extracted from the commit. |\n         * | `payload` | `string` | The value that was signed. |\n         *\n         * These are the possible values for `reason` in the `verification` object:\n         *\n         * | Value | Description |\n         * | ----- | ----------- |\n         * | `expired_key` | The key that made the signature is expired. |\n         * | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n         * | `gpgverify_error` | There was an error communicating with the signature verification service. |\n         * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n         * | `unsigned` | The object does not include a signature. |\n         * | `unknown_signature_type` | A non-PGP signature was found in the commit. |\n         * | `no_user` | No user was associated with the `committer` email address in the commit. |\n         * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n         * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n         * | `unknown_key` | The key that made the signature has not been registered with any user's account. |\n         * | `malformed_signature` | There was an error parsing the signature. |\n         * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n         * | `valid` | None of the above errors applied, so the signature is considered to be verified. |\n         */\n        listCommits: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listCommits\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listCommits\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.\n         *\n         * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.\n         */\n        listContributors: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listContributors\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listContributors\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listDeployKeys: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listDeployKeys\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listDeployKeys\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with pull access can view deployment statuses for a deployment:\n         */\n        listDeploymentStatuses: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listDeploymentStatuses\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listDeploymentStatuses\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Simple filtering of deployments is available via query parameters:\n         */\n        listDeployments: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listDeployments\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listDeployments\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n         *\n         * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n         */\n        listForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists repositories for the specified organization.\n         */\n        listForOrg: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listForOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listForOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists public repositories for the specified user.\n         */\n        listForUser: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listForks: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listForks\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listForks\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.\n         */\n        listInvitations: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listInvitations\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listInvitations\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.\n         */\n        listInvitationsForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listInvitationsForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listInvitationsForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.\n         */\n        listLanguages: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listLanguages\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listLanguages\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listPagesBuilds: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listPagesBuilds\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listPagesBuilds\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all public repositories in the order that they were created.\n         *\n         * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.\n         */\n        listPublic: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listPublic\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listPublic\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.\n         */\n        listPullRequestsAssociatedWithCommit: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listPullRequestsAssociatedWithCommit\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listPullRequestsAssociatedWithCommit\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listReleaseAssets: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listReleaseAssets\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listReleaseAssets\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).\n         *\n         * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.\n         */\n        listReleases: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listReleases\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listReleases\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listTags: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listTags\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listTags\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listTeams: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listTeams\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listTeams\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        listWebhooks: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"listWebhooks\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"listWebhooks\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        merge: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"merge\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"merge\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.\n         */\n        pingWebhook: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"pingWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"pingWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n         *\n         * | Type    | Description                                                                                                                                                |\n         * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        removeAppAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"removeAppAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"removeAppAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        removeCollaborator: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"removeCollaborator\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"removeCollaborator\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        removeStatusCheckContexts: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"removeStatusCheckContexts\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"removeStatusCheckContexts\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        removeStatusCheckProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"removeStatusCheckProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"removeStatusCheckProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Removes the ability of a team to push to this branch. You can also remove push access for child teams.\n         *\n         * | Type    | Description                                                                                                                                         |\n         * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        removeTeamAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"removeTeamAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"removeTeamAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Removes the ability of a user to push to this branch.\n         *\n         * | Type    | Description                                                                                                                                   |\n         * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        removeUserAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"removeUserAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"removeUserAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Renames a branch in a repository.\n         *\n         * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \"[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\".\n         *\n         * The permissions required to use this endpoint depends on whether you are renaming the default branch.\n         *\n         * To rename a non-default branch:\n         *\n         * * Users must have push access.\n         * * GitHub Apps must have the `contents:write` repository permission.\n         *\n         * To rename the default branch:\n         *\n         * * Users must have admin or owner permissions.\n         * * GitHub Apps must have the `administration:write` repository permission.\n         */\n        renameBranch: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"renameBranch\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"renameBranch\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        replaceAllTopics: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"replaceAllTopics\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"replaceAllTopics\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n         *\n         * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.\n         */\n        requestPagesBuild: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"requestPagesBuild\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"requestPagesBuild\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n         */\n        setAdminBranchProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"setAdminBranchProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"setAdminBranchProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n         *\n         * | Type    | Description                                                                                                                                                |\n         * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        setAppAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"setAppAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"setAppAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         */\n        setStatusCheckContexts: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"setStatusCheckContexts\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"setStatusCheckContexts\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.\n         *\n         * | Type    | Description                                                                                                                                |\n         * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n         * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        setTeamAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"setTeamAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"setTeamAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n         *\n         * | Type    | Description                                                                                                                   |\n         * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n         * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |\n         */\n        setUserAccessRestrictions: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"setUserAccessRestrictions\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"setUserAccessRestrictions\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n         *\n         * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`\n         */\n        testPushWebhook: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"testPushWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"testPushWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).\n         */\n        transfer: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"transfer\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"transfer\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.\n         */\n        update: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"update\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"update\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Protecting a branch requires admin or owner permissions to the repository.\n         *\n         * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n         *\n         * **Note**: The list of users, apps, and teams in total is limited to 100 items.\n         */\n        updateBranchProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateBranchProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateBranchProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateCommitComment: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateCommitComment\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateCommitComment\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates information for a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n         */\n        updateInformationAboutPagesSite: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateInformationAboutPagesSite\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateInformationAboutPagesSite\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        updateInvitation: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateInvitation\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateInvitation\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n         *\n         * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n         */\n        updatePullRequestReviewProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updatePullRequestReviewProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updatePullRequestReviewProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with push access to the repository can edit a release.\n         */\n        updateRelease: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateRelease\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateRelease\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Users with push access to the repository can edit a release asset.\n         */\n        updateReleaseAsset: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateReleaseAsset\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateReleaseAsset\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.\n         * @deprecated octokit.repos.updateStatusCheckPotection() has been renamed to octokit.repos.updateStatusCheckProtection() (2020-09-17)\n         */\n        updateStatusCheckPotection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateStatusCheckPotection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateStatusCheckPotection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.\n         */\n        updateStatusCheckProtection: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateStatusCheckProtection\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateStatusCheckProtection\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\"\n         */\n        updateWebhook: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateWebhook\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateWebhook\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use \"[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook).\"\n         *\n         * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.\n         */\n        updateWebhookConfigForRepo: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"updateWebhookConfigForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"updateWebhookConfigForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\n         * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.\n         *\n         * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n         *\n         * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:\n         *\n         * `application/zip`\n         *\n         * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\n         * you'll still need to pass your authentication to be able to upload an asset.\n         *\n         * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n         *\n         * **Notes:**\n         * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)\"\n         * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).\n         * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.\n         */\n        uploadReleaseAsset: {\n            (params?: RestEndpointMethodTypes[\"repos\"][\"uploadReleaseAsset\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"repos\"][\"uploadReleaseAsset\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    search: {\n        /**\n         * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n         *\n         * `q=addClass+in:file+language:js+repo:jquery/jquery`\n         *\n         * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n         *\n         * #### Considerations for code search\n         *\n         * Due to the complexity of searching code, there are a few restrictions on how searches are performed:\n         *\n         * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n         * *   Only files smaller than 384 KB are searchable.\n         * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\n         * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n         */\n        code: {\n            (params?: RestEndpointMethodTypes[\"search\"][\"code\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"search\"][\"code\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\n         * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n         *\n         * `q=repo:octocat/Spoon-Knife+css`\n         */\n        commits: {\n            (params?: RestEndpointMethodTypes[\"search\"][\"commits\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"search\"][\"commits\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\n         * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n         *\n         * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n         *\n         * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n         *\n         * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see \"[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).\"\n         */\n        issuesAndPullRequests: {\n            (params?: RestEndpointMethodTypes[\"search\"][\"issuesAndPullRequests\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"search\"][\"issuesAndPullRequests\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n         *\n         * `q=bug+defect+enhancement&repository_id=64778136`\n         *\n         * The labels that best match the query appear first in the search results.\n         */\n        labels: {\n            (params?: RestEndpointMethodTypes[\"search\"][\"labels\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"search\"][\"labels\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n         *\n         * `q=tetris+language:assembly&sort=stars&order=desc`\n         *\n         * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.\n         *\n         * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:\n         *\n         * `q=topic:ruby+topic:rails`\n         */\n        repos: {\n            (params?: RestEndpointMethodTypes[\"search\"][\"repos\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"search\"][\"repos\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n         *\n         * When searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n         *\n         * `q=ruby+is:featured`\n         *\n         * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.\n         */\n        topics: {\n            (params?: RestEndpointMethodTypes[\"search\"][\"topics\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"search\"][\"topics\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n         *\n         * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n         *\n         * For example, if you're looking for a list of popular users, you might try this query:\n         *\n         * `q=tom+repos:%3E42+followers:%3E1000`\n         *\n         * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.\n         */\n        users: {\n            (params?: RestEndpointMethodTypes[\"search\"][\"users\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"search\"][\"users\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    secretScanning: {\n        /**\n         * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n         *\n         * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.\n         */\n        getAlert: {\n            (params?: RestEndpointMethodTypes[\"secretScanning\"][\"getAlert\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"secretScanning\"][\"getAlert\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n         *\n         * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.\n         */\n        listAlertsForRepo: {\n            (params?: RestEndpointMethodTypes[\"secretScanning\"][\"listAlertsForRepo\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"secretScanning\"][\"listAlertsForRepo\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n         *\n         * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.\n         */\n        updateAlert: {\n            (params?: RestEndpointMethodTypes[\"secretScanning\"][\"updateAlert\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"secretScanning\"][\"updateAlert\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    teams: {\n        /**\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n         *\n         * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n         *\n         * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.\n         *\n         * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n         */\n        addOrUpdateMembershipForUserInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"addOrUpdateMembershipForUserInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"addOrUpdateMembershipForUserInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n         */\n        addOrUpdateProjectPermissionsInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"addOrUpdateProjectPermissionsInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"addOrUpdateProjectPermissionsInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n         *\n         * For more information about the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".\n         */\n        addOrUpdateRepoPermissionsInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"addOrUpdateRepoPermissionsInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"addOrUpdateRepoPermissionsInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n         */\n        checkPermissionsForProjectInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"checkPermissionsForProjectInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"checkPermissionsForProjectInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n         *\n         * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n         *\n         * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n         */\n        checkPermissionsForRepoInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"checkPermissionsForRepoInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"checkPermissionsForRepoInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"\n         *\n         * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".\n         */\n        create: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"create\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"create\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n         */\n        createDiscussionCommentInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"createDiscussionCommentInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"createDiscussionCommentInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.\n         */\n        createDiscussionInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"createDiscussionInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"createDiscussionInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n         */\n        deleteDiscussionCommentInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"deleteDiscussionCommentInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"deleteDiscussionCommentInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n         */\n        deleteDiscussionInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"deleteDiscussionInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"deleteDiscussionInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * To delete a team, the authenticated user must be an organization owner or team maintainer.\n         *\n         * If you are an organization owner, deleting a parent team will delete all of its child teams as well.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.\n         */\n        deleteInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"deleteInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"deleteInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.\n         */\n        getByName: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"getByName\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"getByName\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n         */\n        getDiscussionCommentInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"getDiscussionCommentInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"getDiscussionCommentInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n         */\n        getDiscussionInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"getDiscussionInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"getDiscussionInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Team members will include the members of child teams.\n         *\n         * To get a user's membership with a team, the team must be visible to the authenticated user.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n         *\n         * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).\n         */\n        getMembershipForUserInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"getMembershipForUserInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"getMembershipForUserInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all teams in an organization that are visible to the authenticated user.\n         */\n        list: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"list\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"list\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the child teams of the team specified by `{team_slug}`.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.\n         */\n        listChildInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"listChildInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"listChildInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n         */\n        listDiscussionCommentsInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"listDiscussionCommentsInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"listDiscussionCommentsInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.\n         */\n        listDiscussionsInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"listDiscussionsInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"listDiscussionsInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).\n         */\n        listForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"listForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"listForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Team members will include the members of child teams.\n         *\n         * To list members in a team, the team must be visible to the authenticated user.\n         */\n        listMembersInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"listMembersInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"listMembersInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.\n         */\n        listPendingInvitationsInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"listPendingInvitationsInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"listPendingInvitationsInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the organization projects for a team.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.\n         */\n        listProjectsInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"listProjectsInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"listProjectsInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists a team's repositories visible to the authenticated user.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.\n         */\n        listReposInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"listReposInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"listReposInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n         *\n         * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n         *\n         * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n         */\n        removeMembershipForUserInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"removeMembershipForUserInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"removeMembershipForUserInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.\n         */\n        removeProjectInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"removeProjectInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"removeProjectInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n         */\n        removeRepoInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"removeRepoInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"removeRepoInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n         */\n        updateDiscussionCommentInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"updateDiscussionCommentInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"updateDiscussionCommentInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n         */\n        updateDiscussionInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"updateDiscussionInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"updateDiscussionInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n         *\n         * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.\n         */\n        updateInOrg: {\n            (params?: RestEndpointMethodTypes[\"teams\"][\"updateInOrg\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"teams\"][\"updateInOrg\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n    users: {\n        /**\n         * This endpoint is accessible with the `user` scope.\n         */\n        addEmailForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"addEmailForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"addEmailForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        block: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"block\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"block\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        checkBlocked: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"checkBlocked\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"checkBlocked\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        checkFollowingForUser: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"checkFollowingForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"checkFollowingForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        checkPersonIsFollowedByAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"checkPersonIsFollowedByAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"checkPersonIsFollowedByAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        createGpgKeyForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"createGpgKeyForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"createGpgKeyForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        createPublicSshKeyForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"createPublicSshKeyForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"createPublicSshKeyForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * This endpoint is accessible with the `user` scope.\n         */\n        deleteEmailForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"deleteEmailForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"deleteEmailForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        deleteGpgKeyForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"deleteGpgKeyForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"deleteGpgKeyForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        deletePublicSshKeyForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"deletePublicSshKeyForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"deletePublicSshKeyForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"\n         *\n         * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.\n         */\n        follow: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"follow\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"follow\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.\n         *\n         * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.\n         */\n        getAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"getAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"getAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Provides publicly available information about someone with a GitHub account.\n         *\n         * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See \"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\" for details about authentication. For an example response, see 'Response with GitHub plan information' below\"\n         *\n         * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).\n         *\n         * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://docs.github.com/rest/reference/users#emails)\".\n         */\n        getByUsername: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"getByUsername\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"getByUsername\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n         *\n         * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:\n         *\n         * ```shell\n         *  curl -u username:token\n         *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192\n         * ```\n         */\n        getContextForUser: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"getContextForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"getContextForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        getGpgKeyForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"getGpgKeyForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"getGpgKeyForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        getPublicSshKeyForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"getPublicSshKeyForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"getPublicSshKeyForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n         *\n         * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.\n         */\n        list: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"list\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"list\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * List the users you've blocked on your personal account.\n         */\n        listBlockedByAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listBlockedByAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listBlockedByAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.\n         */\n        listEmailsForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listEmailsForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listEmailsForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the people who the authenticated user follows.\n         */\n        listFollowedByAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listFollowedByAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listFollowedByAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the people following the authenticated user.\n         */\n        listFollowersForAuthenticatedUser: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listFollowersForAuthenticatedUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listFollowersForAuthenticatedUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the people following the specified user.\n         */\n        listFollowersForUser: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listFollowersForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listFollowersForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the people who the specified user follows.\n         */\n        listFollowingForUser: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listFollowingForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listFollowingForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        listGpgKeysForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listGpgKeysForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listGpgKeysForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the GPG keys for a user. This information is accessible by anyone.\n         */\n        listGpgKeysForUser: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listGpgKeysForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listGpgKeysForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.\n         */\n        listPublicEmailsForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listPublicEmailsForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listPublicEmailsForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.\n         */\n        listPublicKeysForUser: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listPublicKeysForUser\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listPublicKeysForUser\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n         */\n        listPublicSshKeysForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"listPublicSshKeysForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"listPublicSshKeysForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Sets the visibility for your primary email addresses.\n         */\n        setPrimaryEmailVisibilityForAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"setPrimaryEmailVisibilityForAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"setPrimaryEmailVisibilityForAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        unblock: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"unblock\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"unblock\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.\n         */\n        unfollow: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"unfollow\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"unfollow\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n        /**\n         * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.\n         */\n        updateAuthenticated: {\n            (params?: RestEndpointMethodTypes[\"users\"][\"updateAuthenticated\"][\"parameters\"]): Promise<RestEndpointMethodTypes[\"users\"][\"updateAuthenticated\"][\"response\"]>;\n            defaults: RequestInterface[\"defaults\"];\n            endpoint: EndpointInterface<{\n                url: string;\n            }>;\n        };\n    };\n};\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-types/generated/parameters-and-response-types.d.ts":"import { Endpoints, RequestParameters } from \"@octokit/types\";\nexport declare type RestEndpointMethodTypes = {\n    actions: {\n        addSelectedRepoToOrgSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"][\"response\"];\n        };\n        cancelWorkflowRun: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\"][\"response\"];\n        };\n        createOrUpdateOrgSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/actions/secrets/{secret_name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/actions/secrets/{secret_name}\"][\"response\"];\n        };\n        createOrUpdateRepoSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\"][\"response\"];\n        };\n        createRegistrationTokenForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/actions/runners/registration-token\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/actions/runners/registration-token\"][\"response\"];\n        };\n        createRegistrationTokenForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/actions/runners/registration-token\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/actions/runners/registration-token\"][\"response\"];\n        };\n        createRemoveTokenForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/actions/runners/remove-token\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/actions/runners/remove-token\"][\"response\"];\n        };\n        createRemoveTokenForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/actions/runners/remove-token\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/actions/runners/remove-token\"][\"response\"];\n        };\n        createWorkflowDispatch: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\"][\"response\"];\n        };\n        deleteArtifact: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"][\"response\"];\n        };\n        deleteOrgSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/actions/secrets/{secret_name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/actions/secrets/{secret_name}\"][\"response\"];\n        };\n        deleteRepoSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\"][\"response\"];\n        };\n        deleteSelfHostedRunnerFromOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/actions/runners/{runner_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/actions/runners/{runner_id}\"][\"response\"];\n        };\n        deleteSelfHostedRunnerFromRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\"][\"response\"];\n        };\n        deleteWorkflowRun: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"][\"response\"];\n        };\n        deleteWorkflowRunLogs: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"][\"response\"];\n        };\n        disableSelectedRepositoryGithubActionsOrganization: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\"][\"response\"];\n        };\n        disableWorkflow: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\"][\"response\"];\n        };\n        downloadArtifact: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\"][\"response\"];\n        };\n        downloadJobLogsForWorkflowRun: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\"][\"response\"];\n        };\n        downloadWorkflowRunLogs: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"][\"response\"];\n        };\n        enableSelectedRepositoryGithubActionsOrganization: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\"][\"response\"];\n        };\n        enableWorkflow: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\"][\"response\"];\n        };\n        getAllowedActionsOrganization: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/permissions/selected-actions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/permissions/selected-actions\"][\"response\"];\n        };\n        getAllowedActionsRepository: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\"][\"response\"];\n        };\n        getArtifact: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"][\"response\"];\n        };\n        getGithubActionsPermissionsOrganization: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/permissions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/permissions\"][\"response\"];\n        };\n        getGithubActionsPermissionsRepository: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/permissions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/permissions\"][\"response\"];\n        };\n        getJobForWorkflowRun: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"][\"response\"];\n        };\n        getOrgPublicKey: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/secrets/public-key\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/secrets/public-key\"][\"response\"];\n        };\n        getOrgSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/secrets/{secret_name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/secrets/{secret_name}\"][\"response\"];\n        };\n        getRepoPermissions: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/permissions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/permissions\"][\"response\"];\n        };\n        getRepoPublicKey: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets/public-key\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets/public-key\"][\"response\"];\n        };\n        getRepoSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"][\"response\"];\n        };\n        getSelfHostedRunnerForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/runners/{runner_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/runners/{runner_id}\"][\"response\"];\n        };\n        getSelfHostedRunnerForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\"][\"response\"];\n        };\n        getWorkflow: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"][\"response\"];\n        };\n        getWorkflowRun: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"][\"response\"];\n        };\n        getWorkflowRunUsage: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\"][\"response\"];\n        };\n        getWorkflowUsage: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\"][\"response\"];\n        };\n        listArtifactsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/artifacts\"][\"response\"];\n        };\n        listJobsForWorkflowRun: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"][\"response\"];\n        };\n        listOrgSecrets: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/secrets\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/secrets\"][\"response\"];\n        };\n        listRepoSecrets: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/secrets\"][\"response\"];\n        };\n        listRepoWorkflows: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows\"][\"response\"];\n        };\n        listRunnerApplicationsForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/runners/downloads\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/runners/downloads\"][\"response\"];\n        };\n        listRunnerApplicationsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runners/downloads\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runners/downloads\"][\"response\"];\n        };\n        listSelectedReposForOrgSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"][\"response\"];\n        };\n        listSelectedRepositoriesEnabledGithubActionsOrganization: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/permissions/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/permissions/repositories\"][\"response\"];\n        };\n        listSelfHostedRunnersForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/actions/runners\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/actions/runners\"][\"response\"];\n        };\n        listSelfHostedRunnersForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runners\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runners\"][\"response\"];\n        };\n        listWorkflowRunArtifacts: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"][\"response\"];\n        };\n        listWorkflowRuns: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"][\"response\"];\n        };\n        listWorkflowRunsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/actions/runs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/actions/runs\"][\"response\"];\n        };\n        reRunWorkflow: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"][\"response\"];\n        };\n        removeSelectedRepoFromOrgSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"][\"response\"];\n        };\n        setAllowedActionsOrganization: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/actions/permissions/selected-actions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/actions/permissions/selected-actions\"][\"response\"];\n        };\n        setAllowedActionsRepository: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\"][\"response\"];\n        };\n        setGithubActionsPermissionsOrganization: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/actions/permissions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/actions/permissions\"][\"response\"];\n        };\n        setGithubActionsPermissionsRepository: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/actions/permissions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/actions/permissions\"][\"response\"];\n        };\n        setSelectedReposForOrgSecret: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\"][\"response\"];\n        };\n        setSelectedRepositoriesEnabledGithubActionsOrganization: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/actions/permissions/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/actions/permissions/repositories\"][\"response\"];\n        };\n    };\n    activity: {\n        checkRepoIsStarredByAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/starred/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/starred/{owner}/{repo}\"][\"response\"];\n        };\n        deleteRepoSubscription: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/subscription\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/subscription\"][\"response\"];\n        };\n        deleteThreadSubscription: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /notifications/threads/{thread_id}/subscription\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /notifications/threads/{thread_id}/subscription\"][\"response\"];\n        };\n        getFeeds: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /feeds\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /feeds\"][\"response\"];\n        };\n        getRepoSubscription: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/subscription\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/subscription\"][\"response\"];\n        };\n        getThread: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /notifications/threads/{thread_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /notifications/threads/{thread_id}\"][\"response\"];\n        };\n        getThreadSubscriptionForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /notifications/threads/{thread_id}/subscription\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /notifications/threads/{thread_id}/subscription\"][\"response\"];\n        };\n        listEventsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/events\"][\"response\"];\n        };\n        listNotificationsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /notifications\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /notifications\"][\"response\"];\n        };\n        listOrgEventsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/events/orgs/{org}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/events/orgs/{org}\"][\"response\"];\n        };\n        listPublicEvents: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /events\"][\"response\"];\n        };\n        listPublicEventsForRepoNetwork: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /networks/{owner}/{repo}/events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /networks/{owner}/{repo}/events\"][\"response\"];\n        };\n        listPublicEventsForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/events/public\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/events/public\"][\"response\"];\n        };\n        listPublicOrgEvents: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/events\"][\"response\"];\n        };\n        listReceivedEventsForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/received_events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/received_events\"][\"response\"];\n        };\n        listReceivedPublicEventsForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/received_events/public\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/received_events/public\"][\"response\"];\n        };\n        listRepoEvents: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/events\"][\"response\"];\n        };\n        listRepoNotificationsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/notifications\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/notifications\"][\"response\"];\n        };\n        listReposStarredByAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/starred\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/starred\"][\"response\"];\n        };\n        listReposStarredByUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/starred\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/starred\"][\"response\"];\n        };\n        listReposWatchedByUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/subscriptions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/subscriptions\"][\"response\"];\n        };\n        listStargazersForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/stargazers\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/stargazers\"][\"response\"];\n        };\n        listWatchedReposForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/subscriptions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/subscriptions\"][\"response\"];\n        };\n        listWatchersForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/subscribers\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/subscribers\"][\"response\"];\n        };\n        markNotificationsAsRead: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /notifications\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /notifications\"][\"response\"];\n        };\n        markRepoNotificationsAsRead: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/notifications\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/notifications\"][\"response\"];\n        };\n        markThreadAsRead: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /notifications/threads/{thread_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /notifications/threads/{thread_id}\"][\"response\"];\n        };\n        setRepoSubscription: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/subscription\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/subscription\"][\"response\"];\n        };\n        setThreadSubscription: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /notifications/threads/{thread_id}/subscription\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /notifications/threads/{thread_id}/subscription\"][\"response\"];\n        };\n        starRepoForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /user/starred/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /user/starred/{owner}/{repo}\"][\"response\"];\n        };\n        unstarRepoForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/starred/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/starred/{owner}/{repo}\"][\"response\"];\n        };\n    };\n    apps: {\n        addRepoToInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /user/installations/{installation_id}/repositories/{repository_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /user/installations/{installation_id}/repositories/{repository_id}\"][\"response\"];\n        };\n        checkToken: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /applications/{client_id}/token\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /applications/{client_id}/token\"][\"response\"];\n        };\n        createContentAttachment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /content_references/{content_reference_id}/attachments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /content_references/{content_reference_id}/attachments\"][\"response\"];\n        };\n        createFromManifest: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /app-manifests/{code}/conversions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /app-manifests/{code}/conversions\"][\"response\"];\n        };\n        createInstallationAccessToken: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /app/installations/{installation_id}/access_tokens\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /app/installations/{installation_id}/access_tokens\"][\"response\"];\n        };\n        deleteAuthorization: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /applications/{client_id}/grant\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /applications/{client_id}/grant\"][\"response\"];\n        };\n        deleteInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /app/installations/{installation_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /app/installations/{installation_id}\"][\"response\"];\n        };\n        deleteToken: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /applications/{client_id}/token\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /applications/{client_id}/token\"][\"response\"];\n        };\n        getAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /app\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /app\"][\"response\"];\n        };\n        getBySlug: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /apps/{app_slug}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /apps/{app_slug}\"][\"response\"];\n        };\n        getInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /app/installations/{installation_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /app/installations/{installation_id}\"][\"response\"];\n        };\n        getOrgInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/installation\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/installation\"][\"response\"];\n        };\n        getRepoInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/installation\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/installation\"][\"response\"];\n        };\n        getSubscriptionPlanForAccount: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /marketplace_listing/accounts/{account_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /marketplace_listing/accounts/{account_id}\"][\"response\"];\n        };\n        getSubscriptionPlanForAccountStubbed: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /marketplace_listing/stubbed/accounts/{account_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /marketplace_listing/stubbed/accounts/{account_id}\"][\"response\"];\n        };\n        getUserInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/installation\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/installation\"][\"response\"];\n        };\n        getWebhookConfigForApp: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /app/hook/config\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /app/hook/config\"][\"response\"];\n        };\n        listAccountsForPlan: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /marketplace_listing/plans/{plan_id}/accounts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /marketplace_listing/plans/{plan_id}/accounts\"][\"response\"];\n        };\n        listAccountsForPlanStubbed: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"][\"response\"];\n        };\n        listInstallationReposForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/installations/{installation_id}/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/installations/{installation_id}/repositories\"][\"response\"];\n        };\n        listInstallations: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /app/installations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /app/installations\"][\"response\"];\n        };\n        listInstallationsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/installations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/installations\"][\"response\"];\n        };\n        listPlans: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /marketplace_listing/plans\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /marketplace_listing/plans\"][\"response\"];\n        };\n        listPlansStubbed: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /marketplace_listing/stubbed/plans\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /marketplace_listing/stubbed/plans\"][\"response\"];\n        };\n        listReposAccessibleToInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /installation/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /installation/repositories\"][\"response\"];\n        };\n        listSubscriptionsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/marketplace_purchases\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/marketplace_purchases\"][\"response\"];\n        };\n        listSubscriptionsForAuthenticatedUserStubbed: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/marketplace_purchases/stubbed\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/marketplace_purchases/stubbed\"][\"response\"];\n        };\n        removeRepoFromInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/installations/{installation_id}/repositories/{repository_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/installations/{installation_id}/repositories/{repository_id}\"][\"response\"];\n        };\n        resetToken: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /applications/{client_id}/token\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /applications/{client_id}/token\"][\"response\"];\n        };\n        revokeInstallationAccessToken: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /installation/token\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /installation/token\"][\"response\"];\n        };\n        scopeToken: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /applications/{client_id}/token/scoped\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /applications/{client_id}/token/scoped\"][\"response\"];\n        };\n        suspendInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /app/installations/{installation_id}/suspended\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /app/installations/{installation_id}/suspended\"][\"response\"];\n        };\n        unsuspendInstallation: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /app/installations/{installation_id}/suspended\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /app/installations/{installation_id}/suspended\"][\"response\"];\n        };\n        updateWebhookConfigForApp: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /app/hook/config\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /app/hook/config\"][\"response\"];\n        };\n    };\n    billing: {\n        getGithubActionsBillingOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/settings/billing/actions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/settings/billing/actions\"][\"response\"];\n        };\n        getGithubActionsBillingUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/settings/billing/actions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/settings/billing/actions\"][\"response\"];\n        };\n        getGithubPackagesBillingOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/settings/billing/packages\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/settings/billing/packages\"][\"response\"];\n        };\n        getGithubPackagesBillingUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/settings/billing/packages\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/settings/billing/packages\"][\"response\"];\n        };\n        getSharedStorageBillingOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/settings/billing/shared-storage\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/settings/billing/shared-storage\"][\"response\"];\n        };\n        getSharedStorageBillingUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/settings/billing/shared-storage\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/settings/billing/shared-storage\"][\"response\"];\n        };\n    };\n    checks: {\n        create: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/check-runs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/check-runs\"][\"response\"];\n        };\n        createSuite: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/check-suites\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/check-suites\"][\"response\"];\n        };\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"][\"response\"];\n        };\n        getSuite: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"][\"response\"];\n        };\n        listAnnotations: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"][\"response\"];\n        };\n        listForRef: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"][\"response\"];\n        };\n        listForSuite: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"][\"response\"];\n        };\n        listSuitesForRef: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"][\"response\"];\n        };\n        rerequestSuite: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\"][\"response\"];\n        };\n        setSuitesPreferences: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/check-suites/preferences\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/check-suites/preferences\"][\"response\"];\n        };\n        update: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"][\"response\"];\n        };\n    };\n    codeScanning: {\n        getAlert: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"][\"response\"];\n        };\n        listAlertsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/alerts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/alerts\"][\"response\"];\n        };\n        listRecentAnalyses: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/analyses\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/code-scanning/analyses\"][\"response\"];\n        };\n        updateAlert: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"][\"response\"];\n        };\n        uploadSarif: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/code-scanning/sarifs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/code-scanning/sarifs\"][\"response\"];\n        };\n    };\n    codesOfConduct: {\n        getAllCodesOfConduct: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /codes_of_conduct\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /codes_of_conduct\"][\"response\"];\n        };\n        getConductCode: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /codes_of_conduct/{key}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /codes_of_conduct/{key}\"][\"response\"];\n        };\n        getForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/community/code_of_conduct\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/community/code_of_conduct\"][\"response\"];\n        };\n    };\n    emojis: {\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /emojis\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /emojis\"][\"response\"];\n        };\n    };\n    enterpriseAdmin: {\n        disableSelectedOrganizationGithubActionsEnterprise: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\"][\"response\"];\n        };\n        enableSelectedOrganizationGithubActionsEnterprise: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\"][\"response\"];\n        };\n        getAllowedActionsEnterprise: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /enterprises/{enterprise}/actions/permissions/selected-actions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /enterprises/{enterprise}/actions/permissions/selected-actions\"][\"response\"];\n        };\n        getGithubActionsPermissionsEnterprise: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /enterprises/{enterprise}/actions/permissions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /enterprises/{enterprise}/actions/permissions\"][\"response\"];\n        };\n        listSelectedOrganizationsEnabledGithubActionsEnterprise: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /enterprises/{enterprise}/actions/permissions/organizations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /enterprises/{enterprise}/actions/permissions/organizations\"][\"response\"];\n        };\n        setAllowedActionsEnterprise: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /enterprises/{enterprise}/actions/permissions/selected-actions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /enterprises/{enterprise}/actions/permissions/selected-actions\"][\"response\"];\n        };\n        setGithubActionsPermissionsEnterprise: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /enterprises/{enterprise}/actions/permissions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /enterprises/{enterprise}/actions/permissions\"][\"response\"];\n        };\n        setSelectedOrganizationsEnabledGithubActionsEnterprise: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /enterprises/{enterprise}/actions/permissions/organizations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /enterprises/{enterprise}/actions/permissions/organizations\"][\"response\"];\n        };\n    };\n    gists: {\n        checkIsStarred: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/{gist_id}/star\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/{gist_id}/star\"][\"response\"];\n        };\n        create: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /gists\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /gists\"][\"response\"];\n        };\n        createComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /gists/{gist_id}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /gists/{gist_id}/comments\"][\"response\"];\n        };\n        delete: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /gists/{gist_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /gists/{gist_id}\"][\"response\"];\n        };\n        deleteComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /gists/{gist_id}/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /gists/{gist_id}/comments/{comment_id}\"][\"response\"];\n        };\n        fork: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /gists/{gist_id}/forks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /gists/{gist_id}/forks\"][\"response\"];\n        };\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/{gist_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/{gist_id}\"][\"response\"];\n        };\n        getComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/{gist_id}/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/{gist_id}/comments/{comment_id}\"][\"response\"];\n        };\n        getRevision: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/{gist_id}/{sha}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/{gist_id}/{sha}\"][\"response\"];\n        };\n        list: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists\"][\"response\"];\n        };\n        listComments: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/{gist_id}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/{gist_id}/comments\"][\"response\"];\n        };\n        listCommits: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/{gist_id}/commits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/{gist_id}/commits\"][\"response\"];\n        };\n        listForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/gists\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/gists\"][\"response\"];\n        };\n        listForks: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/{gist_id}/forks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/{gist_id}/forks\"][\"response\"];\n        };\n        listPublic: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/public\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/public\"][\"response\"];\n        };\n        listStarred: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gists/starred\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gists/starred\"][\"response\"];\n        };\n        star: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /gists/{gist_id}/star\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /gists/{gist_id}/star\"][\"response\"];\n        };\n        unstar: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /gists/{gist_id}/star\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /gists/{gist_id}/star\"][\"response\"];\n        };\n        update: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /gists/{gist_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /gists/{gist_id}\"][\"response\"];\n        };\n        updateComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /gists/{gist_id}/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /gists/{gist_id}/comments/{comment_id}\"][\"response\"];\n        };\n    };\n    git: {\n        createBlob: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/git/blobs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/git/blobs\"][\"response\"];\n        };\n        createCommit: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/git/commits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/git/commits\"][\"response\"];\n        };\n        createRef: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/git/refs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/git/refs\"][\"response\"];\n        };\n        createTag: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/git/tags\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/git/tags\"][\"response\"];\n        };\n        createTree: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/git/trees\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/git/trees\"][\"response\"];\n        };\n        deleteRef: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"][\"response\"];\n        };\n        getBlob: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"][\"response\"];\n        };\n        getCommit: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"][\"response\"];\n        };\n        getRef: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/git/ref/{ref}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/git/ref/{ref}\"][\"response\"];\n        };\n        getTag: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"][\"response\"];\n        };\n        getTree: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"][\"response\"];\n        };\n        listMatchingRefs: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"][\"response\"];\n        };\n        updateRef: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"][\"response\"];\n        };\n    };\n    gitignore: {\n        getAllTemplates: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gitignore/templates\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gitignore/templates\"][\"response\"];\n        };\n        getTemplate: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /gitignore/templates/{name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /gitignore/templates/{name}\"][\"response\"];\n        };\n    };\n    interactions: {\n        getRestrictionsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/interaction-limits\"][\"response\"];\n        };\n        getRestrictionsForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/interaction-limits\"][\"response\"];\n        };\n        getRestrictionsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/interaction-limits\"][\"response\"];\n        };\n        getRestrictionsForYourPublicRepos: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/interaction-limits\"][\"response\"];\n        };\n        removeRestrictionsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/interaction-limits\"][\"response\"];\n        };\n        removeRestrictionsForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/interaction-limits\"][\"response\"];\n        };\n        removeRestrictionsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/interaction-limits\"][\"response\"];\n        };\n        removeRestrictionsForYourPublicRepos: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/interaction-limits\"][\"response\"];\n        };\n        setRestrictionsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /user/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /user/interaction-limits\"][\"response\"];\n        };\n        setRestrictionsForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/interaction-limits\"][\"response\"];\n        };\n        setRestrictionsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/interaction-limits\"][\"response\"];\n        };\n        setRestrictionsForYourPublicRepos: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /user/interaction-limits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /user/interaction-limits\"][\"response\"];\n        };\n    };\n    issues: {\n        addAssignees: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\"][\"response\"];\n        };\n        addLabels: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"response\"];\n        };\n        checkUserCanBeAssigned: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/assignees/{assignee}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/assignees/{assignee}\"][\"response\"];\n        };\n        create: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/issues\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/issues\"][\"response\"];\n        };\n        createComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\"][\"response\"];\n        };\n        createLabel: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/labels\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/labels\"][\"response\"];\n        };\n        createMilestone: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/milestones\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/milestones\"][\"response\"];\n        };\n        deleteComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\"][\"response\"];\n        };\n        deleteLabel: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/labels/{name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/labels/{name}\"][\"response\"];\n        };\n        deleteMilestone: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\"][\"response\"];\n        };\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}\"][\"response\"];\n        };\n        getComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"][\"response\"];\n        };\n        getEvent: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/events/{event_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/events/{event_id}\"][\"response\"];\n        };\n        getLabel: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/labels/{name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/labels/{name}\"][\"response\"];\n        };\n        getMilestone: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"][\"response\"];\n        };\n        list: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /issues\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /issues\"][\"response\"];\n        };\n        listAssignees: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/assignees\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/assignees\"][\"response\"];\n        };\n        listComments: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"][\"response\"];\n        };\n        listCommentsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/comments\"][\"response\"];\n        };\n        listEvents: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"][\"response\"];\n        };\n        listEventsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/events\"][\"response\"];\n        };\n        listEventsForTimeline: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\"][\"response\"];\n        };\n        listForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/issues\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/issues\"][\"response\"];\n        };\n        listForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/issues\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/issues\"][\"response\"];\n        };\n        listForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues\"][\"response\"];\n        };\n        listLabelsForMilestone: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"][\"response\"];\n        };\n        listLabelsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/labels\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/labels\"][\"response\"];\n        };\n        listLabelsOnIssue: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"response\"];\n        };\n        listMilestones: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/milestones\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/milestones\"][\"response\"];\n        };\n        lock: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"][\"response\"];\n        };\n        removeAllLabels: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"response\"];\n        };\n        removeAssignees: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\"][\"response\"];\n        };\n        removeLabel: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\"][\"response\"];\n        };\n        setLabels: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"][\"response\"];\n        };\n        unlock: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"][\"response\"];\n        };\n        update: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"][\"response\"];\n        };\n        updateComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"][\"response\"];\n        };\n        updateLabel: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/labels/{name}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/labels/{name}\"][\"response\"];\n        };\n        updateMilestone: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\"][\"response\"];\n        };\n    };\n    licenses: {\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /licenses/{license}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /licenses/{license}\"][\"response\"];\n        };\n        getAllCommonlyUsed: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /licenses\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /licenses\"][\"response\"];\n        };\n        getForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/license\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/license\"][\"response\"];\n        };\n    };\n    markdown: {\n        render: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /markdown\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /markdown\"][\"response\"];\n        };\n        renderRaw: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /markdown/raw\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /markdown/raw\"][\"response\"];\n        };\n    };\n    meta: {\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /meta\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /meta\"][\"response\"];\n        };\n        getOctocat: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /octocat\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /octocat\"][\"response\"];\n        };\n        getZen: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /zen\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /zen\"][\"response\"];\n        };\n        root: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /\"][\"response\"];\n        };\n    };\n    migrations: {\n        cancelImport: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/import\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/import\"][\"response\"];\n        };\n        deleteArchiveForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/migrations/{migration_id}/archive\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/migrations/{migration_id}/archive\"][\"response\"];\n        };\n        deleteArchiveForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/migrations/{migration_id}/archive\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/migrations/{migration_id}/archive\"][\"response\"];\n        };\n        downloadArchiveForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/migrations/{migration_id}/archive\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/migrations/{migration_id}/archive\"][\"response\"];\n        };\n        getArchiveForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/migrations/{migration_id}/archive\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/migrations/{migration_id}/archive\"][\"response\"];\n        };\n        getCommitAuthors: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/import/authors\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/import/authors\"][\"response\"];\n        };\n        getImportStatus: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/import\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/import\"][\"response\"];\n        };\n        getLargeFiles: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/import/large_files\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/import/large_files\"][\"response\"];\n        };\n        getStatusForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/migrations/{migration_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/migrations/{migration_id}\"][\"response\"];\n        };\n        getStatusForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/migrations/{migration_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/migrations/{migration_id}\"][\"response\"];\n        };\n        listForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/migrations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/migrations\"][\"response\"];\n        };\n        listForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/migrations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/migrations\"][\"response\"];\n        };\n        listReposForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/migrations/{migration_id}/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/migrations/{migration_id}/repositories\"][\"response\"];\n        };\n        listReposForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/migrations/{migration_id}/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/migrations/{migration_id}/repositories\"][\"response\"];\n        };\n        mapCommitAuthor: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/import/authors/{author_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/import/authors/{author_id}\"][\"response\"];\n        };\n        setLfsPreference: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/import/lfs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/import/lfs\"][\"response\"];\n        };\n        startForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /user/migrations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /user/migrations\"][\"response\"];\n        };\n        startForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/migrations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/migrations\"][\"response\"];\n        };\n        startImport: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/import\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/import\"][\"response\"];\n        };\n        unlockRepoForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\"][\"response\"];\n        };\n        unlockRepoForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\"][\"response\"];\n        };\n        updateImport: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/import\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/import\"][\"response\"];\n        };\n    };\n    orgs: {\n        blockUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/blocks/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/blocks/{username}\"][\"response\"];\n        };\n        cancelInvitation: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/invitations/{invitation_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/invitations/{invitation_id}\"][\"response\"];\n        };\n        checkBlockedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/blocks/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/blocks/{username}\"][\"response\"];\n        };\n        checkMembershipForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/members/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/members/{username}\"][\"response\"];\n        };\n        checkPublicMembershipForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/public_members/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/public_members/{username}\"][\"response\"];\n        };\n        convertMemberToOutsideCollaborator: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/outside_collaborators/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/outside_collaborators/{username}\"][\"response\"];\n        };\n        createInvitation: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/invitations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/invitations\"][\"response\"];\n        };\n        createWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/hooks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/hooks\"][\"response\"];\n        };\n        deleteWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/hooks/{hook_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/hooks/{hook_id}\"][\"response\"];\n        };\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}\"][\"response\"];\n        };\n        getMembershipForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/memberships/orgs/{org}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/memberships/orgs/{org}\"][\"response\"];\n        };\n        getMembershipForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/memberships/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/memberships/{username}\"][\"response\"];\n        };\n        getWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/hooks/{hook_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/hooks/{hook_id}\"][\"response\"];\n        };\n        getWebhookConfigForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/hooks/{hook_id}/config\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/hooks/{hook_id}/config\"][\"response\"];\n        };\n        list: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /organizations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /organizations\"][\"response\"];\n        };\n        listAppInstallations: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/installations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/installations\"][\"response\"];\n        };\n        listBlockedUsers: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/blocks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/blocks\"][\"response\"];\n        };\n        listFailedInvitations: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/failed_invitations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/failed_invitations\"][\"response\"];\n        };\n        listForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/orgs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/orgs\"][\"response\"];\n        };\n        listForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/orgs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/orgs\"][\"response\"];\n        };\n        listInvitationTeams: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/invitations/{invitation_id}/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/invitations/{invitation_id}/teams\"][\"response\"];\n        };\n        listMembers: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/members\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/members\"][\"response\"];\n        };\n        listMembershipsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/memberships/orgs\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/memberships/orgs\"][\"response\"];\n        };\n        listOutsideCollaborators: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/outside_collaborators\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/outside_collaborators\"][\"response\"];\n        };\n        listPendingInvitations: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/invitations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/invitations\"][\"response\"];\n        };\n        listPublicMembers: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/public_members\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/public_members\"][\"response\"];\n        };\n        listWebhooks: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/hooks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/hooks\"][\"response\"];\n        };\n        pingWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/hooks/{hook_id}/pings\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/hooks/{hook_id}/pings\"][\"response\"];\n        };\n        removeMember: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/members/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/members/{username}\"][\"response\"];\n        };\n        removeMembershipForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/memberships/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/memberships/{username}\"][\"response\"];\n        };\n        removeOutsideCollaborator: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/outside_collaborators/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/outside_collaborators/{username}\"][\"response\"];\n        };\n        removePublicMembershipForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/public_members/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/public_members/{username}\"][\"response\"];\n        };\n        setMembershipForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/memberships/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/memberships/{username}\"][\"response\"];\n        };\n        setPublicMembershipForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/public_members/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/public_members/{username}\"][\"response\"];\n        };\n        unblockUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/blocks/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/blocks/{username}\"][\"response\"];\n        };\n        update: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /orgs/{org}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /orgs/{org}\"][\"response\"];\n        };\n        updateMembershipForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /user/memberships/orgs/{org}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /user/memberships/orgs/{org}\"][\"response\"];\n        };\n        updateWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /orgs/{org}/hooks/{hook_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /orgs/{org}/hooks/{hook_id}\"][\"response\"];\n        };\n        updateWebhookConfigForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /orgs/{org}/hooks/{hook_id}/config\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /orgs/{org}/hooks/{hook_id}/config\"][\"response\"];\n        };\n    };\n    projects: {\n        addCollaborator: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /projects/{project_id}/collaborators/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /projects/{project_id}/collaborators/{username}\"][\"response\"];\n        };\n        createCard: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /projects/columns/{column_id}/cards\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /projects/columns/{column_id}/cards\"][\"response\"];\n        };\n        createColumn: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /projects/{project_id}/columns\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /projects/{project_id}/columns\"][\"response\"];\n        };\n        createForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /user/projects\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /user/projects\"][\"response\"];\n        };\n        createForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/projects\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/projects\"][\"response\"];\n        };\n        createForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/projects\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/projects\"][\"response\"];\n        };\n        delete: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /projects/{project_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /projects/{project_id}\"][\"response\"];\n        };\n        deleteCard: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /projects/columns/cards/{card_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /projects/columns/cards/{card_id}\"][\"response\"];\n        };\n        deleteColumn: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /projects/columns/{column_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /projects/columns/{column_id}\"][\"response\"];\n        };\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /projects/{project_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /projects/{project_id}\"][\"response\"];\n        };\n        getCard: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /projects/columns/cards/{card_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /projects/columns/cards/{card_id}\"][\"response\"];\n        };\n        getColumn: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /projects/columns/{column_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /projects/columns/{column_id}\"][\"response\"];\n        };\n        getPermissionForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /projects/{project_id}/collaborators/{username}/permission\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /projects/{project_id}/collaborators/{username}/permission\"][\"response\"];\n        };\n        listCards: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /projects/columns/{column_id}/cards\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /projects/columns/{column_id}/cards\"][\"response\"];\n        };\n        listCollaborators: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /projects/{project_id}/collaborators\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /projects/{project_id}/collaborators\"][\"response\"];\n        };\n        listColumns: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /projects/{project_id}/columns\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /projects/{project_id}/columns\"][\"response\"];\n        };\n        listForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/projects\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/projects\"][\"response\"];\n        };\n        listForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/projects\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/projects\"][\"response\"];\n        };\n        listForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/projects\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/projects\"][\"response\"];\n        };\n        moveCard: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /projects/columns/cards/{card_id}/moves\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /projects/columns/cards/{card_id}/moves\"][\"response\"];\n        };\n        moveColumn: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /projects/columns/{column_id}/moves\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /projects/columns/{column_id}/moves\"][\"response\"];\n        };\n        removeCollaborator: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /projects/{project_id}/collaborators/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /projects/{project_id}/collaborators/{username}\"][\"response\"];\n        };\n        update: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /projects/{project_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /projects/{project_id}\"][\"response\"];\n        };\n        updateCard: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /projects/columns/cards/{card_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /projects/columns/cards/{card_id}\"][\"response\"];\n        };\n        updateColumn: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /projects/columns/{column_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /projects/columns/{column_id}\"][\"response\"];\n        };\n    };\n    pulls: {\n        checkIfMerged: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"][\"response\"];\n        };\n        create: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pulls\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pulls\"][\"response\"];\n        };\n        createReplyForReviewComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\"][\"response\"];\n        };\n        createReview: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"][\"response\"];\n        };\n        createReviewComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\"][\"response\"];\n        };\n        deletePendingReview: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"][\"response\"];\n        };\n        deleteReviewComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\"][\"response\"];\n        };\n        dismissReview: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\"][\"response\"];\n        };\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}\"][\"response\"];\n        };\n        getReview: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"][\"response\"];\n        };\n        getReviewComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"][\"response\"];\n        };\n        list: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls\"][\"response\"];\n        };\n        listCommentsForReview: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"][\"response\"];\n        };\n        listCommits: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"][\"response\"];\n        };\n        listFiles: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"][\"response\"];\n        };\n        listRequestedReviewers: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"response\"];\n        };\n        listReviewComments: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"][\"response\"];\n        };\n        listReviewCommentsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments\"][\"response\"];\n        };\n        listReviews: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"][\"response\"];\n        };\n        merge: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"][\"response\"];\n        };\n        removeRequestedReviewers: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"response\"];\n        };\n        requestReviewers: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"][\"response\"];\n        };\n        submitReview: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\"][\"response\"];\n        };\n        update: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"][\"response\"];\n        };\n        updateBranch: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\"][\"response\"];\n        };\n        updateReview: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"][\"response\"];\n        };\n        updateReviewComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\"][\"response\"];\n        };\n    };\n    rateLimit: {\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /rate_limit\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /rate_limit\"][\"response\"];\n        };\n    };\n    reactions: {\n        createForCommitComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\"][\"response\"];\n        };\n        createForIssue: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\"][\"response\"];\n        };\n        createForIssueComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"][\"response\"];\n        };\n        createForPullRequestReviewComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"][\"response\"];\n        };\n        createForTeamDiscussionCommentInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"][\"response\"];\n        };\n        createForTeamDiscussionInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"][\"response\"];\n        };\n        deleteForCommitComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\"][\"response\"];\n        };\n        deleteForIssue: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\"][\"response\"];\n        };\n        deleteForIssueComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\"][\"response\"];\n        };\n        deleteForPullRequestComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\"][\"response\"];\n        };\n        deleteForTeamDiscussion: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\"][\"response\"];\n        };\n        deleteForTeamDiscussionComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\"][\"response\"];\n        };\n        deleteLegacy: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /reactions/{reaction_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /reactions/{reaction_id}\"][\"response\"];\n        };\n        listForCommitComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\"][\"response\"];\n        };\n        listForIssue: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\"][\"response\"];\n        };\n        listForIssueComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"][\"response\"];\n        };\n        listForPullRequestReviewComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"][\"response\"];\n        };\n        listForTeamDiscussionCommentInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"][\"response\"];\n        };\n        listForTeamDiscussionInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"][\"response\"];\n        };\n    };\n    repos: {\n        acceptInvitation: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /user/repository_invitations/{invitation_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /user/repository_invitations/{invitation_id}\"][\"response\"];\n        };\n        addAppAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"][\"response\"];\n        };\n        addCollaborator: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/collaborators/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/collaborators/{username}\"][\"response\"];\n        };\n        addStatusCheckContexts: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"][\"response\"];\n        };\n        addTeamAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"][\"response\"];\n        };\n        addUserAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"][\"response\"];\n        };\n        checkCollaborator: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/collaborators/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/collaborators/{username}\"][\"response\"];\n        };\n        checkVulnerabilityAlerts: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/vulnerability-alerts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/vulnerability-alerts\"][\"response\"];\n        };\n        compareCommits: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/compare/{base}...{head}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/compare/{base}...{head}\"][\"response\"];\n        };\n        createCommitComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\"][\"response\"];\n        };\n        createCommitSignatureProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"][\"response\"];\n        };\n        createCommitStatus: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/statuses/{sha}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/statuses/{sha}\"][\"response\"];\n        };\n        createDeployKey: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/keys\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/keys\"][\"response\"];\n        };\n        createDeployment: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/deployments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/deployments\"][\"response\"];\n        };\n        createDeploymentStatus: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"][\"response\"];\n        };\n        createDispatchEvent: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/dispatches\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/dispatches\"][\"response\"];\n        };\n        createForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /user/repos\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /user/repos\"][\"response\"];\n        };\n        createFork: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/forks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/forks\"][\"response\"];\n        };\n        createInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/repos\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/repos\"][\"response\"];\n        };\n        createOrUpdateFileContents: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/contents/{path}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/contents/{path}\"][\"response\"];\n        };\n        createPagesSite: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pages\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pages\"][\"response\"];\n        };\n        createRelease: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/releases\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/releases\"][\"response\"];\n        };\n        createUsingTemplate: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{template_owner}/{template_repo}/generate\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{template_owner}/{template_repo}/generate\"][\"response\"];\n        };\n        createWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/hooks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/hooks\"][\"response\"];\n        };\n        declineInvitation: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/repository_invitations/{invitation_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/repository_invitations/{invitation_id}\"][\"response\"];\n        };\n        delete: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}\"][\"response\"];\n        };\n        deleteAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"][\"response\"];\n        };\n        deleteAdminBranchProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"][\"response\"];\n        };\n        deleteBranchProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\"][\"response\"];\n        };\n        deleteCommitComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"][\"response\"];\n        };\n        deleteCommitSignatureProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"][\"response\"];\n        };\n        deleteDeployKey: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/keys/{key_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/keys/{key_id}\"][\"response\"];\n        };\n        deleteDeployment: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\"][\"response\"];\n        };\n        deleteFile: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/contents/{path}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/contents/{path}\"][\"response\"];\n        };\n        deleteInvitation: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\"][\"response\"];\n        };\n        deletePagesSite: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/pages\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/pages\"][\"response\"];\n        };\n        deletePullRequestReviewProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"][\"response\"];\n        };\n        deleteRelease: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/releases/{release_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/releases/{release_id}\"][\"response\"];\n        };\n        deleteReleaseAsset: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\"][\"response\"];\n        };\n        deleteWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"][\"response\"];\n        };\n        disableAutomatedSecurityFixes: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/automated-security-fixes\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/automated-security-fixes\"][\"response\"];\n        };\n        disableVulnerabilityAlerts: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/vulnerability-alerts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/vulnerability-alerts\"][\"response\"];\n        };\n        downloadArchive: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/zipball/{ref}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/zipball/{ref}\"][\"response\"];\n        };\n        downloadTarballArchive: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/tarball/{ref}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/tarball/{ref}\"][\"response\"];\n        };\n        downloadZipballArchive: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/zipball/{ref}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/zipball/{ref}\"][\"response\"];\n        };\n        enableAutomatedSecurityFixes: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/automated-security-fixes\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/automated-security-fixes\"][\"response\"];\n        };\n        enableVulnerabilityAlerts: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/vulnerability-alerts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/vulnerability-alerts\"][\"response\"];\n        };\n        get: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}\"][\"response\"];\n        };\n        getAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"][\"response\"];\n        };\n        getAdminBranchProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"][\"response\"];\n        };\n        getAllStatusCheckContexts: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"][\"response\"];\n        };\n        getAllTopics: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/topics\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/topics\"][\"response\"];\n        };\n        getAppsWithAccessToProtectedBranch: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"][\"response\"];\n        };\n        getBranch: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}\"][\"response\"];\n        };\n        getBranchProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection\"][\"response\"];\n        };\n        getClones: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/traffic/clones\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/traffic/clones\"][\"response\"];\n        };\n        getCodeFrequencyStats: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/stats/code_frequency\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/stats/code_frequency\"][\"response\"];\n        };\n        getCollaboratorPermissionLevel: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/collaborators/{username}/permission\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/collaborators/{username}/permission\"][\"response\"];\n        };\n        getCombinedStatusForRef: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/status\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/status\"][\"response\"];\n        };\n        getCommit: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}\"][\"response\"];\n        };\n        getCommitActivityStats: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/stats/commit_activity\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/stats/commit_activity\"][\"response\"];\n        };\n        getCommitComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/comments/{comment_id}\"][\"response\"];\n        };\n        getCommitSignatureProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"][\"response\"];\n        };\n        getCommunityProfileMetrics: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/community/profile\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/community/profile\"][\"response\"];\n        };\n        getContent: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/contents/{path}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/contents/{path}\"][\"response\"];\n        };\n        getContributorsStats: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/stats/contributors\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/stats/contributors\"][\"response\"];\n        };\n        getDeployKey: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/keys/{key_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/keys/{key_id}\"][\"response\"];\n        };\n        getDeployment: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"][\"response\"];\n        };\n        getDeploymentStatus: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\"][\"response\"];\n        };\n        getLatestPagesBuild: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pages/builds/latest\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pages/builds/latest\"][\"response\"];\n        };\n        getLatestRelease: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/releases/latest\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/releases/latest\"][\"response\"];\n        };\n        getPages: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pages\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pages\"][\"response\"];\n        };\n        getPagesBuild: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"][\"response\"];\n        };\n        getParticipationStats: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/stats/participation\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/stats/participation\"][\"response\"];\n        };\n        getPullRequestReviewProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"][\"response\"];\n        };\n        getPunchCardStats: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/stats/punch_card\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/stats/punch_card\"][\"response\"];\n        };\n        getReadme: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/readme\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/readme\"][\"response\"];\n        };\n        getRelease: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/releases/{release_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/releases/{release_id}\"][\"response\"];\n        };\n        getReleaseAsset: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"][\"response\"];\n        };\n        getReleaseByTag: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/releases/tags/{tag}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/releases/tags/{tag}\"][\"response\"];\n        };\n        getStatusChecksProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"][\"response\"];\n        };\n        getTeamsWithAccessToProtectedBranch: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"][\"response\"];\n        };\n        getTopPaths: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/traffic/popular/paths\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/traffic/popular/paths\"][\"response\"];\n        };\n        getTopReferrers: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/traffic/popular/referrers\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/traffic/popular/referrers\"][\"response\"];\n        };\n        getUsersWithAccessToProtectedBranch: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"][\"response\"];\n        };\n        getViews: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/traffic/views\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/traffic/views\"][\"response\"];\n        };\n        getWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/hooks/{hook_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/hooks/{hook_id}\"][\"response\"];\n        };\n        getWebhookConfigForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\"][\"response\"];\n        };\n        listBranches: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/branches\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/branches\"][\"response\"];\n        };\n        listBranchesForHeadCommit: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\"][\"response\"];\n        };\n        listCollaborators: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/collaborators\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/collaborators\"][\"response\"];\n        };\n        listCommentsForCommit: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"][\"response\"];\n        };\n        listCommitCommentsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/comments\"][\"response\"];\n        };\n        listCommitStatusesForRef: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"][\"response\"];\n        };\n        listCommits: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits\"][\"response\"];\n        };\n        listContributors: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/contributors\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/contributors\"][\"response\"];\n        };\n        listDeployKeys: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/keys\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/keys\"][\"response\"];\n        };\n        listDeploymentStatuses: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"][\"response\"];\n        };\n        listDeployments: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/deployments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/deployments\"][\"response\"];\n        };\n        listForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/repos\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/repos\"][\"response\"];\n        };\n        listForOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/repos\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/repos\"][\"response\"];\n        };\n        listForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/repos\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/repos\"][\"response\"];\n        };\n        listForks: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/forks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/forks\"][\"response\"];\n        };\n        listInvitations: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/invitations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/invitations\"][\"response\"];\n        };\n        listInvitationsForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/repository_invitations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/repository_invitations\"][\"response\"];\n        };\n        listLanguages: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/languages\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/languages\"][\"response\"];\n        };\n        listPagesBuilds: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/pages/builds\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/pages/builds\"][\"response\"];\n        };\n        listPublic: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repositories\"][\"response\"];\n        };\n        listPullRequestsAssociatedWithCommit: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\"][\"response\"];\n        };\n        listReleaseAssets: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"][\"response\"];\n        };\n        listReleases: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/releases\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/releases\"][\"response\"];\n        };\n        listTags: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/tags\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/tags\"][\"response\"];\n        };\n        listTeams: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/teams\"][\"response\"];\n        };\n        listWebhooks: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/hooks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/hooks\"][\"response\"];\n        };\n        merge: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/merges\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/merges\"][\"response\"];\n        };\n        pingWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"][\"response\"];\n        };\n        removeAppAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"][\"response\"];\n        };\n        removeCollaborator: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/collaborators/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/collaborators/{username}\"][\"response\"];\n        };\n        removeStatusCheckContexts: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"][\"response\"];\n        };\n        removeStatusCheckProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"][\"response\"];\n        };\n        removeTeamAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"][\"response\"];\n        };\n        removeUserAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"][\"response\"];\n        };\n        renameBranch: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/rename\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/rename\"][\"response\"];\n        };\n        replaceAllTopics: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/topics\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/topics\"][\"response\"];\n        };\n        requestPagesBuild: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/pages/builds\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/pages/builds\"][\"response\"];\n        };\n        setAdminBranchProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"][\"response\"];\n        };\n        setAppAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"][\"response\"];\n        };\n        setStatusCheckContexts: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"][\"response\"];\n        };\n        setTeamAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"][\"response\"];\n        };\n        setUserAccessRestrictions: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"][\"response\"];\n        };\n        testPushWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"][\"response\"];\n        };\n        transfer: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /repos/{owner}/{repo}/transfer\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /repos/{owner}/{repo}/transfer\"][\"response\"];\n        };\n        update: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}\"][\"response\"];\n        };\n        updateBranchProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/branches/{branch}/protection\"][\"response\"];\n        };\n        updateCommitComment: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"][\"response\"];\n        };\n        updateInformationAboutPagesSite: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /repos/{owner}/{repo}/pages\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /repos/{owner}/{repo}/pages\"][\"response\"];\n        };\n        updateInvitation: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\"][\"response\"];\n        };\n        updatePullRequestReviewProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"][\"response\"];\n        };\n        updateRelease: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/releases/{release_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/releases/{release_id}\"][\"response\"];\n        };\n        updateReleaseAsset: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\"][\"response\"];\n        };\n        updateStatusCheckPotection: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"][\"response\"];\n        };\n        updateStatusCheckProtection: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"][\"response\"];\n        };\n        updateWebhook: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"][\"response\"];\n        };\n        updateWebhookConfigForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\"][\"response\"];\n        };\n        uploadReleaseAsset: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST {origin}/repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST {origin}/repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\"][\"response\"];\n        };\n    };\n    search: {\n        code: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /search/code\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /search/code\"][\"response\"];\n        };\n        commits: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /search/commits\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /search/commits\"][\"response\"];\n        };\n        issuesAndPullRequests: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /search/issues\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /search/issues\"][\"response\"];\n        };\n        labels: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /search/labels\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /search/labels\"][\"response\"];\n        };\n        repos: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /search/repositories\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /search/repositories\"][\"response\"];\n        };\n        topics: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /search/topics\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /search/topics\"][\"response\"];\n        };\n        users: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /search/users\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /search/users\"][\"response\"];\n        };\n    };\n    secretScanning: {\n        getAlert: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"][\"response\"];\n        };\n        listAlertsForRepo: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"][\"response\"];\n        };\n        updateAlert: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"][\"response\"];\n        };\n    };\n    teams: {\n        addOrUpdateMembershipForUserInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\"][\"response\"];\n        };\n        addOrUpdateProjectPermissionsInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\"][\"response\"];\n        };\n        addOrUpdateRepoPermissionsInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"][\"response\"];\n        };\n        checkPermissionsForProjectInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\"][\"response\"];\n        };\n        checkPermissionsForRepoInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"][\"response\"];\n        };\n        create: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/teams\"][\"response\"];\n        };\n        createDiscussionCommentInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"][\"response\"];\n        };\n        createDiscussionInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /orgs/{org}/teams/{team_slug}/discussions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /orgs/{org}/teams/{team_slug}/discussions\"][\"response\"];\n        };\n        deleteDiscussionCommentInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"][\"response\"];\n        };\n        deleteDiscussionInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"][\"response\"];\n        };\n        deleteInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}\"][\"response\"];\n        };\n        getByName: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}\"][\"response\"];\n        };\n        getDiscussionCommentInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"][\"response\"];\n        };\n        getDiscussionInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"][\"response\"];\n        };\n        getMembershipForUserInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\"][\"response\"];\n        };\n        list: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams\"][\"response\"];\n        };\n        listChildInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/teams\"][\"response\"];\n        };\n        listDiscussionCommentsInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"][\"response\"];\n        };\n        listDiscussionsInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/discussions\"][\"response\"];\n        };\n        listForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/teams\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/teams\"][\"response\"];\n        };\n        listMembersInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/members\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/members\"][\"response\"];\n        };\n        listPendingInvitationsInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/invitations\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/invitations\"][\"response\"];\n        };\n        listProjectsInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/projects\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/projects\"][\"response\"];\n        };\n        listReposInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /orgs/{org}/teams/{team_slug}/repos\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /orgs/{org}/teams/{team_slug}/repos\"][\"response\"];\n        };\n        removeMembershipForUserInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\"][\"response\"];\n        };\n        removeProjectInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\"][\"response\"];\n        };\n        removeRepoInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"][\"response\"];\n        };\n        updateDiscussionCommentInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"][\"response\"];\n        };\n        updateDiscussionInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"][\"response\"];\n        };\n        updateInOrg: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /orgs/{org}/teams/{team_slug}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /orgs/{org}/teams/{team_slug}\"][\"response\"];\n        };\n    };\n    users: {\n        addEmailForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /user/emails\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /user/emails\"][\"response\"];\n        };\n        block: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /user/blocks/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /user/blocks/{username}\"][\"response\"];\n        };\n        checkBlocked: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/blocks/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/blocks/{username}\"][\"response\"];\n        };\n        checkFollowingForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/following/{target_user}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/following/{target_user}\"][\"response\"];\n        };\n        checkPersonIsFollowedByAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/following/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/following/{username}\"][\"response\"];\n        };\n        createGpgKeyForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /user/gpg_keys\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /user/gpg_keys\"][\"response\"];\n        };\n        createPublicSshKeyForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"POST /user/keys\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"POST /user/keys\"][\"response\"];\n        };\n        deleteEmailForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/emails\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/emails\"][\"response\"];\n        };\n        deleteGpgKeyForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/gpg_keys/{gpg_key_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/gpg_keys/{gpg_key_id}\"][\"response\"];\n        };\n        deletePublicSshKeyForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/keys/{key_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/keys/{key_id}\"][\"response\"];\n        };\n        follow: {\n            parameters: RequestParameters & Omit<Endpoints[\"PUT /user/following/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PUT /user/following/{username}\"][\"response\"];\n        };\n        getAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user\"][\"response\"];\n        };\n        getByUsername: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}\"][\"response\"];\n        };\n        getContextForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/hovercard\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/hovercard\"][\"response\"];\n        };\n        getGpgKeyForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/gpg_keys/{gpg_key_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/gpg_keys/{gpg_key_id}\"][\"response\"];\n        };\n        getPublicSshKeyForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/keys/{key_id}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/keys/{key_id}\"][\"response\"];\n        };\n        list: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users\"][\"response\"];\n        };\n        listBlockedByAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/blocks\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/blocks\"][\"response\"];\n        };\n        listEmailsForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/emails\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/emails\"][\"response\"];\n        };\n        listFollowedByAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/following\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/following\"][\"response\"];\n        };\n        listFollowersForAuthenticatedUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/followers\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/followers\"][\"response\"];\n        };\n        listFollowersForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/followers\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/followers\"][\"response\"];\n        };\n        listFollowingForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/following\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/following\"][\"response\"];\n        };\n        listGpgKeysForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/gpg_keys\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/gpg_keys\"][\"response\"];\n        };\n        listGpgKeysForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/gpg_keys\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/gpg_keys\"][\"response\"];\n        };\n        listPublicEmailsForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/public_emails\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/public_emails\"][\"response\"];\n        };\n        listPublicKeysForUser: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /users/{username}/keys\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /users/{username}/keys\"][\"response\"];\n        };\n        listPublicSshKeysForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"GET /user/keys\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"GET /user/keys\"][\"response\"];\n        };\n        setPrimaryEmailVisibilityForAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /user/email/visibility\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /user/email/visibility\"][\"response\"];\n        };\n        unblock: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/blocks/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/blocks/{username}\"][\"response\"];\n        };\n        unfollow: {\n            parameters: RequestParameters & Omit<Endpoints[\"DELETE /user/following/{username}\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"DELETE /user/following/{username}\"][\"response\"];\n        };\n        updateAuthenticated: {\n            parameters: RequestParameters & Omit<Endpoints[\"PATCH /user\"][\"parameters\"], \"baseUrl\" | \"headers\" | \"mediaType\">;\n            response: Endpoints[\"PATCH /user\"][\"response\"];\n        };\n    };\n};\n","node_modules/@octokit/plugin-rest-endpoint-methods/dist-web/index.js":"const Endpoints = {\n    actions: {\n        addSelectedRepoToOrgSecret: [\n            \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\",\n        ],\n        cancelWorkflowRun: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\",\n        ],\n        createOrUpdateOrgSecret: [\"PUT /orgs/{org}/actions/secrets/{secret_name}\"],\n        createOrUpdateRepoSecret: [\n            \"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\",\n        ],\n        createRegistrationTokenForOrg: [\n            \"POST /orgs/{org}/actions/runners/registration-token\",\n        ],\n        createRegistrationTokenForRepo: [\n            \"POST /repos/{owner}/{repo}/actions/runners/registration-token\",\n        ],\n        createRemoveTokenForOrg: [\"POST /orgs/{org}/actions/runners/remove-token\"],\n        createRemoveTokenForRepo: [\n            \"POST /repos/{owner}/{repo}/actions/runners/remove-token\",\n        ],\n        createWorkflowDispatch: [\n            \"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\",\n        ],\n        deleteArtifact: [\n            \"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\",\n        ],\n        deleteOrgSecret: [\"DELETE /orgs/{org}/actions/secrets/{secret_name}\"],\n        deleteRepoSecret: [\n            \"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\",\n        ],\n        deleteSelfHostedRunnerFromOrg: [\n            \"DELETE /orgs/{org}/actions/runners/{runner_id}\",\n        ],\n        deleteSelfHostedRunnerFromRepo: [\n            \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\",\n        ],\n        deleteWorkflowRun: [\"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n        deleteWorkflowRunLogs: [\n            \"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\",\n        ],\n        disableSelectedRepositoryGithubActionsOrganization: [\n            \"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\",\n        ],\n        disableWorkflow: [\n            \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\",\n        ],\n        downloadArtifact: [\n            \"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\",\n        ],\n        downloadJobLogsForWorkflowRun: [\n            \"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\",\n        ],\n        downloadWorkflowRunLogs: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\",\n        ],\n        enableSelectedRepositoryGithubActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\",\n        ],\n        enableWorkflow: [\n            \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\",\n        ],\n        getAllowedActionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions/selected-actions\",\n        ],\n        getAllowedActionsRepository: [\n            \"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\",\n        ],\n        getArtifact: [\"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"],\n        getGithubActionsPermissionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions\",\n        ],\n        getGithubActionsPermissionsRepository: [\n            \"GET /repos/{owner}/{repo}/actions/permissions\",\n        ],\n        getJobForWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"],\n        getOrgPublicKey: [\"GET /orgs/{org}/actions/secrets/public-key\"],\n        getOrgSecret: [\"GET /orgs/{org}/actions/secrets/{secret_name}\"],\n        getRepoPermissions: [\n            \"GET /repos/{owner}/{repo}/actions/permissions\",\n            {},\n            { renamed: [\"actions\", \"getGithubActionsPermissionsRepository\"] },\n        ],\n        getRepoPublicKey: [\"GET /repos/{owner}/{repo}/actions/secrets/public-key\"],\n        getRepoSecret: [\"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"],\n        getSelfHostedRunnerForOrg: [\"GET /orgs/{org}/actions/runners/{runner_id}\"],\n        getSelfHostedRunnerForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\",\n        ],\n        getWorkflow: [\"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"],\n        getWorkflowRun: [\"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"],\n        getWorkflowRunUsage: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\",\n        ],\n        getWorkflowUsage: [\n            \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\",\n        ],\n        listArtifactsForRepo: [\"GET /repos/{owner}/{repo}/actions/artifacts\"],\n        listJobsForWorkflowRun: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\",\n        ],\n        listOrgSecrets: [\"GET /orgs/{org}/actions/secrets\"],\n        listRepoSecrets: [\"GET /repos/{owner}/{repo}/actions/secrets\"],\n        listRepoWorkflows: [\"GET /repos/{owner}/{repo}/actions/workflows\"],\n        listRunnerApplicationsForOrg: [\"GET /orgs/{org}/actions/runners/downloads\"],\n        listRunnerApplicationsForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runners/downloads\",\n        ],\n        listSelectedReposForOrgSecret: [\n            \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n        ],\n        listSelectedRepositoriesEnabledGithubActionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions/repositories\",\n        ],\n        listSelfHostedRunnersForOrg: [\"GET /orgs/{org}/actions/runners\"],\n        listSelfHostedRunnersForRepo: [\"GET /repos/{owner}/{repo}/actions/runners\"],\n        listWorkflowRunArtifacts: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\",\n        ],\n        listWorkflowRuns: [\n            \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\",\n        ],\n        listWorkflowRunsForRepo: [\"GET /repos/{owner}/{repo}/actions/runs\"],\n        reRunWorkflow: [\"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"],\n        removeSelectedRepoFromOrgSecret: [\n            \"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\",\n        ],\n        setAllowedActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/selected-actions\",\n        ],\n        setAllowedActionsRepository: [\n            \"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\",\n        ],\n        setGithubActionsPermissionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions\",\n        ],\n        setGithubActionsPermissionsRepository: [\n            \"PUT /repos/{owner}/{repo}/actions/permissions\",\n        ],\n        setSelectedReposForOrgSecret: [\n            \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n        ],\n        setSelectedRepositoriesEnabledGithubActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/repositories\",\n        ],\n    },\n    activity: {\n        checkRepoIsStarredByAuthenticatedUser: [\"GET /user/starred/{owner}/{repo}\"],\n        deleteRepoSubscription: [\"DELETE /repos/{owner}/{repo}/subscription\"],\n        deleteThreadSubscription: [\n            \"DELETE /notifications/threads/{thread_id}/subscription\",\n        ],\n        getFeeds: [\"GET /feeds\"],\n        getRepoSubscription: [\"GET /repos/{owner}/{repo}/subscription\"],\n        getThread: [\"GET /notifications/threads/{thread_id}\"],\n        getThreadSubscriptionForAuthenticatedUser: [\n            \"GET /notifications/threads/{thread_id}/subscription\",\n        ],\n        listEventsForAuthenticatedUser: [\"GET /users/{username}/events\"],\n        listNotificationsForAuthenticatedUser: [\"GET /notifications\"],\n        listOrgEventsForAuthenticatedUser: [\n            \"GET /users/{username}/events/orgs/{org}\",\n        ],\n        listPublicEvents: [\"GET /events\"],\n        listPublicEventsForRepoNetwork: [\"GET /networks/{owner}/{repo}/events\"],\n        listPublicEventsForUser: [\"GET /users/{username}/events/public\"],\n        listPublicOrgEvents: [\"GET /orgs/{org}/events\"],\n        listReceivedEventsForUser: [\"GET /users/{username}/received_events\"],\n        listReceivedPublicEventsForUser: [\n            \"GET /users/{username}/received_events/public\",\n        ],\n        listRepoEvents: [\"GET /repos/{owner}/{repo}/events\"],\n        listRepoNotificationsForAuthenticatedUser: [\n            \"GET /repos/{owner}/{repo}/notifications\",\n        ],\n        listReposStarredByAuthenticatedUser: [\"GET /user/starred\"],\n        listReposStarredByUser: [\"GET /users/{username}/starred\"],\n        listReposWatchedByUser: [\"GET /users/{username}/subscriptions\"],\n        listStargazersForRepo: [\"GET /repos/{owner}/{repo}/stargazers\"],\n        listWatchedReposForAuthenticatedUser: [\"GET /user/subscriptions\"],\n        listWatchersForRepo: [\"GET /repos/{owner}/{repo}/subscribers\"],\n        markNotificationsAsRead: [\"PUT /notifications\"],\n        markRepoNotificationsAsRead: [\"PUT /repos/{owner}/{repo}/notifications\"],\n        markThreadAsRead: [\"PATCH /notifications/threads/{thread_id}\"],\n        setRepoSubscription: [\"PUT /repos/{owner}/{repo}/subscription\"],\n        setThreadSubscription: [\n            \"PUT /notifications/threads/{thread_id}/subscription\",\n        ],\n        starRepoForAuthenticatedUser: [\"PUT /user/starred/{owner}/{repo}\"],\n        unstarRepoForAuthenticatedUser: [\"DELETE /user/starred/{owner}/{repo}\"],\n    },\n    apps: {\n        addRepoToInstallation: [\n            \"PUT /user/installations/{installation_id}/repositories/{repository_id}\",\n        ],\n        checkToken: [\"POST /applications/{client_id}/token\"],\n        createContentAttachment: [\n            \"POST /content_references/{content_reference_id}/attachments\",\n            { mediaType: { previews: [\"corsair\"] } },\n        ],\n        createFromManifest: [\"POST /app-manifests/{code}/conversions\"],\n        createInstallationAccessToken: [\n            \"POST /app/installations/{installation_id}/access_tokens\",\n        ],\n        deleteAuthorization: [\"DELETE /applications/{client_id}/grant\"],\n        deleteInstallation: [\"DELETE /app/installations/{installation_id}\"],\n        deleteToken: [\"DELETE /applications/{client_id}/token\"],\n        getAuthenticated: [\"GET /app\"],\n        getBySlug: [\"GET /apps/{app_slug}\"],\n        getInstallation: [\"GET /app/installations/{installation_id}\"],\n        getOrgInstallation: [\"GET /orgs/{org}/installation\"],\n        getRepoInstallation: [\"GET /repos/{owner}/{repo}/installation\"],\n        getSubscriptionPlanForAccount: [\n            \"GET /marketplace_listing/accounts/{account_id}\",\n        ],\n        getSubscriptionPlanForAccountStubbed: [\n            \"GET /marketplace_listing/stubbed/accounts/{account_id}\",\n        ],\n        getUserInstallation: [\"GET /users/{username}/installation\"],\n        getWebhookConfigForApp: [\"GET /app/hook/config\"],\n        listAccountsForPlan: [\"GET /marketplace_listing/plans/{plan_id}/accounts\"],\n        listAccountsForPlanStubbed: [\n            \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\",\n        ],\n        listInstallationReposForAuthenticatedUser: [\n            \"GET /user/installations/{installation_id}/repositories\",\n        ],\n        listInstallations: [\"GET /app/installations\"],\n        listInstallationsForAuthenticatedUser: [\"GET /user/installations\"],\n        listPlans: [\"GET /marketplace_listing/plans\"],\n        listPlansStubbed: [\"GET /marketplace_listing/stubbed/plans\"],\n        listReposAccessibleToInstallation: [\"GET /installation/repositories\"],\n        listSubscriptionsForAuthenticatedUser: [\"GET /user/marketplace_purchases\"],\n        listSubscriptionsForAuthenticatedUserStubbed: [\n            \"GET /user/marketplace_purchases/stubbed\",\n        ],\n        removeRepoFromInstallation: [\n            \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\",\n        ],\n        resetToken: [\"PATCH /applications/{client_id}/token\"],\n        revokeInstallationAccessToken: [\"DELETE /installation/token\"],\n        scopeToken: [\"POST /applications/{client_id}/token/scoped\"],\n        suspendInstallation: [\"PUT /app/installations/{installation_id}/suspended\"],\n        unsuspendInstallation: [\n            \"DELETE /app/installations/{installation_id}/suspended\",\n        ],\n        updateWebhookConfigForApp: [\"PATCH /app/hook/config\"],\n    },\n    billing: {\n        getGithubActionsBillingOrg: [\"GET /orgs/{org}/settings/billing/actions\"],\n        getGithubActionsBillingUser: [\n            \"GET /users/{username}/settings/billing/actions\",\n        ],\n        getGithubPackagesBillingOrg: [\"GET /orgs/{org}/settings/billing/packages\"],\n        getGithubPackagesBillingUser: [\n            \"GET /users/{username}/settings/billing/packages\",\n        ],\n        getSharedStorageBillingOrg: [\n            \"GET /orgs/{org}/settings/billing/shared-storage\",\n        ],\n        getSharedStorageBillingUser: [\n            \"GET /users/{username}/settings/billing/shared-storage\",\n        ],\n    },\n    checks: {\n        create: [\"POST /repos/{owner}/{repo}/check-runs\"],\n        createSuite: [\"POST /repos/{owner}/{repo}/check-suites\"],\n        get: [\"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"],\n        getSuite: [\"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"],\n        listAnnotations: [\n            \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\",\n        ],\n        listForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"],\n        listForSuite: [\n            \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\",\n        ],\n        listSuitesForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"],\n        rerequestSuite: [\n            \"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\",\n        ],\n        setSuitesPreferences: [\n            \"PATCH /repos/{owner}/{repo}/check-suites/preferences\",\n        ],\n        update: [\"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"],\n    },\n    codeScanning: {\n        getAlert: [\n            \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\",\n            {},\n            { renamedParameters: { alert_id: \"alert_number\" } },\n        ],\n        listAlertsForRepo: [\"GET /repos/{owner}/{repo}/code-scanning/alerts\"],\n        listRecentAnalyses: [\"GET /repos/{owner}/{repo}/code-scanning/analyses\"],\n        updateAlert: [\n            \"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\",\n        ],\n        uploadSarif: [\"POST /repos/{owner}/{repo}/code-scanning/sarifs\"],\n    },\n    codesOfConduct: {\n        getAllCodesOfConduct: [\n            \"GET /codes_of_conduct\",\n            { mediaType: { previews: [\"scarlet-witch\"] } },\n        ],\n        getConductCode: [\n            \"GET /codes_of_conduct/{key}\",\n            { mediaType: { previews: [\"scarlet-witch\"] } },\n        ],\n        getForRepo: [\n            \"GET /repos/{owner}/{repo}/community/code_of_conduct\",\n            { mediaType: { previews: [\"scarlet-witch\"] } },\n        ],\n    },\n    emojis: { get: [\"GET /emojis\"] },\n    enterpriseAdmin: {\n        disableSelectedOrganizationGithubActionsEnterprise: [\n            \"DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\",\n        ],\n        enableSelectedOrganizationGithubActionsEnterprise: [\n            \"PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\",\n        ],\n        getAllowedActionsEnterprise: [\n            \"GET /enterprises/{enterprise}/actions/permissions/selected-actions\",\n        ],\n        getGithubActionsPermissionsEnterprise: [\n            \"GET /enterprises/{enterprise}/actions/permissions\",\n        ],\n        listSelectedOrganizationsEnabledGithubActionsEnterprise: [\n            \"GET /enterprises/{enterprise}/actions/permissions/organizations\",\n        ],\n        setAllowedActionsEnterprise: [\n            \"PUT /enterprises/{enterprise}/actions/permissions/selected-actions\",\n        ],\n        setGithubActionsPermissionsEnterprise: [\n            \"PUT /enterprises/{enterprise}/actions/permissions\",\n        ],\n        setSelectedOrganizationsEnabledGithubActionsEnterprise: [\n            \"PUT /enterprises/{enterprise}/actions/permissions/organizations\",\n        ],\n    },\n    gists: {\n        checkIsStarred: [\"GET /gists/{gist_id}/star\"],\n        create: [\"POST /gists\"],\n        createComment: [\"POST /gists/{gist_id}/comments\"],\n        delete: [\"DELETE /gists/{gist_id}\"],\n        deleteComment: [\"DELETE /gists/{gist_id}/comments/{comment_id}\"],\n        fork: [\"POST /gists/{gist_id}/forks\"],\n        get: [\"GET /gists/{gist_id}\"],\n        getComment: [\"GET /gists/{gist_id}/comments/{comment_id}\"],\n        getRevision: [\"GET /gists/{gist_id}/{sha}\"],\n        list: [\"GET /gists\"],\n        listComments: [\"GET /gists/{gist_id}/comments\"],\n        listCommits: [\"GET /gists/{gist_id}/commits\"],\n        listForUser: [\"GET /users/{username}/gists\"],\n        listForks: [\"GET /gists/{gist_id}/forks\"],\n        listPublic: [\"GET /gists/public\"],\n        listStarred: [\"GET /gists/starred\"],\n        star: [\"PUT /gists/{gist_id}/star\"],\n        unstar: [\"DELETE /gists/{gist_id}/star\"],\n        update: [\"PATCH /gists/{gist_id}\"],\n        updateComment: [\"PATCH /gists/{gist_id}/comments/{comment_id}\"],\n    },\n    git: {\n        createBlob: [\"POST /repos/{owner}/{repo}/git/blobs\"],\n        createCommit: [\"POST /repos/{owner}/{repo}/git/commits\"],\n        createRef: [\"POST /repos/{owner}/{repo}/git/refs\"],\n        createTag: [\"POST /repos/{owner}/{repo}/git/tags\"],\n        createTree: [\"POST /repos/{owner}/{repo}/git/trees\"],\n        deleteRef: [\"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"],\n        getBlob: [\"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"],\n        getCommit: [\"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"],\n        getRef: [\"GET /repos/{owner}/{repo}/git/ref/{ref}\"],\n        getTag: [\"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"],\n        getTree: [\"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"],\n        listMatchingRefs: [\"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"],\n        updateRef: [\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"],\n    },\n    gitignore: {\n        getAllTemplates: [\"GET /gitignore/templates\"],\n        getTemplate: [\"GET /gitignore/templates/{name}\"],\n    },\n    interactions: {\n        getRestrictionsForAuthenticatedUser: [\"GET /user/interaction-limits\"],\n        getRestrictionsForOrg: [\"GET /orgs/{org}/interaction-limits\"],\n        getRestrictionsForRepo: [\"GET /repos/{owner}/{repo}/interaction-limits\"],\n        getRestrictionsForYourPublicRepos: [\n            \"GET /user/interaction-limits\",\n            {},\n            { renamed: [\"interactions\", \"getRestrictionsForAuthenticatedUser\"] },\n        ],\n        removeRestrictionsForAuthenticatedUser: [\"DELETE /user/interaction-limits\"],\n        removeRestrictionsForOrg: [\"DELETE /orgs/{org}/interaction-limits\"],\n        removeRestrictionsForRepo: [\n            \"DELETE /repos/{owner}/{repo}/interaction-limits\",\n        ],\n        removeRestrictionsForYourPublicRepos: [\n            \"DELETE /user/interaction-limits\",\n            {},\n            { renamed: [\"interactions\", \"removeRestrictionsForAuthenticatedUser\"] },\n        ],\n        setRestrictionsForAuthenticatedUser: [\"PUT /user/interaction-limits\"],\n        setRestrictionsForOrg: [\"PUT /orgs/{org}/interaction-limits\"],\n        setRestrictionsForRepo: [\"PUT /repos/{owner}/{repo}/interaction-limits\"],\n        setRestrictionsForYourPublicRepos: [\n            \"PUT /user/interaction-limits\",\n            {},\n            { renamed: [\"interactions\", \"setRestrictionsForAuthenticatedUser\"] },\n        ],\n    },\n    issues: {\n        addAssignees: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\",\n        ],\n        addLabels: [\"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n        checkUserCanBeAssigned: [\"GET /repos/{owner}/{repo}/assignees/{assignee}\"],\n        create: [\"POST /repos/{owner}/{repo}/issues\"],\n        createComment: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\",\n        ],\n        createLabel: [\"POST /repos/{owner}/{repo}/labels\"],\n        createMilestone: [\"POST /repos/{owner}/{repo}/milestones\"],\n        deleteComment: [\n            \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\",\n        ],\n        deleteLabel: [\"DELETE /repos/{owner}/{repo}/labels/{name}\"],\n        deleteMilestone: [\n            \"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\",\n        ],\n        get: [\"GET /repos/{owner}/{repo}/issues/{issue_number}\"],\n        getComment: [\"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n        getEvent: [\"GET /repos/{owner}/{repo}/issues/events/{event_id}\"],\n        getLabel: [\"GET /repos/{owner}/{repo}/labels/{name}\"],\n        getMilestone: [\"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"],\n        list: [\"GET /issues\"],\n        listAssignees: [\"GET /repos/{owner}/{repo}/assignees\"],\n        listComments: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"],\n        listCommentsForRepo: [\"GET /repos/{owner}/{repo}/issues/comments\"],\n        listEvents: [\"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"],\n        listEventsForRepo: [\"GET /repos/{owner}/{repo}/issues/events\"],\n        listEventsForTimeline: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\",\n            { mediaType: { previews: [\"mockingbird\"] } },\n        ],\n        listForAuthenticatedUser: [\"GET /user/issues\"],\n        listForOrg: [\"GET /orgs/{org}/issues\"],\n        listForRepo: [\"GET /repos/{owner}/{repo}/issues\"],\n        listLabelsForMilestone: [\n            \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\",\n        ],\n        listLabelsForRepo: [\"GET /repos/{owner}/{repo}/labels\"],\n        listLabelsOnIssue: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n        ],\n        listMilestones: [\"GET /repos/{owner}/{repo}/milestones\"],\n        lock: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n        removeAllLabels: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n        ],\n        removeAssignees: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\",\n        ],\n        removeLabel: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\",\n        ],\n        setLabels: [\"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"],\n        unlock: [\"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"],\n        update: [\"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"],\n        updateComment: [\"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"],\n        updateLabel: [\"PATCH /repos/{owner}/{repo}/labels/{name}\"],\n        updateMilestone: [\n            \"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\",\n        ],\n    },\n    licenses: {\n        get: [\"GET /licenses/{license}\"],\n        getAllCommonlyUsed: [\"GET /licenses\"],\n        getForRepo: [\"GET /repos/{owner}/{repo}/license\"],\n    },\n    markdown: {\n        render: [\"POST /markdown\"],\n        renderRaw: [\n            \"POST /markdown/raw\",\n            { headers: { \"content-type\": \"text/plain; charset=utf-8\" } },\n        ],\n    },\n    meta: {\n        get: [\"GET /meta\"],\n        getOctocat: [\"GET /octocat\"],\n        getZen: [\"GET /zen\"],\n        root: [\"GET /\"],\n    },\n    migrations: {\n        cancelImport: [\"DELETE /repos/{owner}/{repo}/import\"],\n        deleteArchiveForAuthenticatedUser: [\n            \"DELETE /user/migrations/{migration_id}/archive\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        deleteArchiveForOrg: [\n            \"DELETE /orgs/{org}/migrations/{migration_id}/archive\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        downloadArchiveForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}/archive\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        getArchiveForAuthenticatedUser: [\n            \"GET /user/migrations/{migration_id}/archive\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        getCommitAuthors: [\"GET /repos/{owner}/{repo}/import/authors\"],\n        getImportStatus: [\"GET /repos/{owner}/{repo}/import\"],\n        getLargeFiles: [\"GET /repos/{owner}/{repo}/import/large_files\"],\n        getStatusForAuthenticatedUser: [\n            \"GET /user/migrations/{migration_id}\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        getStatusForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        listForAuthenticatedUser: [\n            \"GET /user/migrations\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        listForOrg: [\n            \"GET /orgs/{org}/migrations\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        listReposForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}/repositories\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        listReposForUser: [\n            \"GET /user/migrations/{migration_id}/repositories\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        mapCommitAuthor: [\"PATCH /repos/{owner}/{repo}/import/authors/{author_id}\"],\n        setLfsPreference: [\"PATCH /repos/{owner}/{repo}/import/lfs\"],\n        startForAuthenticatedUser: [\"POST /user/migrations\"],\n        startForOrg: [\"POST /orgs/{org}/migrations\"],\n        startImport: [\"PUT /repos/{owner}/{repo}/import\"],\n        unlockRepoForAuthenticatedUser: [\n            \"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        unlockRepoForOrg: [\n            \"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\",\n            { mediaType: { previews: [\"wyandotte\"] } },\n        ],\n        updateImport: [\"PATCH /repos/{owner}/{repo}/import\"],\n    },\n    orgs: {\n        blockUser: [\"PUT /orgs/{org}/blocks/{username}\"],\n        cancelInvitation: [\"DELETE /orgs/{org}/invitations/{invitation_id}\"],\n        checkBlockedUser: [\"GET /orgs/{org}/blocks/{username}\"],\n        checkMembershipForUser: [\"GET /orgs/{org}/members/{username}\"],\n        checkPublicMembershipForUser: [\"GET /orgs/{org}/public_members/{username}\"],\n        convertMemberToOutsideCollaborator: [\n            \"PUT /orgs/{org}/outside_collaborators/{username}\",\n        ],\n        createInvitation: [\"POST /orgs/{org}/invitations\"],\n        createWebhook: [\"POST /orgs/{org}/hooks\"],\n        deleteWebhook: [\"DELETE /orgs/{org}/hooks/{hook_id}\"],\n        get: [\"GET /orgs/{org}\"],\n        getMembershipForAuthenticatedUser: [\"GET /user/memberships/orgs/{org}\"],\n        getMembershipForUser: [\"GET /orgs/{org}/memberships/{username}\"],\n        getWebhook: [\"GET /orgs/{org}/hooks/{hook_id}\"],\n        getWebhookConfigForOrg: [\"GET /orgs/{org}/hooks/{hook_id}/config\"],\n        list: [\"GET /organizations\"],\n        listAppInstallations: [\"GET /orgs/{org}/installations\"],\n        listBlockedUsers: [\"GET /orgs/{org}/blocks\"],\n        listFailedInvitations: [\"GET /orgs/{org}/failed_invitations\"],\n        listForAuthenticatedUser: [\"GET /user/orgs\"],\n        listForUser: [\"GET /users/{username}/orgs\"],\n        listInvitationTeams: [\"GET /orgs/{org}/invitations/{invitation_id}/teams\"],\n        listMembers: [\"GET /orgs/{org}/members\"],\n        listMembershipsForAuthenticatedUser: [\"GET /user/memberships/orgs\"],\n        listOutsideCollaborators: [\"GET /orgs/{org}/outside_collaborators\"],\n        listPendingInvitations: [\"GET /orgs/{org}/invitations\"],\n        listPublicMembers: [\"GET /orgs/{org}/public_members\"],\n        listWebhooks: [\"GET /orgs/{org}/hooks\"],\n        pingWebhook: [\"POST /orgs/{org}/hooks/{hook_id}/pings\"],\n        removeMember: [\"DELETE /orgs/{org}/members/{username}\"],\n        removeMembershipForUser: [\"DELETE /orgs/{org}/memberships/{username}\"],\n        removeOutsideCollaborator: [\n            \"DELETE /orgs/{org}/outside_collaborators/{username}\",\n        ],\n        removePublicMembershipForAuthenticatedUser: [\n            \"DELETE /orgs/{org}/public_members/{username}\",\n        ],\n        setMembershipForUser: [\"PUT /orgs/{org}/memberships/{username}\"],\n        setPublicMembershipForAuthenticatedUser: [\n            \"PUT /orgs/{org}/public_members/{username}\",\n        ],\n        unblockUser: [\"DELETE /orgs/{org}/blocks/{username}\"],\n        update: [\"PATCH /orgs/{org}\"],\n        updateMembershipForAuthenticatedUser: [\n            \"PATCH /user/memberships/orgs/{org}\",\n        ],\n        updateWebhook: [\"PATCH /orgs/{org}/hooks/{hook_id}\"],\n        updateWebhookConfigForOrg: [\"PATCH /orgs/{org}/hooks/{hook_id}/config\"],\n    },\n    projects: {\n        addCollaborator: [\n            \"PUT /projects/{project_id}/collaborators/{username}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createCard: [\n            \"POST /projects/columns/{column_id}/cards\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createColumn: [\n            \"POST /projects/{project_id}/columns\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createForAuthenticatedUser: [\n            \"POST /user/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createForOrg: [\n            \"POST /orgs/{org}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        createForRepo: [\n            \"POST /repos/{owner}/{repo}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        delete: [\n            \"DELETE /projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        deleteCard: [\n            \"DELETE /projects/columns/cards/{card_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        deleteColumn: [\n            \"DELETE /projects/columns/{column_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        get: [\n            \"GET /projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        getCard: [\n            \"GET /projects/columns/cards/{card_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        getColumn: [\n            \"GET /projects/columns/{column_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        getPermissionForUser: [\n            \"GET /projects/{project_id}/collaborators/{username}/permission\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listCards: [\n            \"GET /projects/columns/{column_id}/cards\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listCollaborators: [\n            \"GET /projects/{project_id}/collaborators\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listColumns: [\n            \"GET /projects/{project_id}/columns\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listForOrg: [\n            \"GET /orgs/{org}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listForRepo: [\n            \"GET /repos/{owner}/{repo}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listForUser: [\n            \"GET /users/{username}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        moveCard: [\n            \"POST /projects/columns/cards/{card_id}/moves\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        moveColumn: [\n            \"POST /projects/columns/{column_id}/moves\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        removeCollaborator: [\n            \"DELETE /projects/{project_id}/collaborators/{username}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        update: [\n            \"PATCH /projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        updateCard: [\n            \"PATCH /projects/columns/cards/{card_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        updateColumn: [\n            \"PATCH /projects/columns/{column_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n    },\n    pulls: {\n        checkIfMerged: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n        create: [\"POST /repos/{owner}/{repo}/pulls\"],\n        createReplyForReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\",\n        ],\n        createReview: [\"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n        createReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n        ],\n        deletePendingReview: [\n            \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\",\n        ],\n        deleteReviewComment: [\n            \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\",\n        ],\n        dismissReview: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\",\n        ],\n        get: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}\"],\n        getReview: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\",\n        ],\n        getReviewComment: [\"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"],\n        list: [\"GET /repos/{owner}/{repo}/pulls\"],\n        listCommentsForReview: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\",\n        ],\n        listCommits: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"],\n        listFiles: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"],\n        listRequestedReviewers: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n        ],\n        listReviewComments: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n        ],\n        listReviewCommentsForRepo: [\"GET /repos/{owner}/{repo}/pulls/comments\"],\n        listReviews: [\"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"],\n        merge: [\"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"],\n        removeRequestedReviewers: [\n            \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n        ],\n        requestReviewers: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n        ],\n        submitReview: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\",\n        ],\n        update: [\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"],\n        updateBranch: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\",\n            { mediaType: { previews: [\"lydian\"] } },\n        ],\n        updateReview: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\",\n        ],\n        updateReviewComment: [\n            \"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\",\n        ],\n    },\n    rateLimit: { get: [\"GET /rate_limit\"] },\n    reactions: {\n        createForCommitComment: [\n            \"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForIssue: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForIssueComment: [\n            \"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForPullRequestReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForTeamDiscussionCommentInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        createForTeamDiscussionInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForCommitComment: [\n            \"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForIssue: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForIssueComment: [\n            \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForPullRequestComment: [\n            \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForTeamDiscussion: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteForTeamDiscussionComment: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        deleteLegacy: [\n            \"DELETE /reactions/{reaction_id}\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n            {\n                deprecated: \"octokit.reactions.deleteLegacy() is deprecated, see https://docs.github.com/v3/reactions/#delete-a-reaction-legacy\",\n            },\n        ],\n        listForCommitComment: [\n            \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForIssue: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForIssueComment: [\n            \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForPullRequestReviewComment: [\n            \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForTeamDiscussionCommentInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n        listForTeamDiscussionInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n            { mediaType: { previews: [\"squirrel-girl\"] } },\n        ],\n    },\n    repos: {\n        acceptInvitation: [\"PATCH /user/repository_invitations/{invitation_id}\"],\n        addAppAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            { mapToData: \"apps\" },\n        ],\n        addCollaborator: [\"PUT /repos/{owner}/{repo}/collaborators/{username}\"],\n        addStatusCheckContexts: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            { mapToData: \"contexts\" },\n        ],\n        addTeamAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            { mapToData: \"teams\" },\n        ],\n        addUserAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            { mapToData: \"users\" },\n        ],\n        checkCollaborator: [\"GET /repos/{owner}/{repo}/collaborators/{username}\"],\n        checkVulnerabilityAlerts: [\n            \"GET /repos/{owner}/{repo}/vulnerability-alerts\",\n            { mediaType: { previews: [\"dorian\"] } },\n        ],\n        compareCommits: [\"GET /repos/{owner}/{repo}/compare/{base}...{head}\"],\n        createCommitComment: [\n            \"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n        ],\n        createCommitSignatureProtection: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\",\n            { mediaType: { previews: [\"zzzax\"] } },\n        ],\n        createCommitStatus: [\"POST /repos/{owner}/{repo}/statuses/{sha}\"],\n        createDeployKey: [\"POST /repos/{owner}/{repo}/keys\"],\n        createDeployment: [\"POST /repos/{owner}/{repo}/deployments\"],\n        createDeploymentStatus: [\n            \"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n        ],\n        createDispatchEvent: [\"POST /repos/{owner}/{repo}/dispatches\"],\n        createForAuthenticatedUser: [\"POST /user/repos\"],\n        createFork: [\"POST /repos/{owner}/{repo}/forks\"],\n        createInOrg: [\"POST /orgs/{org}/repos\"],\n        createOrUpdateFileContents: [\"PUT /repos/{owner}/{repo}/contents/{path}\"],\n        createPagesSite: [\n            \"POST /repos/{owner}/{repo}/pages\",\n            { mediaType: { previews: [\"switcheroo\"] } },\n        ],\n        createRelease: [\"POST /repos/{owner}/{repo}/releases\"],\n        createUsingTemplate: [\n            \"POST /repos/{template_owner}/{template_repo}/generate\",\n            { mediaType: { previews: [\"baptiste\"] } },\n        ],\n        createWebhook: [\"POST /repos/{owner}/{repo}/hooks\"],\n        declineInvitation: [\"DELETE /user/repository_invitations/{invitation_id}\"],\n        delete: [\"DELETE /repos/{owner}/{repo}\"],\n        deleteAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\",\n        ],\n        deleteAdminBranchProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\",\n        ],\n        deleteBranchProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\",\n        ],\n        deleteCommitComment: [\"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"],\n        deleteCommitSignatureProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\",\n            { mediaType: { previews: [\"zzzax\"] } },\n        ],\n        deleteDeployKey: [\"DELETE /repos/{owner}/{repo}/keys/{key_id}\"],\n        deleteDeployment: [\n            \"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\",\n        ],\n        deleteFile: [\"DELETE /repos/{owner}/{repo}/contents/{path}\"],\n        deleteInvitation: [\n            \"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\",\n        ],\n        deletePagesSite: [\n            \"DELETE /repos/{owner}/{repo}/pages\",\n            { mediaType: { previews: [\"switcheroo\"] } },\n        ],\n        deletePullRequestReviewProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\",\n        ],\n        deleteRelease: [\"DELETE /repos/{owner}/{repo}/releases/{release_id}\"],\n        deleteReleaseAsset: [\n            \"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\",\n        ],\n        deleteWebhook: [\"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"],\n        disableAutomatedSecurityFixes: [\n            \"DELETE /repos/{owner}/{repo}/automated-security-fixes\",\n            { mediaType: { previews: [\"london\"] } },\n        ],\n        disableVulnerabilityAlerts: [\n            \"DELETE /repos/{owner}/{repo}/vulnerability-alerts\",\n            { mediaType: { previews: [\"dorian\"] } },\n        ],\n        downloadArchive: [\n            \"GET /repos/{owner}/{repo}/zipball/{ref}\",\n            {},\n            { renamed: [\"repos\", \"downloadZipballArchive\"] },\n        ],\n        downloadTarballArchive: [\"GET /repos/{owner}/{repo}/tarball/{ref}\"],\n        downloadZipballArchive: [\"GET /repos/{owner}/{repo}/zipball/{ref}\"],\n        enableAutomatedSecurityFixes: [\n            \"PUT /repos/{owner}/{repo}/automated-security-fixes\",\n            { mediaType: { previews: [\"london\"] } },\n        ],\n        enableVulnerabilityAlerts: [\n            \"PUT /repos/{owner}/{repo}/vulnerability-alerts\",\n            { mediaType: { previews: [\"dorian\"] } },\n        ],\n        get: [\"GET /repos/{owner}/{repo}\"],\n        getAccessRestrictions: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\",\n        ],\n        getAdminBranchProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\",\n        ],\n        getAllStatusCheckContexts: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n        ],\n        getAllTopics: [\n            \"GET /repos/{owner}/{repo}/topics\",\n            { mediaType: { previews: [\"mercy\"] } },\n        ],\n        getAppsWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n        ],\n        getBranch: [\"GET /repos/{owner}/{repo}/branches/{branch}\"],\n        getBranchProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection\",\n        ],\n        getClones: [\"GET /repos/{owner}/{repo}/traffic/clones\"],\n        getCodeFrequencyStats: [\"GET /repos/{owner}/{repo}/stats/code_frequency\"],\n        getCollaboratorPermissionLevel: [\n            \"GET /repos/{owner}/{repo}/collaborators/{username}/permission\",\n        ],\n        getCombinedStatusForRef: [\"GET /repos/{owner}/{repo}/commits/{ref}/status\"],\n        getCommit: [\"GET /repos/{owner}/{repo}/commits/{ref}\"],\n        getCommitActivityStats: [\"GET /repos/{owner}/{repo}/stats/commit_activity\"],\n        getCommitComment: [\"GET /repos/{owner}/{repo}/comments/{comment_id}\"],\n        getCommitSignatureProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\",\n            { mediaType: { previews: [\"zzzax\"] } },\n        ],\n        getCommunityProfileMetrics: [\"GET /repos/{owner}/{repo}/community/profile\"],\n        getContent: [\"GET /repos/{owner}/{repo}/contents/{path}\"],\n        getContributorsStats: [\"GET /repos/{owner}/{repo}/stats/contributors\"],\n        getDeployKey: [\"GET /repos/{owner}/{repo}/keys/{key_id}\"],\n        getDeployment: [\"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"],\n        getDeploymentStatus: [\n            \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\",\n        ],\n        getLatestPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/latest\"],\n        getLatestRelease: [\"GET /repos/{owner}/{repo}/releases/latest\"],\n        getPages: [\"GET /repos/{owner}/{repo}/pages\"],\n        getPagesBuild: [\"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"],\n        getParticipationStats: [\"GET /repos/{owner}/{repo}/stats/participation\"],\n        getPullRequestReviewProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\",\n        ],\n        getPunchCardStats: [\"GET /repos/{owner}/{repo}/stats/punch_card\"],\n        getReadme: [\"GET /repos/{owner}/{repo}/readme\"],\n        getRelease: [\"GET /repos/{owner}/{repo}/releases/{release_id}\"],\n        getReleaseAsset: [\"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"],\n        getReleaseByTag: [\"GET /repos/{owner}/{repo}/releases/tags/{tag}\"],\n        getStatusChecksProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n        ],\n        getTeamsWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n        ],\n        getTopPaths: [\"GET /repos/{owner}/{repo}/traffic/popular/paths\"],\n        getTopReferrers: [\"GET /repos/{owner}/{repo}/traffic/popular/referrers\"],\n        getUsersWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n        ],\n        getViews: [\"GET /repos/{owner}/{repo}/traffic/views\"],\n        getWebhook: [\"GET /repos/{owner}/{repo}/hooks/{hook_id}\"],\n        getWebhookConfigForRepo: [\n            \"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\",\n        ],\n        listBranches: [\"GET /repos/{owner}/{repo}/branches\"],\n        listBranchesForHeadCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\",\n            { mediaType: { previews: [\"groot\"] } },\n        ],\n        listCollaborators: [\"GET /repos/{owner}/{repo}/collaborators\"],\n        listCommentsForCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n        ],\n        listCommitCommentsForRepo: [\"GET /repos/{owner}/{repo}/comments\"],\n        listCommitStatusesForRef: [\n            \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\",\n        ],\n        listCommits: [\"GET /repos/{owner}/{repo}/commits\"],\n        listContributors: [\"GET /repos/{owner}/{repo}/contributors\"],\n        listDeployKeys: [\"GET /repos/{owner}/{repo}/keys\"],\n        listDeploymentStatuses: [\n            \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n        ],\n        listDeployments: [\"GET /repos/{owner}/{repo}/deployments\"],\n        listForAuthenticatedUser: [\"GET /user/repos\"],\n        listForOrg: [\"GET /orgs/{org}/repos\"],\n        listForUser: [\"GET /users/{username}/repos\"],\n        listForks: [\"GET /repos/{owner}/{repo}/forks\"],\n        listInvitations: [\"GET /repos/{owner}/{repo}/invitations\"],\n        listInvitationsForAuthenticatedUser: [\"GET /user/repository_invitations\"],\n        listLanguages: [\"GET /repos/{owner}/{repo}/languages\"],\n        listPagesBuilds: [\"GET /repos/{owner}/{repo}/pages/builds\"],\n        listPublic: [\"GET /repositories\"],\n        listPullRequestsAssociatedWithCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\",\n            { mediaType: { previews: [\"groot\"] } },\n        ],\n        listReleaseAssets: [\n            \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\",\n        ],\n        listReleases: [\"GET /repos/{owner}/{repo}/releases\"],\n        listTags: [\"GET /repos/{owner}/{repo}/tags\"],\n        listTeams: [\"GET /repos/{owner}/{repo}/teams\"],\n        listWebhooks: [\"GET /repos/{owner}/{repo}/hooks\"],\n        merge: [\"POST /repos/{owner}/{repo}/merges\"],\n        pingWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"],\n        removeAppAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            { mapToData: \"apps\" },\n        ],\n        removeCollaborator: [\n            \"DELETE /repos/{owner}/{repo}/collaborators/{username}\",\n        ],\n        removeStatusCheckContexts: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            { mapToData: \"contexts\" },\n        ],\n        removeStatusCheckProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n        ],\n        removeTeamAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            { mapToData: \"teams\" },\n        ],\n        removeUserAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            { mapToData: \"users\" },\n        ],\n        renameBranch: [\"POST /repos/{owner}/{repo}/branches/{branch}/rename\"],\n        replaceAllTopics: [\n            \"PUT /repos/{owner}/{repo}/topics\",\n            { mediaType: { previews: [\"mercy\"] } },\n        ],\n        requestPagesBuild: [\"POST /repos/{owner}/{repo}/pages/builds\"],\n        setAdminBranchProtection: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\",\n        ],\n        setAppAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            { mapToData: \"apps\" },\n        ],\n        setStatusCheckContexts: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            { mapToData: \"contexts\" },\n        ],\n        setTeamAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            { mapToData: \"teams\" },\n        ],\n        setUserAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            { mapToData: \"users\" },\n        ],\n        testPushWebhook: [\"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"],\n        transfer: [\"POST /repos/{owner}/{repo}/transfer\"],\n        update: [\"PATCH /repos/{owner}/{repo}\"],\n        updateBranchProtection: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection\",\n        ],\n        updateCommitComment: [\"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"],\n        updateInformationAboutPagesSite: [\"PUT /repos/{owner}/{repo}/pages\"],\n        updateInvitation: [\n            \"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\",\n        ],\n        updatePullRequestReviewProtection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\",\n        ],\n        updateRelease: [\"PATCH /repos/{owner}/{repo}/releases/{release_id}\"],\n        updateReleaseAsset: [\n            \"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\",\n        ],\n        updateStatusCheckPotection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n            {},\n            { renamed: [\"repos\", \"updateStatusCheckProtection\"] },\n        ],\n        updateStatusCheckProtection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n        ],\n        updateWebhook: [\"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"],\n        updateWebhookConfigForRepo: [\n            \"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\",\n        ],\n        uploadReleaseAsset: [\n            \"POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\",\n            { baseUrl: \"https://uploads.github.com\" },\n        ],\n    },\n    search: {\n        code: [\"GET /search/code\"],\n        commits: [\"GET /search/commits\", { mediaType: { previews: [\"cloak\"] } }],\n        issuesAndPullRequests: [\"GET /search/issues\"],\n        labels: [\"GET /search/labels\"],\n        repos: [\"GET /search/repositories\"],\n        topics: [\"GET /search/topics\", { mediaType: { previews: [\"mercy\"] } }],\n        users: [\"GET /search/users\"],\n    },\n    secretScanning: {\n        getAlert: [\n            \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\",\n        ],\n        listAlertsForRepo: [\"GET /repos/{owner}/{repo}/secret-scanning/alerts\"],\n        updateAlert: [\n            \"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\",\n        ],\n    },\n    teams: {\n        addOrUpdateMembershipForUserInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\",\n        ],\n        addOrUpdateProjectPermissionsInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        addOrUpdateRepoPermissionsInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\",\n        ],\n        checkPermissionsForProjectInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        checkPermissionsForRepoInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\",\n        ],\n        create: [\"POST /orgs/{org}/teams\"],\n        createDiscussionCommentInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n        ],\n        createDiscussionInOrg: [\"POST /orgs/{org}/teams/{team_slug}/discussions\"],\n        deleteDiscussionCommentInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\",\n        ],\n        deleteDiscussionInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\",\n        ],\n        deleteInOrg: [\"DELETE /orgs/{org}/teams/{team_slug}\"],\n        getByName: [\"GET /orgs/{org}/teams/{team_slug}\"],\n        getDiscussionCommentInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\",\n        ],\n        getDiscussionInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\",\n        ],\n        getMembershipForUserInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\",\n        ],\n        list: [\"GET /orgs/{org}/teams\"],\n        listChildInOrg: [\"GET /orgs/{org}/teams/{team_slug}/teams\"],\n        listDiscussionCommentsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n        ],\n        listDiscussionsInOrg: [\"GET /orgs/{org}/teams/{team_slug}/discussions\"],\n        listForAuthenticatedUser: [\"GET /user/teams\"],\n        listMembersInOrg: [\"GET /orgs/{org}/teams/{team_slug}/members\"],\n        listPendingInvitationsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/invitations\",\n        ],\n        listProjectsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/projects\",\n            { mediaType: { previews: [\"inertia\"] } },\n        ],\n        listReposInOrg: [\"GET /orgs/{org}/teams/{team_slug}/repos\"],\n        removeMembershipForUserInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\",\n        ],\n        removeProjectInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\",\n        ],\n        removeRepoInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\",\n        ],\n        updateDiscussionCommentInOrg: [\n            \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\",\n        ],\n        updateDiscussionInOrg: [\n            \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\",\n        ],\n        updateInOrg: [\"PATCH /orgs/{org}/teams/{team_slug}\"],\n    },\n    users: {\n        addEmailForAuthenticated: [\"POST /user/emails\"],\n        block: [\"PUT /user/blocks/{username}\"],\n        checkBlocked: [\"GET /user/blocks/{username}\"],\n        checkFollowingForUser: [\"GET /users/{username}/following/{target_user}\"],\n        checkPersonIsFollowedByAuthenticated: [\"GET /user/following/{username}\"],\n        createGpgKeyForAuthenticated: [\"POST /user/gpg_keys\"],\n        createPublicSshKeyForAuthenticated: [\"POST /user/keys\"],\n        deleteEmailForAuthenticated: [\"DELETE /user/emails\"],\n        deleteGpgKeyForAuthenticated: [\"DELETE /user/gpg_keys/{gpg_key_id}\"],\n        deletePublicSshKeyForAuthenticated: [\"DELETE /user/keys/{key_id}\"],\n        follow: [\"PUT /user/following/{username}\"],\n        getAuthenticated: [\"GET /user\"],\n        getByUsername: [\"GET /users/{username}\"],\n        getContextForUser: [\"GET /users/{username}/hovercard\"],\n        getGpgKeyForAuthenticated: [\"GET /user/gpg_keys/{gpg_key_id}\"],\n        getPublicSshKeyForAuthenticated: [\"GET /user/keys/{key_id}\"],\n        list: [\"GET /users\"],\n        listBlockedByAuthenticated: [\"GET /user/blocks\"],\n        listEmailsForAuthenticated: [\"GET /user/emails\"],\n        listFollowedByAuthenticated: [\"GET /user/following\"],\n        listFollowersForAuthenticatedUser: [\"GET /user/followers\"],\n        listFollowersForUser: [\"GET /users/{username}/followers\"],\n        listFollowingForUser: [\"GET /users/{username}/following\"],\n        listGpgKeysForAuthenticated: [\"GET /user/gpg_keys\"],\n        listGpgKeysForUser: [\"GET /users/{username}/gpg_keys\"],\n        listPublicEmailsForAuthenticated: [\"GET /user/public_emails\"],\n        listPublicKeysForUser: [\"GET /users/{username}/keys\"],\n        listPublicSshKeysForAuthenticated: [\"GET /user/keys\"],\n        setPrimaryEmailVisibilityForAuthenticated: [\"PATCH /user/email/visibility\"],\n        unblock: [\"DELETE /user/blocks/{username}\"],\n        unfollow: [\"DELETE /user/following/{username}\"],\n        updateAuthenticated: [\"PATCH /user\"],\n    },\n};\n\nconst VERSION = \"4.10.3\";\n\nfunction endpointsToMethods(octokit, endpointsMap) {\n    const newMethods = {};\n    for (const [scope, endpoints] of Object.entries(endpointsMap)) {\n        for (const [methodName, endpoint] of Object.entries(endpoints)) {\n            const [route, defaults, decorations] = endpoint;\n            const [method, url] = route.split(/ /);\n            const endpointDefaults = Object.assign({ method, url }, defaults);\n            if (!newMethods[scope]) {\n                newMethods[scope] = {};\n            }\n            const scopeMethods = newMethods[scope];\n            if (decorations) {\n                scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);\n                continue;\n            }\n            scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);\n        }\n    }\n    return newMethods;\n}\nfunction decorate(octokit, scope, methodName, defaults, decorations) {\n    const requestWithDefaults = octokit.request.defaults(defaults);\n    /* istanbul ignore next */\n    function withDecorations(...args) {\n        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n        let options = requestWithDefaults.endpoint.merge(...args);\n        // There are currently no other decorations than `.mapToData`\n        if (decorations.mapToData) {\n            options = Object.assign({}, options, {\n                data: options[decorations.mapToData],\n                [decorations.mapToData]: undefined,\n            });\n            return requestWithDefaults(options);\n        }\n        if (decorations.renamed) {\n            const [newScope, newMethodName] = decorations.renamed;\n            octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);\n        }\n        if (decorations.deprecated) {\n            octokit.log.warn(decorations.deprecated);\n        }\n        if (decorations.renamedParameters) {\n            // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n            const options = requestWithDefaults.endpoint.merge(...args);\n            for (const [name, alias] of Object.entries(decorations.renamedParameters)) {\n                if (name in options) {\n                    octokit.log.warn(`\"${name}\" parameter is deprecated for \"octokit.${scope}.${methodName}()\". Use \"${alias}\" instead`);\n                    if (!(alias in options)) {\n                        options[alias] = options[name];\n                    }\n                    delete options[name];\n                }\n            }\n            return requestWithDefaults(options);\n        }\n        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488\n        return requestWithDefaults(...args);\n    }\n    return Object.assign(withDecorations, requestWithDefaults);\n}\n\n/**\n * This plugin is a 1:1 copy of internal @octokit/rest plugins. The primary\n * goal is to rebuild @octokit/rest on top of @octokit/core. Once that is\n * done, we will remove the registerEndpoints methods and return the methods\n * directly as with the other plugins. At that point we will also remove the\n * legacy workarounds and deprecations.\n *\n * See the plan at\n * https://github.com/octokit/plugin-rest-endpoint-methods.js/pull/1\n */\nfunction restEndpointMethods(octokit) {\n    return endpointsToMethods(octokit, Endpoints);\n}\nrestEndpointMethods.VERSION = VERSION;\n\nexport { restEndpointMethods };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/request/package.json":"{\n  \"name\": \"@octokit/request\",\n  \"description\": \"Send parameterized requests to GitHub’s APIs with sensible defaults in browsers and Node\",\n  \"version\": \"5.4.14\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"octokit\",\n    \"github\",\n    \"api\",\n    \"request\"\n  ],\n  \"homepage\": \"https://github.com/octokit/request.js#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/octokit/request.js/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/octokit/request.js.git\"\n  },\n  \"dependencies\": {\n    \"@octokit/endpoint\": \"^6.0.1\",\n    \"@octokit/request-error\": \"^2.0.0\",\n    \"@octokit/types\": \"^6.7.1\",\n    \"deprecation\": \"^2.0.0\",\n    \"is-plain-object\": \"^5.0.0\",\n    \"node-fetch\": \"^2.6.1\",\n    \"once\": \"^1.4.0\",\n    \"universal-user-agent\": \"^6.0.0\"\n  },\n  \"devDependencies\": {\n    \"@octokit/auth-app\": \"^2.1.2\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/fetch-mock\": \"^7.2.4\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/lolex\": \"^5.1.0\",\n    \"@types/node\": \"^14.0.0\",\n    \"@types/node-fetch\": \"^2.3.3\",\n    \"@types/once\": \"^1.4.0\",\n    \"fetch-mock\": \"^9.3.1\",\n    \"jest\": \"^26.0.1\",\n    \"lolex\": \"^6.0.0\",\n    \"prettier\": \"^2.0.1\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"ts-jest\": \"^26.1.0\",\n    \"typescript\": \"^4.0.2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/request/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar endpoint = require('@octokit/endpoint');\nvar universalUserAgent = require('universal-user-agent');\nvar isPlainObject = require('is-plain-object');\nvar nodeFetch = _interopDefault(require('node-fetch'));\nvar requestError = require('@octokit/request-error');\n\nconst VERSION = \"5.4.14\";\n\nfunction getBufferResponse(response) {\n  return response.arrayBuffer();\n}\n\nfunction fetchWrapper(requestOptions) {\n  if (isPlainObject.isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {\n    requestOptions.body = JSON.stringify(requestOptions.body);\n  }\n\n  let headers = {};\n  let status;\n  let url;\n  const fetch = requestOptions.request && requestOptions.request.fetch || nodeFetch;\n  return fetch(requestOptions.url, Object.assign({\n    method: requestOptions.method,\n    body: requestOptions.body,\n    headers: requestOptions.headers,\n    redirect: requestOptions.redirect\n  }, requestOptions.request)).then(response => {\n    url = response.url;\n    status = response.status;\n\n    for (const keyAndValue of response.headers) {\n      headers[keyAndValue[0]] = keyAndValue[1];\n    }\n\n    if (status === 204 || status === 205) {\n      return;\n    } // GitHub API returns 200 for HEAD requests\n\n\n    if (requestOptions.method === \"HEAD\") {\n      if (status < 400) {\n        return;\n      }\n\n      throw new requestError.RequestError(response.statusText, status, {\n        headers,\n        request: requestOptions\n      });\n    }\n\n    if (status === 304) {\n      throw new requestError.RequestError(\"Not modified\", status, {\n        headers,\n        request: requestOptions\n      });\n    }\n\n    if (status >= 400) {\n      return response.text().then(message => {\n        const error = new requestError.RequestError(message, status, {\n          headers,\n          request: requestOptions\n        });\n\n        try {\n          let responseBody = JSON.parse(error.message);\n          Object.assign(error, responseBody);\n          let errors = responseBody.errors; // Assumption `errors` would always be in Array format\n\n          error.message = error.message + \": \" + errors.map(JSON.stringify).join(\", \");\n        } catch (e) {// ignore, see octokit/rest.js#684\n        }\n\n        throw error;\n      });\n    }\n\n    const contentType = response.headers.get(\"content-type\");\n\n    if (/application\\/json/.test(contentType)) {\n      return response.json();\n    }\n\n    if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n      return response.text();\n    }\n\n    return getBufferResponse(response);\n  }).then(data => {\n    return {\n      status,\n      url,\n      headers,\n      data\n    };\n  }).catch(error => {\n    if (error instanceof requestError.RequestError) {\n      throw error;\n    }\n\n    throw new requestError.RequestError(error.message, 500, {\n      headers,\n      request: requestOptions\n    });\n  });\n}\n\nfunction withDefaults(oldEndpoint, newDefaults) {\n  const endpoint = oldEndpoint.defaults(newDefaults);\n\n  const newApi = function (route, parameters) {\n    const endpointOptions = endpoint.merge(route, parameters);\n\n    if (!endpointOptions.request || !endpointOptions.request.hook) {\n      return fetchWrapper(endpoint.parse(endpointOptions));\n    }\n\n    const request = (route, parameters) => {\n      return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));\n    };\n\n    Object.assign(request, {\n      endpoint,\n      defaults: withDefaults.bind(null, endpoint)\n    });\n    return endpointOptions.request.hook(request, endpointOptions);\n  };\n\n  return Object.assign(newApi, {\n    endpoint,\n    defaults: withDefaults.bind(null, endpoint)\n  });\n}\n\nconst request = withDefaults(endpoint.endpoint, {\n  headers: {\n    \"user-agent\": `octokit-request.js/${VERSION} ${universalUserAgent.getUserAgent()}`\n  }\n});\n\nexports.request = request;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/request/dist-src/fetch-wrapper.js":"import { isPlainObject } from \"is-plain-object\";\nimport nodeFetch from \"node-fetch\";\nimport { RequestError } from \"@octokit/request-error\";\nimport getBuffer from \"./get-buffer-response\";\nexport default function fetchWrapper(requestOptions) {\n    if (isPlainObject(requestOptions.body) ||\n        Array.isArray(requestOptions.body)) {\n        requestOptions.body = JSON.stringify(requestOptions.body);\n    }\n    let headers = {};\n    let status;\n    let url;\n    const fetch = (requestOptions.request && requestOptions.request.fetch) || nodeFetch;\n    return fetch(requestOptions.url, Object.assign({\n        method: requestOptions.method,\n        body: requestOptions.body,\n        headers: requestOptions.headers,\n        redirect: requestOptions.redirect,\n    }, requestOptions.request))\n        .then((response) => {\n        url = response.url;\n        status = response.status;\n        for (const keyAndValue of response.headers) {\n            headers[keyAndValue[0]] = keyAndValue[1];\n        }\n        if (status === 204 || status === 205) {\n            return;\n        }\n        // GitHub API returns 200 for HEAD requests\n        if (requestOptions.method === \"HEAD\") {\n            if (status < 400) {\n                return;\n            }\n            throw new RequestError(response.statusText, status, {\n                headers,\n                request: requestOptions,\n            });\n        }\n        if (status === 304) {\n            throw new RequestError(\"Not modified\", status, {\n                headers,\n                request: requestOptions,\n            });\n        }\n        if (status >= 400) {\n            return response\n                .text()\n                .then((message) => {\n                const error = new RequestError(message, status, {\n                    headers,\n                    request: requestOptions,\n                });\n                try {\n                    let responseBody = JSON.parse(error.message);\n                    Object.assign(error, responseBody);\n                    let errors = responseBody.errors;\n                    // Assumption `errors` would always be in Array format\n                    error.message =\n                        error.message + \": \" + errors.map(JSON.stringify).join(\", \");\n                }\n                catch (e) {\n                    // ignore, see octokit/rest.js#684\n                }\n                throw error;\n            });\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (/application\\/json/.test(contentType)) {\n            return response.json();\n        }\n        if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n            return response.text();\n        }\n        return getBuffer(response);\n    })\n        .then((data) => {\n        return {\n            status,\n            url,\n            headers,\n            data,\n        };\n    })\n        .catch((error) => {\n        if (error instanceof RequestError) {\n            throw error;\n        }\n        throw new RequestError(error.message, 500, {\n            headers,\n            request: requestOptions,\n        });\n    });\n}\n","node_modules/@octokit/request/dist-src/get-buffer-response.js":"export default function getBufferResponse(response) {\n    return response.arrayBuffer();\n}\n","node_modules/@octokit/request/dist-src/index.js":"import { endpoint } from \"@octokit/endpoint\";\nimport { getUserAgent } from \"universal-user-agent\";\nimport { VERSION } from \"./version\";\nimport withDefaults from \"./with-defaults\";\nexport const request = withDefaults(endpoint, {\n    headers: {\n        \"user-agent\": `octokit-request.js/${VERSION} ${getUserAgent()}`,\n    },\n});\n","node_modules/@octokit/request/dist-src/version.js":"export const VERSION = \"5.4.14\";\n","node_modules/@octokit/request/dist-src/with-defaults.js":"import fetchWrapper from \"./fetch-wrapper\";\nexport default function withDefaults(oldEndpoint, newDefaults) {\n    const endpoint = oldEndpoint.defaults(newDefaults);\n    const newApi = function (route, parameters) {\n        const endpointOptions = endpoint.merge(route, parameters);\n        if (!endpointOptions.request || !endpointOptions.request.hook) {\n            return fetchWrapper(endpoint.parse(endpointOptions));\n        }\n        const request = (route, parameters) => {\n            return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));\n        };\n        Object.assign(request, {\n            endpoint,\n            defaults: withDefaults.bind(null, endpoint),\n        });\n        return endpointOptions.request.hook(request, endpointOptions);\n    };\n    return Object.assign(newApi, {\n        endpoint,\n        defaults: withDefaults.bind(null, endpoint),\n    });\n}\n","node_modules/@octokit/request/dist-types/fetch-wrapper.d.ts":"import { EndpointInterface } from \"@octokit/types\";\nexport default function fetchWrapper(requestOptions: ReturnType<EndpointInterface> & {\n    redirect?: \"error\" | \"follow\" | \"manual\";\n}): Promise<{\n    status: number;\n    url: string;\n    headers: {\n        [header: string]: string;\n    };\n    data: any;\n}>;\n","node_modules/@octokit/request/dist-types/get-buffer-response.d.ts":"import { Response } from \"node-fetch\";\nexport default function getBufferResponse(response: Response): Promise<ArrayBuffer>;\n","node_modules/@octokit/request/dist-types/index.d.ts":"export declare const request: import(\"@octokit/types\").RequestInterface<object>;\n","node_modules/@octokit/request/dist-types/version.d.ts":"export declare const VERSION = \"5.4.14\";\n","node_modules/@octokit/request/dist-types/with-defaults.d.ts":"import { EndpointInterface, RequestInterface, RequestParameters } from \"@octokit/types\";\nexport default function withDefaults(oldEndpoint: EndpointInterface, newDefaults: RequestParameters): RequestInterface;\n","node_modules/@octokit/request/dist-web/index.js":"import { endpoint } from '@octokit/endpoint';\nimport { getUserAgent } from 'universal-user-agent';\nimport { isPlainObject } from 'is-plain-object';\nimport nodeFetch from 'node-fetch';\nimport { RequestError } from '@octokit/request-error';\n\nconst VERSION = \"5.4.14\";\n\nfunction getBufferResponse(response) {\n    return response.arrayBuffer();\n}\n\nfunction fetchWrapper(requestOptions) {\n    if (isPlainObject(requestOptions.body) ||\n        Array.isArray(requestOptions.body)) {\n        requestOptions.body = JSON.stringify(requestOptions.body);\n    }\n    let headers = {};\n    let status;\n    let url;\n    const fetch = (requestOptions.request && requestOptions.request.fetch) || nodeFetch;\n    return fetch(requestOptions.url, Object.assign({\n        method: requestOptions.method,\n        body: requestOptions.body,\n        headers: requestOptions.headers,\n        redirect: requestOptions.redirect,\n    }, requestOptions.request))\n        .then((response) => {\n        url = response.url;\n        status = response.status;\n        for (const keyAndValue of response.headers) {\n            headers[keyAndValue[0]] = keyAndValue[1];\n        }\n        if (status === 204 || status === 205) {\n            return;\n        }\n        // GitHub API returns 200 for HEAD requests\n        if (requestOptions.method === \"HEAD\") {\n            if (status < 400) {\n                return;\n            }\n            throw new RequestError(response.statusText, status, {\n                headers,\n                request: requestOptions,\n            });\n        }\n        if (status === 304) {\n            throw new RequestError(\"Not modified\", status, {\n                headers,\n                request: requestOptions,\n            });\n        }\n        if (status >= 400) {\n            return response\n                .text()\n                .then((message) => {\n                const error = new RequestError(message, status, {\n                    headers,\n                    request: requestOptions,\n                });\n                try {\n                    let responseBody = JSON.parse(error.message);\n                    Object.assign(error, responseBody);\n                    let errors = responseBody.errors;\n                    // Assumption `errors` would always be in Array format\n                    error.message =\n                        error.message + \": \" + errors.map(JSON.stringify).join(\", \");\n                }\n                catch (e) {\n                    // ignore, see octokit/rest.js#684\n                }\n                throw error;\n            });\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (/application\\/json/.test(contentType)) {\n            return response.json();\n        }\n        if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n            return response.text();\n        }\n        return getBufferResponse(response);\n    })\n        .then((data) => {\n        return {\n            status,\n            url,\n            headers,\n            data,\n        };\n    })\n        .catch((error) => {\n        if (error instanceof RequestError) {\n            throw error;\n        }\n        throw new RequestError(error.message, 500, {\n            headers,\n            request: requestOptions,\n        });\n    });\n}\n\nfunction withDefaults(oldEndpoint, newDefaults) {\n    const endpoint = oldEndpoint.defaults(newDefaults);\n    const newApi = function (route, parameters) {\n        const endpointOptions = endpoint.merge(route, parameters);\n        if (!endpointOptions.request || !endpointOptions.request.hook) {\n            return fetchWrapper(endpoint.parse(endpointOptions));\n        }\n        const request = (route, parameters) => {\n            return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));\n        };\n        Object.assign(request, {\n            endpoint,\n            defaults: withDefaults.bind(null, endpoint),\n        });\n        return endpointOptions.request.hook(request, endpointOptions);\n    };\n    return Object.assign(newApi, {\n        endpoint,\n        defaults: withDefaults.bind(null, endpoint),\n    });\n}\n\nconst request = withDefaults(endpoint, {\n    headers: {\n        \"user-agent\": `octokit-request.js/${VERSION} ${getUserAgent()}`,\n    },\n});\n\nexport { request };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/request-error/package.json":"{\n  \"name\": \"@octokit/request-error\",\n  \"description\": \"Error class for Octokit request errors\",\n  \"version\": \"2.0.5\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"octokit\",\n    \"github\",\n    \"api\",\n    \"error\"\n  ],\n  \"homepage\": \"https://github.com/octokit/request-error.js#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/octokit/request-error.js/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/octokit/request-error.js.git\"\n  },\n  \"dependencies\": {\n    \"@octokit/types\": \"^6.0.3\",\n    \"deprecation\": \"^2.0.0\",\n    \"once\": \"^1.4.0\"\n  },\n  \"devDependencies\": {\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-bundle-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/node\": \"^14.0.4\",\n    \"@types/once\": \"^1.4.0\",\n    \"jest\": \"^26.0.0\",\n    \"pika-plugin-unpkg-field\": \"^1.1.0\",\n    \"prettier\": \"^2.0.1\",\n    \"semantic-release\": \"^17.0.0\",\n    \"ts-jest\": \"^26.0.0\",\n    \"typescript\": \"^4.0.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/request-error/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar deprecation = require('deprecation');\nvar once = _interopDefault(require('once'));\n\nconst logOnce = once(deprecation => console.warn(deprecation));\n/**\n * Error with extra properties to help with debugging\n */\n\nclass RequestError extends Error {\n  constructor(message, statusCode, options) {\n    super(message); // Maintains proper stack trace (only available on V8)\n\n    /* istanbul ignore next */\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = \"HttpError\";\n    this.status = statusCode;\n    Object.defineProperty(this, \"code\", {\n      get() {\n        logOnce(new deprecation.Deprecation(\"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"));\n        return statusCode;\n      }\n\n    });\n    this.headers = options.headers || {}; // redact request credentials without mutating original request options\n\n    const requestCopy = Object.assign({}, options.request);\n\n    if (options.request.headers.authorization) {\n      requestCopy.headers = Object.assign({}, options.request.headers, {\n        authorization: options.request.headers.authorization.replace(/ .*$/, \" [REDACTED]\")\n      });\n    }\n\n    requestCopy.url = requestCopy.url // client_id & client_secret can be passed as URL query parameters to increase rate limit\n    // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications\n    .replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\") // OAuth tokens can be passed as URL query parameters, although it is not recommended\n    // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header\n    .replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n    this.request = requestCopy;\n  }\n\n}\n\nexports.RequestError = RequestError;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/request-error/dist-src/index.js":"import { Deprecation } from \"deprecation\";\nimport once from \"once\";\nconst logOnce = once((deprecation) => console.warn(deprecation));\n/**\n * Error with extra properties to help with debugging\n */\nexport class RequestError extends Error {\n    constructor(message, statusCode, options) {\n        super(message);\n        // Maintains proper stack trace (only available on V8)\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this.name = \"HttpError\";\n        this.status = statusCode;\n        Object.defineProperty(this, \"code\", {\n            get() {\n                logOnce(new Deprecation(\"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"));\n                return statusCode;\n            },\n        });\n        this.headers = options.headers || {};\n        // redact request credentials without mutating original request options\n        const requestCopy = Object.assign({}, options.request);\n        if (options.request.headers.authorization) {\n            requestCopy.headers = Object.assign({}, options.request.headers, {\n                authorization: options.request.headers.authorization.replace(/ .*$/, \" [REDACTED]\"),\n            });\n        }\n        requestCopy.url = requestCopy.url\n            // client_id & client_secret can be passed as URL query parameters to increase rate limit\n            // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications\n            .replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\")\n            // OAuth tokens can be passed as URL query parameters, although it is not recommended\n            // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header\n            .replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n        this.request = requestCopy;\n    }\n}\n","node_modules/@octokit/request-error/dist-src/types.js":"export {};\n","node_modules/@octokit/request-error/dist-types/index.d.ts":"import { RequestOptions, ResponseHeaders } from \"@octokit/types\";\nimport { RequestErrorOptions } from \"./types\";\n/**\n * Error with extra properties to help with debugging\n */\nexport declare class RequestError extends Error {\n    name: \"HttpError\";\n    /**\n     * http status code\n     */\n    status: number;\n    /**\n     * http status code\n     *\n     * @deprecated `error.code` is deprecated in favor of `error.status`\n     */\n    code: number;\n    /**\n     * error response headers\n     */\n    headers: ResponseHeaders;\n    /**\n     * Request options that lead to the error.\n     */\n    request: RequestOptions;\n    constructor(message: string, statusCode: number, options: RequestErrorOptions);\n}\n","node_modules/@octokit/request-error/dist-types/types.d.ts":"import { RequestOptions, ResponseHeaders } from \"@octokit/types\";\nexport declare type RequestErrorOptions = {\n    headers?: ResponseHeaders;\n    request: RequestOptions;\n};\n","node_modules/@octokit/request-error/dist-web/index.js":"import { Deprecation } from 'deprecation';\nimport once from 'once';\n\nconst logOnce = once((deprecation) => console.warn(deprecation));\n/**\n * Error with extra properties to help with debugging\n */\nclass RequestError extends Error {\n    constructor(message, statusCode, options) {\n        super(message);\n        // Maintains proper stack trace (only available on V8)\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this.name = \"HttpError\";\n        this.status = statusCode;\n        Object.defineProperty(this, \"code\", {\n            get() {\n                logOnce(new Deprecation(\"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"));\n                return statusCode;\n            },\n        });\n        this.headers = options.headers || {};\n        // redact request credentials without mutating original request options\n        const requestCopy = Object.assign({}, options.request);\n        if (options.request.headers.authorization) {\n            requestCopy.headers = Object.assign({}, options.request.headers, {\n                authorization: options.request.headers.authorization.replace(/ .*$/, \" [REDACTED]\"),\n            });\n        }\n        requestCopy.url = requestCopy.url\n            // client_id & client_secret can be passed as URL query parameters to increase rate limit\n            // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications\n            .replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\")\n            // OAuth tokens can be passed as URL query parameters, although it is not recommended\n            // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header\n            .replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n        this.request = requestCopy;\n    }\n}\n\nexport { RequestError };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/rest/package.json":"{\n  \"name\": \"@octokit/rest\",\n  \"description\": \"GitHub REST API client for Node.js\",\n  \"version\": \"18.1.1\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"octokit\",\n    \"github\",\n    \"rest\",\n    \"api-client\"\n  ],\n  \"contributors\": [\n    {\n      \"name\": \"Mike de Boer\",\n      \"email\": \"info@mikedeboer.nl\"\n    },\n    {\n      \"name\": \"Fabian Jakobs\",\n      \"email\": \"fabian@c9.io\"\n    },\n    {\n      \"name\": \"Joe Gallo\",\n      \"email\": \"joe@brassafrax.com\"\n    },\n    {\n      \"name\": \"Gregor Martynus\",\n      \"url\": \"https://github.com/gr2m\"\n    }\n  ],\n  \"repository\": \"https://github.com/octokit/rest.js\",\n  \"dependencies\": {\n    \"@octokit/core\": \"^3.2.3\",\n    \"@octokit/plugin-paginate-rest\": \"^2.6.2\",\n    \"@octokit/plugin-request-log\": \"^1.0.2\",\n    \"@octokit/plugin-rest-endpoint-methods\": \"4.10.3\"\n  },\n  \"devDependencies\": {\n    \"@octokit/auth\": \"^3.0.1\",\n    \"@octokit/fixtures-server\": \"^6.0.11\",\n    \"@octokit/request\": \"^5.2.0\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.2\",\n    \"@pika/plugin-build-web\": \"^0.9.2\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.2\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/node\": \"^14.0.1\",\n    \"fetch-mock\": \"^9.0.0\",\n    \"jest\": \"^26.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"ts-jest\": \"^26.0.0\",\n    \"typescript\": \"^4.0.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/rest/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@octokit/core');\nvar pluginRequestLog = require('@octokit/plugin-request-log');\nvar pluginPaginateRest = require('@octokit/plugin-paginate-rest');\nvar pluginRestEndpointMethods = require('@octokit/plugin-rest-endpoint-methods');\n\nconst VERSION = \"18.1.1\";\n\nconst Octokit = core.Octokit.plugin(pluginRequestLog.requestLog, pluginRestEndpointMethods.restEndpointMethods, pluginPaginateRest.paginateRest).defaults({\n  userAgent: `octokit-rest.js/${VERSION}`\n});\n\nexports.Octokit = Octokit;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/rest/dist-src/index.js":"import { Octokit as Core } from \"@octokit/core\";\nimport { requestLog } from \"@octokit/plugin-request-log\";\nimport { paginateRest } from \"@octokit/plugin-paginate-rest\";\nimport { restEndpointMethods } from \"@octokit/plugin-rest-endpoint-methods\";\nimport { VERSION } from \"./version\";\nexport const Octokit = Core.plugin(requestLog, restEndpointMethods, paginateRest).defaults({\n    userAgent: `octokit-rest.js/${VERSION}`,\n});\n","node_modules/@octokit/rest/dist-src/version.js":"export const VERSION = \"18.1.1\";\n","node_modules/@octokit/rest/dist-types/index.d.ts":"import { Octokit as Core } from \"@octokit/core\";\nexport { RestEndpointMethodTypes } from \"@octokit/plugin-rest-endpoint-methods\";\nexport declare const Octokit: (new (...args: any[]) => {\n    [x: string]: any;\n}) & {\n    new (...args: any[]): {\n        [x: string]: any;\n    };\n    plugins: any[];\n} & typeof Core & import(\"@octokit/core/dist-types/types\").Constructor<void & {\n    paginate: import(\"@octokit/plugin-paginate-rest\").PaginateInterface;\n} & import(\"@octokit/plugin-rest-endpoint-methods/dist-types/generated/method-types\").RestEndpointMethods>;\nexport declare type Octokit = InstanceType<typeof Octokit>;\n","node_modules/@octokit/rest/dist-types/version.d.ts":"export declare const VERSION = \"18.1.1\";\n","node_modules/@octokit/rest/dist-web/index.js":"import { Octokit as Octokit$1 } from '@octokit/core';\nimport { requestLog } from '@octokit/plugin-request-log';\nimport { paginateRest } from '@octokit/plugin-paginate-rest';\nimport { restEndpointMethods } from '@octokit/plugin-rest-endpoint-methods';\n\nconst VERSION = \"18.1.1\";\n\nconst Octokit = Octokit$1.plugin(requestLog, restEndpointMethods, paginateRest).defaults({\n    userAgent: `octokit-rest.js/${VERSION}`,\n});\n\nexport { Octokit };\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/types/package.json":"{\n  \"name\": \"@octokit/types\",\n  \"description\": \"Shared TypeScript definitions for Octokit projects\",\n  \"version\": \"6.8.5\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist-*/\",\n    \"bin/\"\n  ],\n  \"pika\": true,\n  \"sideEffects\": false,\n  \"keywords\": [\n    \"github\",\n    \"api\",\n    \"sdk\",\n    \"toolkit\",\n    \"typescript\"\n  ],\n  \"repository\": \"https://github.com/octokit/types.ts\",\n  \"dependencies\": {\n    \"@octokit/openapi-types\": \"^4.0.3\"\n  },\n  \"devDependencies\": {\n    \"@octokit/graphql\": \"^4.2.2\",\n    \"@pika/pack\": \"^0.5.0\",\n    \"@pika/plugin-build-node\": \"^0.9.0\",\n    \"@pika/plugin-build-web\": \"^0.9.0\",\n    \"@pika/plugin-ts-standard-pkg\": \"^0.9.0\",\n    \"@types/node\": \">= 8\",\n    \"handlebars\": \"^4.7.6\",\n    \"json-schema-to-typescript\": \"^10.0.0\",\n    \"lodash.set\": \"^4.3.2\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"pascal-case\": \"^3.1.1\",\n    \"pika-plugin-merge-properties\": \"^1.0.6\",\n    \"prettier\": \"^2.0.0\",\n    \"semantic-release\": \"^17.0.0\",\n    \"semantic-release-plugin-update-version-in-files\": \"^1.0.0\",\n    \"sort-keys\": \"^4.0.0\",\n    \"string-to-jsdoc-comment\": \"^1.0.0\",\n    \"typedoc\": \"^0.20.0\",\n    \"typescript\": \"^4.0.2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"source\": \"dist-src/index.js\",\n  \"types\": \"dist-types/index.d.ts\",\n  \"octokit\": {\n    \"openapi-version\": \"2.9.2\"\n  },\n  \"main\": \"dist-node/index.js\",\n  \"module\": \"dist-web/index.js\"\n}\n","node_modules/@octokit/types/dist-node/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst VERSION = \"6.8.5\";\n\nexports.VERSION = VERSION;\n//# sourceMappingURL=index.js.map\n","node_modules/@octokit/types/dist-src/AuthInterface.js":"export {};\n","node_modules/@octokit/types/dist-src/EndpointDefaults.js":"export {};\n","node_modules/@octokit/types/dist-src/EndpointInterface.js":"export {};\n","node_modules/@octokit/types/dist-src/EndpointOptions.js":"export {};\n","node_modules/@octokit/types/dist-src/Fetch.js":"export {};\n","node_modules/@octokit/types/dist-src/GetResponseTypeFromEndpointMethod.js":"export {};\n","node_modules/@octokit/types/dist-src/OctokitResponse.js":"export {};\n","node_modules/@octokit/types/dist-src/RequestError.js":"export {};\n","node_modules/@octokit/types/dist-src/RequestHeaders.js":"export {};\n","node_modules/@octokit/types/dist-src/RequestInterface.js":"export {};\n","node_modules/@octokit/types/dist-src/RequestMethod.js":"export {};\n","node_modules/@octokit/types/dist-src/RequestOptions.js":"export {};\n","node_modules/@octokit/types/dist-src/RequestParameters.js":"export {};\n","node_modules/@octokit/types/dist-src/RequestRequestOptions.js":"export {};\n","node_modules/@octokit/types/dist-src/ResponseHeaders.js":"export {};\n","node_modules/@octokit/types/dist-src/Route.js":"export {};\n","node_modules/@octokit/types/dist-src/Signal.js":"export {};\n","node_modules/@octokit/types/dist-src/StrategyInterface.js":"export {};\n","node_modules/@octokit/types/dist-src/Url.js":"export {};\n","node_modules/@octokit/types/dist-src/VERSION.js":"export const VERSION = \"6.8.5\";\n","node_modules/@octokit/types/dist-src/index.js":"export * from \"./AuthInterface\";\nexport * from \"./EndpointDefaults\";\nexport * from \"./EndpointInterface\";\nexport * from \"./EndpointOptions\";\nexport * from \"./Fetch\";\nexport * from \"./OctokitResponse\";\nexport * from \"./RequestError\";\nexport * from \"./RequestHeaders\";\nexport * from \"./RequestInterface\";\nexport * from \"./RequestMethod\";\nexport * from \"./RequestOptions\";\nexport * from \"./RequestParameters\";\nexport * from \"./RequestRequestOptions\";\nexport * from \"./ResponseHeaders\";\nexport * from \"./Route\";\nexport * from \"./Signal\";\nexport * from \"./StrategyInterface\";\nexport * from \"./Url\";\nexport * from \"./VERSION\";\nexport * from \"./GetResponseTypeFromEndpointMethod\";\nexport * from \"./generated/Endpoints\";\n","node_modules/@octokit/types/dist-src/generated/Endpoints.js":"export {};\n","node_modules/@octokit/types/dist-types/AuthInterface.d.ts":"import { EndpointOptions } from \"./EndpointOptions\";\nimport { OctokitResponse } from \"./OctokitResponse\";\nimport { RequestInterface } from \"./RequestInterface\";\nimport { RequestParameters } from \"./RequestParameters\";\nimport { Route } from \"./Route\";\n/**\n * Interface to implement complex authentication strategies for Octokit.\n * An object Implementing the AuthInterface can directly be passed as the\n * `auth` option in the Octokit constructor.\n *\n * For the official implementations of the most common authentication\n * strategies, see https://github.com/octokit/auth.js\n */\nexport interface AuthInterface<AuthOptions extends any[], Authentication extends any> {\n    (...args: AuthOptions): Promise<Authentication>;\n    hook: {\n        /**\n         * Sends a request using the passed `request` instance\n         *\n         * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <T = any>(request: RequestInterface, options: EndpointOptions): Promise<OctokitResponse<T>>;\n        /**\n         * Sends a request using the passed `request` instance\n         *\n         * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n         * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <T = any>(request: RequestInterface, route: Route, parameters?: RequestParameters): Promise<OctokitResponse<T>>;\n    };\n}\n","node_modules/@octokit/types/dist-types/EndpointDefaults.d.ts":"import { RequestHeaders } from \"./RequestHeaders\";\nimport { RequestMethod } from \"./RequestMethod\";\nimport { RequestParameters } from \"./RequestParameters\";\nimport { Url } from \"./Url\";\n/**\n * The `.endpoint()` method is guaranteed to set all keys defined by RequestParameters\n * as well as the method property.\n */\nexport declare type EndpointDefaults = RequestParameters & {\n    baseUrl: Url;\n    method: RequestMethod;\n    url?: Url;\n    headers: RequestHeaders & {\n        accept: string;\n        \"user-agent\": string;\n    };\n    mediaType: {\n        format: string;\n        previews: string[];\n    };\n};\n","node_modules/@octokit/types/dist-types/EndpointInterface.d.ts":"import { EndpointDefaults } from \"./EndpointDefaults\";\nimport { RequestOptions } from \"./RequestOptions\";\nimport { RequestParameters } from \"./RequestParameters\";\nimport { Route } from \"./Route\";\nimport { Endpoints } from \"./generated/Endpoints\";\nexport interface EndpointInterface<D extends object = object> {\n    /**\n     * Transforms a GitHub REST API endpoint into generic request options\n     *\n     * @param {object} endpoint Must set `url` unless it's set defaults. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <O extends RequestParameters = RequestParameters>(options: O & {\n        method?: string;\n    } & (\"url\" extends keyof D ? {\n        url?: string;\n    } : {\n        url: string;\n    })): RequestOptions & Pick<D & O, keyof RequestOptions>;\n    /**\n     * Transforms a GitHub REST API endpoint into generic request options\n     *\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <R extends Route, P extends RequestParameters = R extends keyof Endpoints ? Endpoints[R][\"parameters\"] & RequestParameters : RequestParameters>(route: keyof Endpoints | R, parameters?: P): (R extends keyof Endpoints ? Endpoints[R][\"request\"] : RequestOptions) & Pick<P, keyof RequestOptions>;\n    /**\n     * Object with current default route and parameters\n     */\n    DEFAULTS: D & EndpointDefaults;\n    /**\n     * Returns a new `endpoint` interface with new defaults\n     */\n    defaults: <O extends RequestParameters = RequestParameters>(newDefaults: O) => EndpointInterface<D & O>;\n    merge: {\n        /**\n         * Merges current endpoint defaults with passed route and parameters,\n         * without transforming them into request options.\n         *\n         * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n         * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         *\n         */\n        <R extends Route, P extends RequestParameters = R extends keyof Endpoints ? Endpoints[R][\"parameters\"] & RequestParameters : RequestParameters>(route: keyof Endpoints | R, parameters?: P): D & (R extends keyof Endpoints ? Endpoints[R][\"request\"] & Endpoints[R][\"parameters\"] : EndpointDefaults) & P;\n        /**\n         * Merges current endpoint defaults with passed route and parameters,\n         * without transforming them into request options.\n         *\n         * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n         */\n        <P extends RequestParameters = RequestParameters>(options: P): EndpointDefaults & D & P;\n        /**\n         * Returns current default options.\n         *\n         * @deprecated use endpoint.DEFAULTS instead\n         */\n        (): D & EndpointDefaults;\n    };\n    /**\n     * Stateless method to turn endpoint options into request options.\n     * Calling `endpoint(options)` is the same as calling `endpoint.parse(endpoint.merge(options))`.\n     *\n     * @param {object} options `method`, `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    parse: <O extends EndpointDefaults = EndpointDefaults>(options: O) => RequestOptions & Pick<O, keyof RequestOptions>;\n}\n","node_modules/@octokit/types/dist-types/EndpointOptions.d.ts":"import { RequestMethod } from \"./RequestMethod\";\nimport { Url } from \"./Url\";\nimport { RequestParameters } from \"./RequestParameters\";\nexport declare type EndpointOptions = RequestParameters & {\n    method: RequestMethod;\n    url: Url;\n};\n","node_modules/@octokit/types/dist-types/Fetch.d.ts":"/**\n * Browser's fetch method (or compatible such as fetch-mock)\n */\nexport declare type Fetch = any;\n","node_modules/@octokit/types/dist-types/GetResponseTypeFromEndpointMethod.d.ts":"declare type Unwrap<T> = T extends Promise<infer U> ? U : T;\ndeclare type AnyFunction = (...args: any[]) => any;\nexport declare type GetResponseTypeFromEndpointMethod<T extends AnyFunction> = Unwrap<ReturnType<T>>;\nexport declare type GetResponseDataTypeFromEndpointMethod<T extends AnyFunction> = Unwrap<ReturnType<T>>[\"data\"];\nexport {};\n","node_modules/@octokit/types/dist-types/OctokitResponse.d.ts":"import { ResponseHeaders } from \"./ResponseHeaders\";\nimport { Url } from \"./Url\";\nexport declare type OctokitResponse<T, S extends number = number> = {\n    headers: ResponseHeaders;\n    /**\n     * http response code\n     */\n    status: S;\n    /**\n     * URL of response after all redirects\n     */\n    url: Url;\n    /**\n     *  This is the data you would see in https://developer.Octokit.com/v3/\n     */\n    data: T;\n};\n","node_modules/@octokit/types/dist-types/RequestError.d.ts":"export declare type RequestError = {\n    name: string;\n    status: number;\n    documentation_url: string;\n    errors?: Array<{\n        resource: string;\n        code: string;\n        field: string;\n        message?: string;\n    }>;\n};\n","node_modules/@octokit/types/dist-types/RequestHeaders.d.ts":"export declare type RequestHeaders = {\n    /**\n     * Avoid setting `headers.accept`, use `mediaType.{format|previews}` option instead.\n     */\n    accept?: string;\n    /**\n     * Use `authorization` to send authenticated request, remember `token ` / `bearer ` prefixes. Example: `token 1234567890abcdef1234567890abcdef12345678`\n     */\n    authorization?: string;\n    /**\n     * `user-agent` is set do a default and can be overwritten as needed.\n     */\n    \"user-agent\"?: string;\n    [header: string]: string | number | undefined;\n};\n","node_modules/@octokit/types/dist-types/RequestInterface.d.ts":"import { EndpointInterface } from \"./EndpointInterface\";\nimport { OctokitResponse } from \"./OctokitResponse\";\nimport { RequestParameters } from \"./RequestParameters\";\nimport { Route } from \"./Route\";\nimport { Endpoints } from \"./generated/Endpoints\";\nexport interface RequestInterface<D extends object = object> {\n    /**\n     * Sends a request based on endpoint options\n     *\n     * @param {object} endpoint Must set `method` and `url`. Plus URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <T = any, O extends RequestParameters = RequestParameters>(options: O & {\n        method?: string;\n    } & (\"url\" extends keyof D ? {\n        url?: string;\n    } : {\n        url: string;\n    })): Promise<OctokitResponse<T>>;\n    /**\n     * Sends a request based on endpoint options\n     *\n     * @param {string} route Request method + URL. Example: `'GET /orgs/{org}'`\n     * @param {object} [parameters] URL, query or body parameters, as well as `headers`, `mediaType.{format|previews}`, `request`, or `baseUrl`.\n     */\n    <R extends Route>(route: keyof Endpoints | R, options?: R extends keyof Endpoints ? Endpoints[R][\"parameters\"] & RequestParameters : RequestParameters): R extends keyof Endpoints ? Promise<Endpoints[R][\"response\"]> : Promise<OctokitResponse<any>>;\n    /**\n     * Returns a new `request` with updated route and parameters\n     */\n    defaults: <O extends RequestParameters = RequestParameters>(newDefaults: O) => RequestInterface<D & O>;\n    /**\n     * Octokit endpoint API, see {@link https://github.com/octokit/endpoint.js|@octokit/endpoint}\n     */\n    endpoint: EndpointInterface<D>;\n}\n","node_modules/@octokit/types/dist-types/RequestMethod.d.ts":"/**\n * HTTP Verb supported by GitHub's REST API\n */\nexport declare type RequestMethod = \"DELETE\" | \"GET\" | \"HEAD\" | \"PATCH\" | \"POST\" | \"PUT\";\n","node_modules/@octokit/types/dist-types/RequestOptions.d.ts":"import { RequestHeaders } from \"./RequestHeaders\";\nimport { RequestMethod } from \"./RequestMethod\";\nimport { RequestRequestOptions } from \"./RequestRequestOptions\";\nimport { Url } from \"./Url\";\n/**\n * Generic request options as they are returned by the `endpoint()` method\n */\nexport declare type RequestOptions = {\n    method: RequestMethod;\n    url: Url;\n    headers: RequestHeaders;\n    body?: any;\n    request?: RequestRequestOptions;\n};\n","node_modules/@octokit/types/dist-types/RequestParameters.d.ts":"import { RequestRequestOptions } from \"./RequestRequestOptions\";\nimport { RequestHeaders } from \"./RequestHeaders\";\nimport { Url } from \"./Url\";\n/**\n * Parameters that can be passed into `request(route, parameters)` or `endpoint(route, parameters)` methods\n */\nexport declare type RequestParameters = {\n    /**\n     * Base URL to be used when a relative URL is passed, such as `/orgs/{org}`.\n     * If `baseUrl` is `https://enterprise.acme-inc.com/api/v3`, then the request\n     * will be sent to `https://enterprise.acme-inc.com/api/v3/orgs/{org}`.\n     */\n    baseUrl?: Url;\n    /**\n     * HTTP headers. Use lowercase keys.\n     */\n    headers?: RequestHeaders;\n    /**\n     * Media type options, see {@link https://developer.github.com/v3/media/|GitHub Developer Guide}\n     */\n    mediaType?: {\n        /**\n         * `json` by default. Can be `raw`, `text`, `html`, `full`, `diff`, `patch`, `sha`, `base64`. Depending on endpoint\n         */\n        format?: string;\n        /**\n         * Custom media type names of {@link https://developer.github.com/v3/media/|API Previews} without the `-preview` suffix.\n         * Example for single preview: `['squirrel-girl']`.\n         * Example for multiple previews: `['squirrel-girl', 'mister-fantastic']`.\n         */\n        previews?: string[];\n    };\n    /**\n     * Pass custom meta information for the request. The `request` object will be returned as is.\n     */\n    request?: RequestRequestOptions;\n    /**\n     * Any additional parameter will be passed as follows\n     * 1. URL parameter if `':parameter'` or `{parameter}` is part of `url`\n     * 2. Query parameter if `method` is `'GET'` or `'HEAD'`\n     * 3. Request body if `parameter` is `'data'`\n     * 4. JSON in the request body in the form of `body[parameter]` unless `parameter` key is `'data'`\n     */\n    [parameter: string]: unknown;\n};\n","node_modules/@octokit/types/dist-types/RequestRequestOptions.d.ts":"import { Fetch } from \"./Fetch\";\nimport { Signal } from \"./Signal\";\n/**\n * Octokit-specific request options which are ignored for the actual request, but can be used by Octokit or plugins to manipulate how the request is sent or how a response is handled\n */\nexport declare type RequestRequestOptions = {\n    /**\n     * Node only. Useful for custom proxy, certificate, or dns lookup.\n     *\n     * @see https://nodejs.org/api/http.html#http_class_http_agent\n     */\n    agent?: unknown;\n    /**\n     * Custom replacement for built-in fetch method. Useful for testing or request hooks.\n     */\n    fetch?: Fetch;\n    /**\n     * Use an `AbortController` instance to cancel a request. In node you can only cancel streamed requests.\n     */\n    signal?: Signal;\n    /**\n     * Node only. Request/response timeout in ms, it resets on redirect. 0 to disable (OS limit applies). `options.request.signal` is recommended instead.\n     */\n    timeout?: number;\n    [option: string]: any;\n};\n","node_modules/@octokit/types/dist-types/ResponseHeaders.d.ts":"export declare type ResponseHeaders = {\n    \"cache-control\"?: string;\n    \"content-length\"?: number;\n    \"content-type\"?: string;\n    date?: string;\n    etag?: string;\n    \"last-modified\"?: string;\n    link?: string;\n    location?: string;\n    server?: string;\n    status?: string;\n    vary?: string;\n    \"x-github-mediatype\"?: string;\n    \"x-github-request-id\"?: string;\n    \"x-oauth-scopes\"?: string;\n    \"x-ratelimit-limit\"?: string;\n    \"x-ratelimit-remaining\"?: string;\n    \"x-ratelimit-reset\"?: string;\n    [header: string]: string | number | undefined;\n};\n","node_modules/@octokit/types/dist-types/Route.d.ts":"/**\n * String consisting of an optional HTTP method and relative path or absolute URL. Examples: `'/orgs/{org}'`, `'PUT /orgs/{org}'`, `GET https://example.com/foo/bar`\n */\nexport declare type Route = string;\n","node_modules/@octokit/types/dist-types/Signal.d.ts":"/**\n * Abort signal\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\n */\nexport declare type Signal = any;\n","node_modules/@octokit/types/dist-types/StrategyInterface.d.ts":"import { AuthInterface } from \"./AuthInterface\";\nexport interface StrategyInterface<StrategyOptions extends any[], AuthOptions extends any[], Authentication extends object> {\n    (...args: StrategyOptions): AuthInterface<AuthOptions, Authentication>;\n}\n","node_modules/@octokit/types/dist-types/Url.d.ts":"/**\n * Relative or absolute URL. Examples: `'/orgs/{org}'`, `https://example.com/foo/bar`\n */\nexport declare type Url = string;\n","node_modules/@octokit/types/dist-types/VERSION.d.ts":"export declare const VERSION = \"6.8.5\";\n","node_modules/@octokit/types/dist-types/index.d.ts":"export * from \"./AuthInterface\";\nexport * from \"./EndpointDefaults\";\nexport * from \"./EndpointInterface\";\nexport * from \"./EndpointOptions\";\nexport * from \"./Fetch\";\nexport * from \"./OctokitResponse\";\nexport * from \"./RequestError\";\nexport * from \"./RequestHeaders\";\nexport * from \"./RequestInterface\";\nexport * from \"./RequestMethod\";\nexport * from \"./RequestOptions\";\nexport * from \"./RequestParameters\";\nexport * from \"./RequestRequestOptions\";\nexport * from \"./ResponseHeaders\";\nexport * from \"./Route\";\nexport * from \"./Signal\";\nexport * from \"./StrategyInterface\";\nexport * from \"./Url\";\nexport * from \"./VERSION\";\nexport * from \"./GetResponseTypeFromEndpointMethod\";\nexport * from \"./generated/Endpoints\";\n","node_modules/@octokit/types/dist-types/generated/Endpoints.d.ts":"import { paths } from \"@octokit/openapi-types\";\nimport { OctokitResponse } from \"../OctokitResponse\";\nimport { RequestHeaders } from \"../RequestHeaders\";\nimport { RequestRequestOptions } from \"../RequestRequestOptions\";\ndeclare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\ndeclare type ExtractParameters<T> = \"parameters\" extends keyof T ? UnionToIntersection<{\n    [K in keyof T[\"parameters\"]]: T[\"parameters\"][K];\n}[keyof T[\"parameters\"]]> : {};\ndeclare type ExtractRequestBody<T> = \"requestBody\" extends keyof T ? \"content\" extends keyof T[\"requestBody\"] ? \"application/json\" extends keyof T[\"requestBody\"][\"content\"] ? T[\"requestBody\"][\"content\"][\"application/json\"] : {\n    data: {\n        [K in keyof T[\"requestBody\"][\"content\"]]: T[\"requestBody\"][\"content\"][K];\n    }[keyof T[\"requestBody\"][\"content\"]];\n} : \"application/json\" extends keyof T[\"requestBody\"] ? T[\"requestBody\"][\"application/json\"] : {\n    data: {\n        [K in keyof T[\"requestBody\"]]: T[\"requestBody\"][K];\n    }[keyof T[\"requestBody\"]];\n} : {};\ndeclare type ToOctokitParameters<T> = ExtractParameters<T> & ExtractRequestBody<T>;\ndeclare type RequiredPreview<T> = T extends string ? {\n    mediaType: {\n        previews: [T, ...string[]];\n    };\n} : {};\ndeclare type Operation<Url extends keyof paths, Method extends keyof paths[Url], preview = unknown> = {\n    parameters: ToOctokitParameters<paths[Url][Method]> & RequiredPreview<preview>;\n    request: {\n        method: Method extends keyof MethodsMap ? MethodsMap[Method] : never;\n        url: Url;\n        headers: RequestHeaders;\n        request: RequestRequestOptions;\n    };\n    response: Url extends keyof EndpointsWithMissingRequiredResponseDataSchema ? Method extends EndpointsWithMissingRequiredResponseDataSchema[Url] ? DeepRequired<ExtractOctokitResponse<paths[Url][Method]>> : ExtractOctokitResponse<paths[Url][Method]> : ExtractOctokitResponse<paths[Url][Method]>;\n};\ndeclare type MethodsMap = {\n    delete: \"DELETE\";\n    get: \"GET\";\n    patch: \"PATCH\";\n    post: \"POST\";\n    put: \"PUT\";\n};\ndeclare type SuccessStatuses = 200 | 201 | 204;\ndeclare type RedirectStatuses = 301 | 302;\ndeclare type EmptyResponseStatuses = 201 | 204;\ndeclare type KnownJsonResponseTypes = \"application/json\" | \"application/scim+json\" | \"text/html\";\ndeclare type SuccessResponseDataType<Responses> = {\n    [K in SuccessStatuses & keyof Responses]: GetContentKeyIfPresent<Responses[K]> extends never ? never : OctokitResponse<GetContentKeyIfPresent<Responses[K]>, K>;\n}[SuccessStatuses & keyof Responses];\ndeclare type RedirectResponseDataType<Responses> = {\n    [K in RedirectStatuses & keyof Responses]: OctokitResponse<unknown, K>;\n}[RedirectStatuses & keyof Responses];\ndeclare type EmptyResponseDataType<Responses> = {\n    [K in EmptyResponseStatuses & keyof Responses]: OctokitResponse<never, K>;\n}[EmptyResponseStatuses & keyof Responses];\ndeclare type GetContentKeyIfPresent<T> = \"content\" extends keyof T ? DataType<T[\"content\"]> : DataType<T>;\ndeclare type DataType<T> = {\n    [K in KnownJsonResponseTypes & keyof T]: T[K];\n}[KnownJsonResponseTypes & keyof T];\ndeclare type ExtractOctokitResponse<R> = \"responses\" extends keyof R ? SuccessResponseDataType<R[\"responses\"]> extends never ? RedirectResponseDataType<R[\"responses\"]> extends never ? EmptyResponseDataType<R[\"responses\"]> : RedirectResponseDataType<R[\"responses\"]> : SuccessResponseDataType<R[\"responses\"]> : unknown;\ndeclare type EndpointsWithMissingRequiredResponseDataSchema = {\n    \"/app/hook/config\": \"get\" | \"patch\";\n    \"/app/installations/{installation_id}/access_tokens\": \"post\";\n    \"/emojis\": \"get\";\n    \"/enterprises/{enterprise}/actions/permissions\": \"get\";\n    \"/enterprises/{enterprise}/actions/permissions/organizations\": \"get\";\n    \"/enterprises/{enterprise}/actions/permissions/selected-actions\": \"get\";\n    \"/enterprises/{enterprise}/actions/runner-groups\": \"get\" | \"post\";\n    \"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}\": \"get\" | \"patch\";\n    \"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\": \"get\";\n    \"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\": \"get\";\n    \"/enterprises/{enterprise}/actions/runners\": \"get\";\n    \"/enterprises/{enterprise}/actions/runners/downloads\": \"get\";\n    \"/enterprises/{enterprise}/settings/billing/actions\": \"get\";\n    \"/enterprises/{enterprise}/settings/billing/packages\": \"get\";\n    \"/enterprises/{enterprise}/settings/billing/shared-storage\": \"get\";\n    \"/installation/repositories\": \"get\";\n    \"/notifications\": \"get\";\n    \"/notifications/threads/{thread_id}\": \"get\";\n    \"/orgs/{org}/actions/permissions\": \"get\";\n    \"/orgs/{org}/actions/permissions/repositories\": \"get\";\n    \"/orgs/{org}/actions/permissions/selected-actions\": \"get\";\n    \"/orgs/{org}/actions/runner-groups\": \"get\" | \"post\";\n    \"/orgs/{org}/actions/runner-groups/{runner_group_id}\": \"get\" | \"patch\";\n    \"/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\": \"get\";\n    \"/orgs/{org}/actions/runner-groups/{runner_group_id}/runners\": \"get\";\n    \"/orgs/{org}/actions/runners\": \"get\";\n    \"/orgs/{org}/actions/runners/downloads\": \"get\";\n    \"/orgs/{org}/actions/secrets\": \"get\";\n    \"/orgs/{org}/actions/secrets/{secret_name}/repositories\": \"get\";\n    \"/orgs/{org}/hooks/{hook_id}/config\": \"get\" | \"patch\";\n    \"/orgs/{org}/installations\": \"get\";\n    \"/orgs/{org}/invitations\": \"get\" | \"post\";\n    \"/orgs/{org}/settings/billing/actions\": \"get\";\n    \"/orgs/{org}/settings/billing/packages\": \"get\";\n    \"/orgs/{org}/settings/billing/shared-storage\": \"get\";\n    \"/orgs/{org}/team-sync/groups\": \"get\";\n    \"/orgs/{org}/teams/{team_slug}/invitations\": \"get\";\n    \"/orgs/{org}/teams/{team_slug}/projects\": \"get\";\n    \"/orgs/{org}/teams/{team_slug}/projects/{project_id}\": \"get\";\n    \"/orgs/{org}/teams/{team_slug}/team-sync/group-mappings\": \"get\" | \"patch\";\n    \"/projects/columns/cards/{card_id}/moves\": \"post\";\n    \"/projects/columns/{column_id}/moves\": \"post\";\n    \"/repos/{owner}/{repo}/actions/artifacts\": \"get\";\n    \"/repos/{owner}/{repo}/actions/permissions\": \"get\";\n    \"/repos/{owner}/{repo}/actions/permissions/selected-actions\": \"get\";\n    \"/repos/{owner}/{repo}/actions/runners\": \"get\";\n    \"/repos/{owner}/{repo}/actions/runners/downloads\": \"get\";\n    \"/repos/{owner}/{repo}/actions/runs\": \"get\";\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\": \"get\";\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/jobs\": \"get\";\n    \"/repos/{owner}/{repo}/actions/runs/{run_id}/timing\": \"get\";\n    \"/repos/{owner}/{repo}/actions/secrets\": \"get\";\n    \"/repos/{owner}/{repo}/actions/workflows\": \"get\";\n    \"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\": \"get\";\n    \"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\": \"get\";\n    \"/repos/{owner}/{repo}/check-suites/preferences\": \"patch\";\n    \"/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\": \"get\";\n    \"/repos/{owner}/{repo}/code-scanning/alerts\": \"get\";\n    \"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\": \"get\" | \"patch\";\n    \"/repos/{owner}/{repo}/code-scanning/analyses\": \"get\";\n    \"/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\": \"get\";\n    \"/repos/{owner}/{repo}/commits/{ref}/check-runs\": \"get\";\n    \"/repos/{owner}/{repo}/commits/{ref}/check-suites\": \"get\";\n    \"/repos/{owner}/{repo}/commits/{ref}/statuses\": \"get\";\n    \"/repos/{owner}/{repo}/contents/{path}\": \"put\" | \"delete\";\n    \"/repos/{owner}/{repo}/git/blobs\": \"post\";\n    \"/repos/{owner}/{repo}/git/commits\": \"post\";\n    \"/repos/{owner}/{repo}/git/commits/{commit_sha}\": \"get\";\n    \"/repos/{owner}/{repo}/git/matching-refs/{ref}\": \"get\";\n    \"/repos/{owner}/{repo}/git/ref/{ref}\": \"get\";\n    \"/repos/{owner}/{repo}/git/refs\": \"post\";\n    \"/repos/{owner}/{repo}/git/refs/{ref}\": \"patch\";\n    \"/repos/{owner}/{repo}/hooks/{hook_id}/config\": \"get\" | \"patch\";\n    \"/repos/{owner}/{repo}/issues/{issue_number}/events\": \"get\";\n    \"/repos/{owner}/{repo}/issues/{issue_number}/timeline\": \"get\";\n    \"/repos/{owner}/{repo}/keys\": \"get\" | \"post\";\n    \"/repos/{owner}/{repo}/keys/{key_id}\": \"get\";\n    \"/repos/{owner}/{repo}/languages\": \"get\";\n    \"/repos/{owner}/{repo}/notifications\": \"get\";\n    \"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\": \"get\";\n    \"/repos/{owner}/{repo}/stats/participation\": \"get\";\n    \"/repos/{owner}/{repo}/statuses/{sha}\": \"post\";\n    \"/repos/{owner}/{repo}/topics\": \"get\" | \"put\";\n    \"/scim/v2/enterprises/{enterprise}/Groups\": \"get\" | \"post\";\n    \"/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\": \"get\" | \"put\" | \"patch\";\n    \"/scim/v2/enterprises/{enterprise}/Users\": \"get\" | \"post\";\n    \"/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\": \"get\" | \"put\" | \"patch\";\n    \"/search/code\": \"get\";\n    \"/search/commits\": \"get\";\n    \"/search/issues\": \"get\";\n    \"/search/labels\": \"get\";\n    \"/search/repositories\": \"get\";\n    \"/search/topics\": \"get\";\n    \"/search/users\": \"get\";\n    \"/teams/{team_id}/invitations\": \"get\";\n    \"/teams/{team_id}/projects\": \"get\";\n    \"/teams/{team_id}/projects/{project_id}\": \"get\";\n    \"/teams/{team_id}/team-sync/group-mappings\": \"get\" | \"patch\";\n    \"/user/installations\": \"get\";\n    \"/user/installations/{installation_id}/repositories\": \"get\";\n    \"/user/keys\": \"get\" | \"post\";\n    \"/user/keys/{key_id}\": \"get\";\n    \"/users/{username}/settings/billing/actions\": \"get\";\n    \"/users/{username}/settings/billing/packages\": \"get\";\n    \"/users/{username}/settings/billing/shared-storage\": \"get\";\n};\ndeclare type NotNill<T> = T extends null | undefined ? never : T;\ndeclare type Primitive = undefined | null | boolean | string | number | Function;\ndeclare type DeepRequired<T> = T extends Primitive ? NotNill<T> : {\n    [P in keyof T]-?: T[P] extends Array<infer U> ? Array<DeepRequired<U>> : T[P] extends ReadonlyArray<infer U2> ? DeepRequired<U2> : DeepRequired<T[P]>;\n};\nexport interface Endpoints {\n    /**\n     * @see https://docs.github.com/v3/apps/#delete-an-installation-for-the-authenticated-app\n     */\n    \"DELETE /app/installations/{installation_id}\": Operation<\"/app/installations/{installation_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#unsuspend-an-app-installation\n     */\n    \"DELETE /app/installations/{installation_id}/suspended\": Operation<\"/app/installations/{installation_id}/suspended\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#delete-a-grant\n     */\n    \"DELETE /applications/grants/{grant_id}\": Operation<\"/applications/grants/{grant_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#delete-an-app-authorization\n     */\n    \"DELETE /applications/{client_id}/grant\": Operation<\"/applications/{client_id}/grant\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#revoke-a-grant-for-an-application\n     */\n    \"DELETE /applications/{client_id}/grants/{access_token}\": Operation<\"/applications/{client_id}/grants/{access_token}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#delete-an-app-token\n     */\n    \"DELETE /applications/{client_id}/token\": Operation<\"/applications/{client_id}/token\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#revoke-an-authorization-for-an-application\n     */\n    \"DELETE /applications/{client_id}/tokens/{access_token}\": Operation<\"/applications/{client_id}/tokens/{access_token}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#delete-an-authorization\n     */\n    \"DELETE /authorizations/{authorization_id}\": Operation<\"/authorizations/{authorization_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#disable-a-selected-organization-for-github-actions-in-an-enterprise\n     */\n    \"DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\": Operation<\"/enterprises/{enterprise}/actions/permissions/organizations/{org_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#delete-a-self-hosted-runner-group-from-an-enterprise\n     */\n    \"DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise\n     */\n    \"DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#remove-a-self-hosted-runner-from-a-group-for-an-enterprise\n     */\n    \"DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#delete-self-hosted-runner-from-an-enterprise\n     */\n    \"DELETE /enterprises/{enterprise}/actions/runners/{runner_id}\": Operation<\"/enterprises/{enterprise}/actions/runners/{runner_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#delete-a-gist\n     */\n    \"DELETE /gists/{gist_id}\": Operation<\"/gists/{gist_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/gists#delete-a-gist-comment\n     */\n    \"DELETE /gists/{gist_id}/comments/{comment_id}\": Operation<\"/gists/{gist_id}/comments/{comment_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#unstar-a-gist\n     */\n    \"DELETE /gists/{gist_id}/star\": Operation<\"/gists/{gist_id}/star\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token\n     */\n    \"DELETE /installation/token\": Operation<\"/installation/token\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#delete-a-thread-subscription\n     */\n    \"DELETE /notifications/threads/{thread_id}/subscription\": Operation<\"/notifications/threads/{thread_id}/subscription\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization\n     */\n    \"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\": Operation<\"/orgs/{org}/actions/permissions/repositories/{repository_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization\n     */\n    \"DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization\n     */\n    \"DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization\n     */\n    \"DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization\n     */\n    \"DELETE /orgs/{org}/actions/runners/{runner_id}\": Operation<\"/orgs/{org}/actions/runners/{runner_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#delete-an-organization-secret\n     */\n    \"DELETE /orgs/{org}/actions/secrets/{secret_name}\": Operation<\"/orgs/{org}/actions/secrets/{secret_name}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret\n     */\n    \"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\": Operation<\"/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization\n     */\n    \"DELETE /orgs/{org}/blocks/{username}\": Operation<\"/orgs/{org}/blocks/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization\n     */\n    \"DELETE /orgs/{org}/credential-authorizations/{credential_id}\": Operation<\"/orgs/{org}/credential-authorizations/{credential_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook\n     */\n    \"DELETE /orgs/{org}/hooks/{hook_id}\": Operation<\"/orgs/{org}/hooks/{hook_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization\n     */\n    \"DELETE /orgs/{org}/interaction-limits\": Operation<\"/orgs/{org}/interaction-limits\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation\n     */\n    \"DELETE /orgs/{org}/invitations/{invitation_id}\": Operation<\"/orgs/{org}/invitations/{invitation_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#remove-an-organization-member\n     */\n    \"DELETE /orgs/{org}/members/{username}\": Operation<\"/orgs/{org}/members/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#remove-organization-membership-for-a-user\n     */\n    \"DELETE /orgs/{org}/memberships/{username}\": Operation<\"/orgs/{org}/memberships/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#delete-an-organization-migration-archive\n     */\n    \"DELETE /orgs/{org}/migrations/{migration_id}/archive\": Operation<\"/orgs/{org}/migrations/{migration_id}/archive\", \"delete\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#unlock-an-organization-repository\n     */\n    \"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\": Operation<\"/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\", \"delete\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization\n     */\n    \"DELETE /orgs/{org}/outside_collaborators/{username}\": Operation<\"/orgs/{org}/outside_collaborators/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user\n     */\n    \"DELETE /orgs/{org}/public_members/{username}\": Operation<\"/orgs/{org}/public_members/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#delete-a-team\n     */\n    \"DELETE /orgs/{org}/teams/{team_slug}\": Operation<\"/orgs/{org}/teams/{team_slug}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#delete-a-discussion\n     */\n    \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#delete-a-discussion-comment\n     */\n    \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#delete-team-discussion-comment-reaction\n     */\n    \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\", \"delete\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#delete-team-discussion-reaction\n     */\n    \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\", \"delete\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user\n     */\n    \"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\": Operation<\"/orgs/{org}/teams/{team_slug}/memberships/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#remove-a-project-from-a-team\n     */\n    \"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\": Operation<\"/orgs/{org}/teams/{team_slug}/projects/{project_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#remove-a-repository-from-a-team\n     */\n    \"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\": Operation<\"/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#delete-a-project-card\n     */\n    \"DELETE /projects/columns/cards/{card_id}\": Operation<\"/projects/columns/cards/{card_id}\", \"delete\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#delete-a-project-column\n     */\n    \"DELETE /projects/columns/{column_id}\": Operation<\"/projects/columns/{column_id}\", \"delete\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#delete-a-project\n     */\n    \"DELETE /projects/{project_id}\": Operation<\"/projects/{project_id}\", \"delete\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#remove-project-collaborator\n     */\n    \"DELETE /projects/{project_id}/collaborators/{username}\": Operation<\"/projects/{project_id}/collaborators/{username}\", \"delete\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#delete-a-reaction-legacy\n     */\n    \"DELETE /reactions/{reaction_id}\": Operation<\"/reactions/{reaction_id}\", \"delete\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#delete-a-repository\n     */\n    \"DELETE /repos/{owner}/{repo}\": Operation<\"/repos/{owner}/{repo}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#delete-an-artifact\n     */\n    \"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\": Operation<\"/repos/{owner}/{repo}/actions/artifacts/{artifact_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository\n     */\n    \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\": Operation<\"/repos/{owner}/{repo}/actions/runners/{runner_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#delete-a-workflow-run\n     */\n    \"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#delete-workflow-run-logs\n     */\n    \"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}/logs\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#delete-a-repository-secret\n     */\n    \"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\": Operation<\"/repos/{owner}/{repo}/actions/secrets/{secret_name}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#disable-automated-security-fixes\n     */\n    \"DELETE /repos/{owner}/{repo}/automated-security-fixes\": Operation<\"/repos/{owner}/{repo}/automated-security-fixes\", \"delete\", \"london\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-branch-protection\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-admin-branch-protection\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-pull-request-review-protection\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-commit-signature-protection\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", \"delete\", \"zzzax\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#remove-status-check-protection\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#remove-status-check-contexts\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-access-restrictions\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#remove-app-access-restrictions\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#remove-team-access-restrictions\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#remove-user-access-restrictions\n     */\n    \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#remove-a-repository-collaborator\n     */\n    \"DELETE /repos/{owner}/{repo}/collaborators/{username}\": Operation<\"/repos/{owner}/{repo}/collaborators/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-commit-comment\n     */\n    \"DELETE /repos/{owner}/{repo}/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/comments/{comment_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#delete-a-commit-comment-reaction\n     */\n    \"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\": Operation<\"/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\", \"delete\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-file\n     */\n    \"DELETE /repos/{owner}/{repo}/contents/{path}\": Operation<\"/repos/{owner}/{repo}/contents/{path}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-deployment\n     */\n    \"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\": Operation<\"/repos/{owner}/{repo}/deployments/{deployment_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#delete-a-reference\n     */\n    \"DELETE /repos/{owner}/{repo}/git/refs/{ref}\": Operation<\"/repos/{owner}/{repo}/git/refs/{ref}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-repository-webhook\n     */\n    \"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\": Operation<\"/repos/{owner}/{repo}/hooks/{hook_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#cancel-an-import\n     */\n    \"DELETE /repos/{owner}/{repo}/import\": Operation<\"/repos/{owner}/{repo}/import\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository\n     */\n    \"DELETE /repos/{owner}/{repo}/interaction-limits\": Operation<\"/repos/{owner}/{repo}/interaction-limits\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-repository-invitation\n     */\n    \"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\": Operation<\"/repos/{owner}/{repo}/invitations/{invitation_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#delete-an-issue-comment\n     */\n    \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/issues/comments/{comment_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#delete-an-issue-comment-reaction\n     */\n    \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\": Operation<\"/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\", \"delete\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue\n     */\n    \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/assignees\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue\n     */\n    \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/labels\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue\n     */\n    \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#unlock-an-issue\n     */\n    \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/lock\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#delete-an-issue-reaction\n     */\n    \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\", \"delete\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-deploy-key\n     */\n    \"DELETE /repos/{owner}/{repo}/keys/{key_id}\": Operation<\"/repos/{owner}/{repo}/keys/{key_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#delete-a-label\n     */\n    \"DELETE /repos/{owner}/{repo}/labels/{name}\": Operation<\"/repos/{owner}/{repo}/labels/{name}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#delete-a-milestone\n     */\n    \"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\": Operation<\"/repos/{owner}/{repo}/milestones/{milestone_number}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-github-pages-site\n     */\n    \"DELETE /repos/{owner}/{repo}/pages\": Operation<\"/repos/{owner}/{repo}/pages\", \"delete\", \"switcheroo\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request\n     */\n    \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/pulls/comments/{comment_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#delete-a-pull-request-comment-reaction\n     */\n    \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\": Operation<\"/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\", \"delete\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request\n     */\n    \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request\n     */\n    \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-release-asset\n     */\n    \"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\": Operation<\"/repos/{owner}/{repo}/releases/assets/{asset_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#delete-a-release\n     */\n    \"DELETE /repos/{owner}/{repo}/releases/{release_id}\": Operation<\"/repos/{owner}/{repo}/releases/{release_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#delete-a-repository-subscription\n     */\n    \"DELETE /repos/{owner}/{repo}/subscription\": Operation<\"/repos/{owner}/{repo}/subscription\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#disable-vulnerability-alerts\n     */\n    \"DELETE /repos/{owner}/{repo}/vulnerability-alerts\": Operation<\"/repos/{owner}/{repo}/vulnerability-alerts\", \"delete\", \"dorian\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-group-from-an-enterprise\n     */\n    \"DELETE /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\": Operation<\"/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise\n     */\n    \"DELETE /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\": Operation<\"/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/scim/#delete-a-scim-user-from-an-organization\n     */\n    \"DELETE /scim/v2/organizations/{org}/Users/{scim_user_id}\": Operation<\"/scim/v2/organizations/{org}/Users/{scim_user_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#delete-a-team-legacy\n     */\n    \"DELETE /teams/{team_id}\": Operation<\"/teams/{team_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy\n     */\n    \"DELETE /teams/{team_id}/discussions/{discussion_number}\": Operation<\"/teams/{team_id}/discussions/{discussion_number}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy\n     */\n    \"DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#remove-team-member-legacy\n     */\n    \"DELETE /teams/{team_id}/members/{username}\": Operation<\"/teams/{team_id}/members/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy\n     */\n    \"DELETE /teams/{team_id}/memberships/{username}\": Operation<\"/teams/{team_id}/memberships/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#remove-a-project-from-a-team-legacy\n     */\n    \"DELETE /teams/{team_id}/projects/{project_id}\": Operation<\"/teams/{team_id}/projects/{project_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#remove-a-repository-from-a-team-legacy\n     */\n    \"DELETE /teams/{team_id}/repos/{owner}/{repo}\": Operation<\"/teams/{team_id}/repos/{owner}/{repo}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#unblock-a-user\n     */\n    \"DELETE /user/blocks/{username}\": Operation<\"/user/blocks/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user\n     */\n    \"DELETE /user/emails\": Operation<\"/user/emails\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#unfollow-a-user\n     */\n    \"DELETE /user/following/{username}\": Operation<\"/user/following/{username}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user\n     */\n    \"DELETE /user/gpg_keys/{gpg_key_id}\": Operation<\"/user/gpg_keys/{gpg_key_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation\n     */\n    \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\": Operation<\"/user/installations/{installation_id}/repositories/{repository_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories\n     */\n    \"DELETE /user/interaction-limits\": Operation<\"/user/interaction-limits\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user\n     */\n    \"DELETE /user/keys/{key_id}\": Operation<\"/user/keys/{key_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#delete-a-user-migration-archive\n     */\n    \"DELETE /user/migrations/{migration_id}/archive\": Operation<\"/user/migrations/{migration_id}/archive\", \"delete\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#unlock-a-user-repository\n     */\n    \"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\": Operation<\"/user/migrations/{migration_id}/repos/{repo_name}/lock\", \"delete\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#decline-a-repository-invitation\n     */\n    \"DELETE /user/repository_invitations/{invitation_id}\": Operation<\"/user/repository_invitations/{invitation_id}\", \"delete\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user\n     */\n    \"DELETE /user/starred/{owner}/{repo}\": Operation<\"/user/starred/{owner}/{repo}\", \"delete\">;\n    /**\n     * @see\n     */\n    \"GET /\": Operation<\"/\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#get-the-authenticated-app\n     */\n    \"GET /app\": Operation<\"/app\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps#get-a-webhook-configuration-for-an-app\n     */\n    \"GET /app/hook/config\": Operation<\"/app/hook/config\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#list-installations-for-the-authenticated-app\n     */\n    \"GET /app/installations\": Operation<\"/app/installations\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#get-an-installation-for-the-authenticated-app\n     */\n    \"GET /app/installations/{installation_id}\": Operation<\"/app/installations/{installation_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#list-your-grants\n     */\n    \"GET /applications/grants\": Operation<\"/applications/grants\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-grant\n     */\n    \"GET /applications/grants/{grant_id}\": Operation<\"/applications/grants/{grant_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#check-an-authorization\n     */\n    \"GET /applications/{client_id}/tokens/{access_token}\": Operation<\"/applications/{client_id}/tokens/{access_token}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#get-an-app\n     */\n    \"GET /apps/{app_slug}\": Operation<\"/apps/{app_slug}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations\n     */\n    \"GET /authorizations\": Operation<\"/authorizations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-authorization\n     */\n    \"GET /authorizations/{authorization_id}\": Operation<\"/authorizations/{authorization_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct\n     */\n    \"GET /codes_of_conduct\": Operation<\"/codes_of_conduct\", \"get\", \"scarlet-witch\">;\n    /**\n     * @see https://docs.github.com/v3/codes_of_conduct/#get-a-code-of-conduct\n     */\n    \"GET /codes_of_conduct/{key}\": Operation<\"/codes_of_conduct/{key}\", \"get\", \"scarlet-witch\">;\n    /**\n     * @see https://docs.github.com/v3/emojis/#get-emojis\n     */\n    \"GET /emojis\": Operation<\"/emojis\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#get-github-actions-permissions-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/permissions\": Operation<\"/enterprises/{enterprise}/actions/permissions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-selected-organizations-enabled-for-github-actions-in-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/permissions/organizations\": Operation<\"/enterprises/{enterprise}/actions/permissions/organizations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#get-allowed-actions-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/permissions/selected-actions\": Operation<\"/enterprises/{enterprise}/actions/permissions/selected-actions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runner-groups-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runner-groups\": Operation<\"/enterprises/{enterprise}/actions/runner-groups\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-group-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-in-a-group-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runners\": Operation<\"/enterprises/{enterprise}/actions/runners\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-runner-applications-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runners/downloads\": Operation<\"/enterprises/{enterprise}/actions/runners/downloads\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/actions/runners/{runner_id}\": Operation<\"/enterprises/{enterprise}/actions/runners/{runner_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/audit-log\": Operation<\"/enterprises/{enterprise}/audit-log\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-github-actions-billing-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/settings/billing/actions\": Operation<\"/enterprises/{enterprise}/settings/billing/actions\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-github-packages-billing-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/settings/billing/packages\": Operation<\"/enterprises/{enterprise}/settings/billing/packages\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-shared-storage-billing-for-an-enterprise\n     */\n    \"GET /enterprises/{enterprise}/settings/billing/shared-storage\": Operation<\"/enterprises/{enterprise}/settings/billing/shared-storage\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-events\n     */\n    \"GET /events\": Operation<\"/events\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#get-feeds\n     */\n    \"GET /feeds\": Operation<\"/feeds\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#list-gists-for-the-authenticated-user\n     */\n    \"GET /gists\": Operation<\"/gists\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#list-public-gists\n     */\n    \"GET /gists/public\": Operation<\"/gists/public\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#list-starred-gists\n     */\n    \"GET /gists/starred\": Operation<\"/gists/starred\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#get-a-gist\n     */\n    \"GET /gists/{gist_id}\": Operation<\"/gists/{gist_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/gists#list-gist-comments\n     */\n    \"GET /gists/{gist_id}/comments\": Operation<\"/gists/{gist_id}/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/gists#get-a-gist-comment\n     */\n    \"GET /gists/{gist_id}/comments/{comment_id}\": Operation<\"/gists/{gist_id}/comments/{comment_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#list-gist-commits\n     */\n    \"GET /gists/{gist_id}/commits\": Operation<\"/gists/{gist_id}/commits\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#list-gist-forks\n     */\n    \"GET /gists/{gist_id}/forks\": Operation<\"/gists/{gist_id}/forks\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#check-if-a-gist-is-starred\n     */\n    \"GET /gists/{gist_id}/star\": Operation<\"/gists/{gist_id}/star\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#get-a-gist-revision\n     */\n    \"GET /gists/{gist_id}/{sha}\": Operation<\"/gists/{gist_id}/{sha}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gitignore/#get-all-gitignore-templates\n     */\n    \"GET /gitignore/templates\": Operation<\"/gitignore/templates\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gitignore/#get-a-gitignore-template\n     */\n    \"GET /gitignore/templates/{name}\": Operation<\"/gitignore/templates/{name}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation\n     */\n    \"GET /installation/repositories\": Operation<\"/installation/repositories\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#list-issues-assigned-to-the-authenticated-user\n     */\n    \"GET /issues\": Operation<\"/issues\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/licenses/#get-all-commonly-used-licenses\n     */\n    \"GET /licenses\": Operation<\"/licenses\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/licenses/#get-a-license\n     */\n    \"GET /licenses/{license}\": Operation<\"/licenses/{license}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account\n     */\n    \"GET /marketplace_listing/accounts/{account_id}\": Operation<\"/marketplace_listing/accounts/{account_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-plans\n     */\n    \"GET /marketplace_listing/plans\": Operation<\"/marketplace_listing/plans\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan\n     */\n    \"GET /marketplace_listing/plans/{plan_id}/accounts\": Operation<\"/marketplace_listing/plans/{plan_id}/accounts\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account-stubbed\n     */\n    \"GET /marketplace_listing/stubbed/accounts/{account_id}\": Operation<\"/marketplace_listing/stubbed/accounts/{account_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-plans-stubbed\n     */\n    \"GET /marketplace_listing/stubbed/plans\": Operation<\"/marketplace_listing/stubbed/plans\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed\n     */\n    \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\": Operation<\"/marketplace_listing/stubbed/plans/{plan_id}/accounts\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/meta/#get-github-meta-information\n     */\n    \"GET /meta\": Operation<\"/meta\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories\n     */\n    \"GET /networks/{owner}/{repo}/events\": Operation<\"/networks/{owner}/{repo}/events\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user\n     */\n    \"GET /notifications\": Operation<\"/notifications\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#get-a-thread\n     */\n    \"GET /notifications/threads/{thread_id}\": Operation<\"/notifications/threads/{thread_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user\n     */\n    \"GET /notifications/threads/{thread_id}/subscription\": Operation<\"/notifications/threads/{thread_id}/subscription\", \"get\">;\n    /**\n     * @see\n     */\n    \"GET /octocat\": Operation<\"/octocat\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-organizations\n     */\n    \"GET /organizations\": Operation<\"/organizations\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/orgs/#get-an-organization\n     */\n    \"GET /orgs/{org}\": Operation<\"/orgs/{org}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/permissions\": Operation<\"/orgs/{org}/actions/permissions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization\n     */\n    \"GET /orgs/{org}/actions/permissions/repositories\": Operation<\"/orgs/{org}/actions/permissions/repositories\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/permissions/selected-actions\": Operation<\"/orgs/{org}/actions/permissions/selected-actions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runner-groups\": Operation<\"/orgs/{org}/actions/runner-groups\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization\n     */\n    \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}/runners\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runners\": Operation<\"/orgs/{org}/actions/runners\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runners/downloads\": Operation<\"/orgs/{org}/actions/runners/downloads\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization\n     */\n    \"GET /orgs/{org}/actions/runners/{runner_id}\": Operation<\"/orgs/{org}/actions/runners/{runner_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-organization-secrets\n     */\n    \"GET /orgs/{org}/actions/secrets\": Operation<\"/orgs/{org}/actions/secrets\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-an-organization-public-key\n     */\n    \"GET /orgs/{org}/actions/secrets/public-key\": Operation<\"/orgs/{org}/actions/secrets/public-key\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-an-organization-secret\n     */\n    \"GET /orgs/{org}/actions/secrets/{secret_name}\": Operation<\"/orgs/{org}/actions/secrets/{secret_name}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret\n     */\n    \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\": Operation<\"/orgs/{org}/actions/secrets/{secret_name}/repositories\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#get-the-audit-log-for-an-organization\n     */\n    \"GET /orgs/{org}/audit-log\": Operation<\"/orgs/{org}/audit-log\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization\n     */\n    \"GET /orgs/{org}/blocks\": Operation<\"/orgs/{org}/blocks\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization\n     */\n    \"GET /orgs/{org}/blocks/{username}\": Operation<\"/orgs/{org}/blocks/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization\n     */\n    \"GET /orgs/{org}/credential-authorizations\": Operation<\"/orgs/{org}/credential-authorizations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-organization-events\n     */\n    \"GET /orgs/{org}/events\": Operation<\"/orgs/{org}/events\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations\n     */\n    \"GET /orgs/{org}/failed_invitations\": Operation<\"/orgs/{org}/failed_invitations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-organization-webhooks\n     */\n    \"GET /orgs/{org}/hooks\": Operation<\"/orgs/{org}/hooks\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#get-an-organization-webhook\n     */\n    \"GET /orgs/{org}/hooks/{hook_id}\": Operation<\"/orgs/{org}/hooks/{hook_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/orgs#get-a-webhook-configuration-for-an-organization\n     */\n    \"GET /orgs/{org}/hooks/{hook_id}/config\": Operation<\"/orgs/{org}/hooks/{hook_id}/config\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#get-an-organization-installation-for-the-authenticated-app\n     */\n    \"GET /orgs/{org}/installation\": Operation<\"/orgs/{org}/installation\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-app-installations-for-an-organization\n     */\n    \"GET /orgs/{org}/installations\": Operation<\"/orgs/{org}/installations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization\n     */\n    \"GET /orgs/{org}/interaction-limits\": Operation<\"/orgs/{org}/interaction-limits\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations\n     */\n    \"GET /orgs/{org}/invitations\": Operation<\"/orgs/{org}/invitations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams\n     */\n    \"GET /orgs/{org}/invitations/{invitation_id}/teams\": Operation<\"/orgs/{org}/invitations/{invitation_id}/teams\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#list-organization-issues-assigned-to-the-authenticated-user\n     */\n    \"GET /orgs/{org}/issues\": Operation<\"/orgs/{org}/issues\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-organization-members\n     */\n    \"GET /orgs/{org}/members\": Operation<\"/orgs/{org}/members\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user\n     */\n    \"GET /orgs/{org}/members/{username}\": Operation<\"/orgs/{org}/members/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user\n     */\n    \"GET /orgs/{org}/memberships/{username}\": Operation<\"/orgs/{org}/memberships/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#list-organization-migrations\n     */\n    \"GET /orgs/{org}/migrations\": Operation<\"/orgs/{org}/migrations\", \"get\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#get-an-organization-migration-status\n     */\n    \"GET /orgs/{org}/migrations/{migration_id}\": Operation<\"/orgs/{org}/migrations/{migration_id}\", \"get\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#download-an-organization-migration-archive\n     */\n    \"GET /orgs/{org}/migrations/{migration_id}/archive\": Operation<\"/orgs/{org}/migrations/{migration_id}/archive\", \"get\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#list-repositories-in-an-organization-migration\n     */\n    \"GET /orgs/{org}/migrations/{migration_id}/repositories\": Operation<\"/orgs/{org}/migrations/{migration_id}/repositories\", \"get\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization\n     */\n    \"GET /orgs/{org}/outside_collaborators\": Operation<\"/orgs/{org}/outside_collaborators\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#list-organization-projects\n     */\n    \"GET /orgs/{org}/projects\": Operation<\"/orgs/{org}/projects\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-public-organization-members\n     */\n    \"GET /orgs/{org}/public_members\": Operation<\"/orgs/{org}/public_members\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user\n     */\n    \"GET /orgs/{org}/public_members/{username}\": Operation<\"/orgs/{org}/public_members/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#list-organization-repositories\n     */\n    \"GET /orgs/{org}/repos\": Operation<\"/orgs/{org}/repos\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-github-actions-billing-for-an-organization\n     */\n    \"GET /orgs/{org}/settings/billing/actions\": Operation<\"/orgs/{org}/settings/billing/actions\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-github-packages-billing-for-an-organization\n     */\n    \"GET /orgs/{org}/settings/billing/packages\": Operation<\"/orgs/{org}/settings/billing/packages\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-shared-storage-billing-for-an-organization\n     */\n    \"GET /orgs/{org}/settings/billing/shared-storage\": Operation<\"/orgs/{org}/settings/billing/shared-storage\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization\n     */\n    \"GET /orgs/{org}/team-sync/groups\": Operation<\"/orgs/{org}/team-sync/groups\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#list-teams\n     */\n    \"GET /orgs/{org}/teams\": Operation<\"/orgs/{org}/teams\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#get-a-team-by-name\n     */\n    \"GET /orgs/{org}/teams/{team_slug}\": Operation<\"/orgs/{org}/teams/{team_slug}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-discussions\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#get-a-discussion\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-discussion-comments\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#get-a-discussion-comment\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\", \"get\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-team-discussion\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\", \"get\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-pending-team-invitations\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/invitations\": Operation<\"/orgs/{org}/teams/{team_slug}/invitations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-team-members\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/members\": Operation<\"/orgs/{org}/teams/{team_slug}/members\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\": Operation<\"/orgs/{org}/teams/{team_slug}/memberships/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#list-team-projects\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/projects\": Operation<\"/orgs/{org}/teams/{team_slug}/projects\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#check-team-permissions-for-a-project\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\": Operation<\"/orgs/{org}/teams/{team_slug}/projects/{project_id}\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#list-team-repositories\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/repos\": Operation<\"/orgs/{org}/teams/{team_slug}/repos\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#check-team-permissions-for-a-repository\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\": Operation<\"/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\": Operation<\"/orgs/{org}/teams/{team_slug}/team-sync/group-mappings\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#list-child-teams\n     */\n    \"GET /orgs/{org}/teams/{team_slug}/teams\": Operation<\"/orgs/{org}/teams/{team_slug}/teams\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#get-a-project-card\n     */\n    \"GET /projects/columns/cards/{card_id}\": Operation<\"/projects/columns/cards/{card_id}\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#get-a-project-column\n     */\n    \"GET /projects/columns/{column_id}\": Operation<\"/projects/columns/{column_id}\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#list-project-cards\n     */\n    \"GET /projects/columns/{column_id}/cards\": Operation<\"/projects/columns/{column_id}/cards\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#get-a-project\n     */\n    \"GET /projects/{project_id}\": Operation<\"/projects/{project_id}\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#list-project-collaborators\n     */\n    \"GET /projects/{project_id}/collaborators\": Operation<\"/projects/{project_id}/collaborators\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user\n     */\n    \"GET /projects/{project_id}/collaborators/{username}/permission\": Operation<\"/projects/{project_id}/collaborators/{username}/permission\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#list-project-columns\n     */\n    \"GET /projects/{project_id}/columns\": Operation<\"/projects/{project_id}/columns\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/rate_limit/#get-rate-limit-status-for-the-authenticated-user\n     */\n    \"GET /rate_limit\": Operation<\"/rate_limit\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#get-a-repository\n     */\n    \"GET /repos/{owner}/{repo}\": Operation<\"/repos/{owner}/{repo}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/artifacts\": Operation<\"/repos/{owner}/{repo}/actions/artifacts\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-an-artifact\n     */\n    \"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\": Operation<\"/repos/{owner}/{repo}/actions/artifacts/{artifact_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#download-an-artifact\n     */\n    \"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\": Operation<\"/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run\n     */\n    \"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\": Operation<\"/repos/{owner}/{repo}/actions/jobs/{job_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run\n     */\n    \"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\": Operation<\"/repos/{owner}/{repo}/actions/jobs/{job_id}/logs\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/permissions\": Operation<\"/repos/{owner}/{repo}/actions/permissions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\": Operation<\"/repos/{owner}/{repo}/actions/permissions/selected-actions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/runners\": Operation<\"/repos/{owner}/{repo}/actions/runners\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/runners/downloads\": Operation<\"/repos/{owner}/{repo}/actions/runners/downloads\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\": Operation<\"/repos/{owner}/{repo}/actions/runners/{runner_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs\": Operation<\"/repos/{owner}/{repo}/actions/runs\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-a-workflow-run\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}/jobs\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#download-workflow-run-logs\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}/logs\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-workflow-run-usage\n     */\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}/timing\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-repository-secrets\n     */\n    \"GET /repos/{owner}/{repo}/actions/secrets\": Operation<\"/repos/{owner}/{repo}/actions/secrets\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-a-repository-public-key\n     */\n    \"GET /repos/{owner}/{repo}/actions/secrets/public-key\": Operation<\"/repos/{owner}/{repo}/actions/secrets/public-key\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-a-repository-secret\n     */\n    \"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\": Operation<\"/repos/{owner}/{repo}/actions/secrets/{secret_name}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-repository-workflows\n     */\n    \"GET /repos/{owner}/{repo}/actions/workflows\": Operation<\"/repos/{owner}/{repo}/actions/workflows\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-a-workflow\n     */\n    \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\": Operation<\"/repos/{owner}/{repo}/actions/workflows/{workflow_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#list-workflow-runs\n     */\n    \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\": Operation<\"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#get-workflow-usage\n     */\n    \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\": Operation<\"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-assignees\n     */\n    \"GET /repos/{owner}/{repo}/assignees\": Operation<\"/repos/{owner}/{repo}/assignees\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned\n     */\n    \"GET /repos/{owner}/{repo}/assignees/{assignee}\": Operation<\"/repos/{owner}/{repo}/assignees/{assignee}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-branches\n     */\n    \"GET /repos/{owner}/{repo}/branches\": Operation<\"/repos/{owner}/{repo}/branches\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-branch\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}\": Operation<\"/repos/{owner}/{repo}/branches/{branch}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-branch-protection\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-admin-branch-protection\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-pull-request-review-protection\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-commit-signature-protection\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", \"get\", \"zzzax\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-status-checks-protection\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-all-status-check-contexts\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-access-restrictions\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-apps-with-access-to-the-protected-branch\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-teams-with-access-to-the-protected-branch\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-users-with-access-to-the-protected-branch\n     */\n    \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#get-a-check-run\n     */\n    \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\": Operation<\"/repos/{owner}/{repo}/check-runs/{check_run_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#list-check-run-annotations\n     */\n    \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\": Operation<\"/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#get-a-check-suite\n     */\n    \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\": Operation<\"/repos/{owner}/{repo}/check-suites/{check_suite_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite\n     */\n    \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\": Operation<\"/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/code-scanning/alerts\": Operation<\"/repos/{owner}/{repo}/code-scanning/alerts\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/code-scanning/#get-a-code-scanning-alert\n     * @deprecated \"alert_id\" is now \"alert_number\"\n     */\n    \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_id}\": Operation<\"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/code-scanning/#get-a-code-scanning-alert\n     */\n    \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\": Operation<\"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/code-scanning/#list-recent-analyses\n     */\n    \"GET /repos/{owner}/{repo}/code-scanning/analyses\": Operation<\"/repos/{owner}/{repo}/code-scanning/analyses\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-repository-collaborators\n     */\n    \"GET /repos/{owner}/{repo}/collaborators\": Operation<\"/repos/{owner}/{repo}/collaborators\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#check-if-a-user-is-a-repository-collaborator\n     */\n    \"GET /repos/{owner}/{repo}/collaborators/{username}\": Operation<\"/repos/{owner}/{repo}/collaborators/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-repository-permissions-for-a-user\n     */\n    \"GET /repos/{owner}/{repo}/collaborators/{username}/permission\": Operation<\"/repos/{owner}/{repo}/collaborators/{username}/permission\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-commit-comments-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/comments\": Operation<\"/repos/{owner}/{repo}/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-commit-comment\n     */\n    \"GET /repos/{owner}/{repo}/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/comments/{comment_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-commit-comment\n     */\n    \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\": Operation<\"/repos/{owner}/{repo}/comments/{comment_id}/reactions\", \"get\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-commits\n     */\n    \"GET /repos/{owner}/{repo}/commits\": Operation<\"/repos/{owner}/{repo}/commits\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-branches-for-head-commit\n     */\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\": Operation<\"/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\", \"get\", \"groot\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-commit-comments\n     */\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\": Operation<\"/repos/{owner}/{repo}/commits/{commit_sha}/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-pull-requests-associated-with-a-commit\n     */\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\": Operation<\"/repos/{owner}/{repo}/commits/{commit_sha}/pulls\", \"get\", \"groot\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-commit\n     */\n    \"GET /repos/{owner}/{repo}/commits/{ref}\": Operation<\"/repos/{owner}/{repo}/commits/{ref}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference\n     */\n    \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\": Operation<\"/repos/{owner}/{repo}/commits/{ref}/check-runs\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference\n     */\n    \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\": Operation<\"/repos/{owner}/{repo}/commits/{ref}/check-suites\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-the-combined-status-for-a-specific-reference\n     */\n    \"GET /repos/{owner}/{repo}/commits/{ref}/status\": Operation<\"/repos/{owner}/{repo}/commits/{ref}/status\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-commit-statuses-for-a-reference\n     */\n    \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\": Operation<\"/repos/{owner}/{repo}/commits/{ref}/statuses\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/community/code_of_conduct\": Operation<\"/repos/{owner}/{repo}/community/code_of_conduct\", \"get\", \"scarlet-witch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-community-profile-metrics\n     */\n    \"GET /repos/{owner}/{repo}/community/profile\": Operation<\"/repos/{owner}/{repo}/community/profile\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#compare-two-commits\n     */\n    \"GET /repos/{owner}/{repo}/compare/{base}...{head}\": Operation<\"/repos/{owner}/{repo}/compare/{base}...{head}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-repository-content\n     */\n    \"GET /repos/{owner}/{repo}/contents/{path}\": Operation<\"/repos/{owner}/{repo}/contents/{path}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repository-contributors\n     */\n    \"GET /repos/{owner}/{repo}/contributors\": Operation<\"/repos/{owner}/{repo}/contributors\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-deployments\n     */\n    \"GET /repos/{owner}/{repo}/deployments\": Operation<\"/repos/{owner}/{repo}/deployments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-deployment\n     */\n    \"GET /repos/{owner}/{repo}/deployments/{deployment_id}\": Operation<\"/repos/{owner}/{repo}/deployments/{deployment_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-deployment-statuses\n     */\n    \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\": Operation<\"/repos/{owner}/{repo}/deployments/{deployment_id}/statuses\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-deployment-status\n     */\n    \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\": Operation<\"/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repository-events\n     */\n    \"GET /repos/{owner}/{repo}/events\": Operation<\"/repos/{owner}/{repo}/events\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-forks\n     */\n    \"GET /repos/{owner}/{repo}/forks\": Operation<\"/repos/{owner}/{repo}/forks\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#get-a-blob\n     */\n    \"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\": Operation<\"/repos/{owner}/{repo}/git/blobs/{file_sha}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#get-a-commit\n     */\n    \"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\": Operation<\"/repos/{owner}/{repo}/git/commits/{commit_sha}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#list-matching-references\n     */\n    \"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\": Operation<\"/repos/{owner}/{repo}/git/matching-refs/{ref}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#get-a-reference\n     */\n    \"GET /repos/{owner}/{repo}/git/ref/{ref}\": Operation<\"/repos/{owner}/{repo}/git/ref/{ref}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#get-a-tag\n     */\n    \"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\": Operation<\"/repos/{owner}/{repo}/git/tags/{tag_sha}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#get-a-tree\n     */\n    \"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\": Operation<\"/repos/{owner}/{repo}/git/trees/{tree_sha}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-repository-webhooks\n     */\n    \"GET /repos/{owner}/{repo}/hooks\": Operation<\"/repos/{owner}/{repo}/hooks\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-repository-webhook\n     */\n    \"GET /repos/{owner}/{repo}/hooks/{hook_id}\": Operation<\"/repos/{owner}/{repo}/hooks/{hook_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos#get-a-webhook-configuration-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\": Operation<\"/repos/{owner}/{repo}/hooks/{hook_id}/config\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#get-an-import-status\n     */\n    \"GET /repos/{owner}/{repo}/import\": Operation<\"/repos/{owner}/{repo}/import\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#get-commit-authors\n     */\n    \"GET /repos/{owner}/{repo}/import/authors\": Operation<\"/repos/{owner}/{repo}/import/authors\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#get-large-files\n     */\n    \"GET /repos/{owner}/{repo}/import/large_files\": Operation<\"/repos/{owner}/{repo}/import/large_files\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#get-a-repository-installation-for-the-authenticated-app\n     */\n    \"GET /repos/{owner}/{repo}/installation\": Operation<\"/repos/{owner}/{repo}/installation\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/interaction-limits\": Operation<\"/repos/{owner}/{repo}/interaction-limits\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-repository-invitations\n     */\n    \"GET /repos/{owner}/{repo}/invitations\": Operation<\"/repos/{owner}/{repo}/invitations\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#list-repository-issues\n     */\n    \"GET /repos/{owner}/{repo}/issues\": Operation<\"/repos/{owner}/{repo}/issues\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/issues/comments\": Operation<\"/repos/{owner}/{repo}/issues/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#get-an-issue-comment\n     */\n    \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/issues/comments/{comment_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-an-issue-comment\n     */\n    \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\": Operation<\"/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\", \"get\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/issues/events\": Operation<\"/repos/{owner}/{repo}/issues/events\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#get-an-issue-event\n     */\n    \"GET /repos/{owner}/{repo}/issues/events/{event_id}\": Operation<\"/repos/{owner}/{repo}/issues/events/{event_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#get-an-issue\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-issue-comments\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-issue-events\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/events\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-labels-for-an-issue\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/labels\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-an-issue\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/reactions\", \"get\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue\n     */\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/timeline\", \"get\", \"mockingbird\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-deploy-keys\n     */\n    \"GET /repos/{owner}/{repo}/keys\": Operation<\"/repos/{owner}/{repo}/keys\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-deploy-key\n     */\n    \"GET /repos/{owner}/{repo}/keys/{key_id}\": Operation<\"/repos/{owner}/{repo}/keys/{key_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-labels-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/labels\": Operation<\"/repos/{owner}/{repo}/labels\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#get-a-label\n     */\n    \"GET /repos/{owner}/{repo}/labels/{name}\": Operation<\"/repos/{owner}/{repo}/labels/{name}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repository-languages\n     */\n    \"GET /repos/{owner}/{repo}/languages\": Operation<\"/repos/{owner}/{repo}/languages\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/licenses/#get-the-license-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/license\": Operation<\"/repos/{owner}/{repo}/license\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-milestones\n     */\n    \"GET /repos/{owner}/{repo}/milestones\": Operation<\"/repos/{owner}/{repo}/milestones\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#get-a-milestone\n     */\n    \"GET /repos/{owner}/{repo}/milestones/{milestone_number}\": Operation<\"/repos/{owner}/{repo}/milestones/{milestone_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone\n     */\n    \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\": Operation<\"/repos/{owner}/{repo}/milestones/{milestone_number}/labels\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user\n     */\n    \"GET /repos/{owner}/{repo}/notifications\": Operation<\"/repos/{owner}/{repo}/notifications\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-github-pages-site\n     */\n    \"GET /repos/{owner}/{repo}/pages\": Operation<\"/repos/{owner}/{repo}/pages\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-github-pages-builds\n     */\n    \"GET /repos/{owner}/{repo}/pages/builds\": Operation<\"/repos/{owner}/{repo}/pages/builds\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-latest-pages-build\n     */\n    \"GET /repos/{owner}/{repo}/pages/builds/latest\": Operation<\"/repos/{owner}/{repo}/pages/builds/latest\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-github-pages-build\n     */\n    \"GET /repos/{owner}/{repo}/pages/builds/{build_id}\": Operation<\"/repos/{owner}/{repo}/pages/builds/{build_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#list-repository-projects\n     */\n    \"GET /repos/{owner}/{repo}/projects\": Operation<\"/repos/{owner}/{repo}/projects\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#list-pull-requests\n     */\n    \"GET /repos/{owner}/{repo}/pulls\": Operation<\"/repos/{owner}/{repo}/pulls\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/pulls/comments\": Operation<\"/repos/{owner}/{repo}/pulls/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/pulls/comments/{comment_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment\n     */\n    \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\": Operation<\"/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\", \"get\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#get-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#list-commits-on-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/commits\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#list-pull-requests-files\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/files\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#check-if-a-pull-request-has-been-merged\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/merge\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-requested-reviewers-for-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/reviews\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review\n     */\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-repository-readme\n     */\n    \"GET /repos/{owner}/{repo}/readme\": Operation<\"/repos/{owner}/{repo}/readme\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-releases\n     */\n    \"GET /repos/{owner}/{repo}/releases\": Operation<\"/repos/{owner}/{repo}/releases\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-release-asset\n     */\n    \"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\": Operation<\"/repos/{owner}/{repo}/releases/assets/{asset_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-the-latest-release\n     */\n    \"GET /repos/{owner}/{repo}/releases/latest\": Operation<\"/repos/{owner}/{repo}/releases/latest\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name\n     */\n    \"GET /repos/{owner}/{repo}/releases/tags/{tag}\": Operation<\"/repos/{owner}/{repo}/releases/tags/{tag}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-a-release\n     */\n    \"GET /repos/{owner}/{repo}/releases/{release_id}\": Operation<\"/repos/{owner}/{repo}/releases/{release_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-release-assets\n     */\n    \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\": Operation<\"/repos/{owner}/{repo}/releases/{release_id}/assets\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/secret-scanning/alerts\": Operation<\"/repos/{owner}/{repo}/secret-scanning/alerts\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert\n     */\n    \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\": Operation<\"/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-stargazers\n     */\n    \"GET /repos/{owner}/{repo}/stargazers\": Operation<\"/repos/{owner}/{repo}/stargazers\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-the-weekly-commit-activity\n     */\n    \"GET /repos/{owner}/{repo}/stats/code_frequency\": Operation<\"/repos/{owner}/{repo}/stats/code_frequency\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-the-last-year-of-commit-activity\n     */\n    \"GET /repos/{owner}/{repo}/stats/commit_activity\": Operation<\"/repos/{owner}/{repo}/stats/commit_activity\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-all-contributor-commit-activity\n     */\n    \"GET /repos/{owner}/{repo}/stats/contributors\": Operation<\"/repos/{owner}/{repo}/stats/contributors\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-the-weekly-commit-count\n     */\n    \"GET /repos/{owner}/{repo}/stats/participation\": Operation<\"/repos/{owner}/{repo}/stats/participation\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-the-hourly-commit-count-for-each-day\n     */\n    \"GET /repos/{owner}/{repo}/stats/punch_card\": Operation<\"/repos/{owner}/{repo}/stats/punch_card\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-watchers\n     */\n    \"GET /repos/{owner}/{repo}/subscribers\": Operation<\"/repos/{owner}/{repo}/subscribers\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#get-a-repository-subscription\n     */\n    \"GET /repos/{owner}/{repo}/subscription\": Operation<\"/repos/{owner}/{repo}/subscription\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repository-tags\n     */\n    \"GET /repos/{owner}/{repo}/tags\": Operation<\"/repos/{owner}/{repo}/tags\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#download-a-repository-archive\n     */\n    \"GET /repos/{owner}/{repo}/tarball/{ref}\": Operation<\"/repos/{owner}/{repo}/tarball/{ref}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repository-teams\n     */\n    \"GET /repos/{owner}/{repo}/teams\": Operation<\"/repos/{owner}/{repo}/teams\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#get-all-repository-topics\n     */\n    \"GET /repos/{owner}/{repo}/topics\": Operation<\"/repos/{owner}/{repo}/topics\", \"get\", \"mercy\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-repository-clones\n     */\n    \"GET /repos/{owner}/{repo}/traffic/clones\": Operation<\"/repos/{owner}/{repo}/traffic/clones\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-top-referral-paths\n     */\n    \"GET /repos/{owner}/{repo}/traffic/popular/paths\": Operation<\"/repos/{owner}/{repo}/traffic/popular/paths\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-top-referral-sources\n     */\n    \"GET /repos/{owner}/{repo}/traffic/popular/referrers\": Operation<\"/repos/{owner}/{repo}/traffic/popular/referrers\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#get-page-views\n     */\n    \"GET /repos/{owner}/{repo}/traffic/views\": Operation<\"/repos/{owner}/{repo}/traffic/views\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#check-if-vulnerability-alerts-are-enabled-for-a-repository\n     */\n    \"GET /repos/{owner}/{repo}/vulnerability-alerts\": Operation<\"/repos/{owner}/{repo}/vulnerability-alerts\", \"get\", \"dorian\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#download-a-repository-archive\n     */\n    \"GET /repos/{owner}/{repo}/zipball/{ref}\": Operation<\"/repos/{owner}/{repo}/zipball/{ref}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#list-public-repositories\n     */\n    \"GET /repositories\": Operation<\"/repositories\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise\n     */\n    \"GET /scim/v2/enterprises/{enterprise}/Groups\": Operation<\"/scim/v2/enterprises/{enterprise}/Groups\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group\n     */\n    \"GET /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\": Operation<\"/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise\n     */\n    \"GET /scim/v2/enterprises/{enterprise}/Users\": Operation<\"/scim/v2/enterprises/{enterprise}/Users\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user\n     */\n    \"GET /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\": Operation<\"/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/scim/#list-scim-provisioned-identities\n     */\n    \"GET /scim/v2/organizations/{org}/Users\": Operation<\"/scim/v2/organizations/{org}/Users\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/scim/#get-scim-provisioning-information-for-a-user\n     */\n    \"GET /scim/v2/organizations/{org}/Users/{scim_user_id}\": Operation<\"/scim/v2/organizations/{org}/Users/{scim_user_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/search/#search-code\n     */\n    \"GET /search/code\": Operation<\"/search/code\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/search/#search-commits\n     */\n    \"GET /search/commits\": Operation<\"/search/commits\", \"get\", \"cloak\">;\n    /**\n     * @see https://docs.github.com/v3/search/#search-issues-and-pull-requests\n     */\n    \"GET /search/issues\": Operation<\"/search/issues\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/search/#search-labels\n     */\n    \"GET /search/labels\": Operation<\"/search/labels\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/search/#search-repositories\n     */\n    \"GET /search/repositories\": Operation<\"/search/repositories\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/search/#search-topics\n     */\n    \"GET /search/topics\": Operation<\"/search/topics\", \"get\", \"mercy\">;\n    /**\n     * @see https://docs.github.com/v3/search/#search-users\n     */\n    \"GET /search/users\": Operation<\"/search/users\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#get-a-team-legacy\n     */\n    \"GET /teams/{team_id}\": Operation<\"/teams/{team_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-discussions-legacy\n     */\n    \"GET /teams/{team_id}/discussions\": Operation<\"/teams/{team_id}/discussions\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#get-a-discussion-legacy\n     */\n    \"GET /teams/{team_id}/discussions/{discussion_number}\": Operation<\"/teams/{team_id}/discussions/{discussion_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy\n     */\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/comments\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy\n     */\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy\n     */\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\", \"get\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy\n     */\n    \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/reactions\", \"get\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy\n     */\n    \"GET /teams/{team_id}/invitations\": Operation<\"/teams/{team_id}/invitations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-team-members-legacy\n     */\n    \"GET /teams/{team_id}/members\": Operation<\"/teams/{team_id}/members\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#get-team-member-legacy\n     */\n    \"GET /teams/{team_id}/members/{username}\": Operation<\"/teams/{team_id}/members/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy\n     */\n    \"GET /teams/{team_id}/memberships/{username}\": Operation<\"/teams/{team_id}/memberships/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#list-team-projects-legacy\n     */\n    \"GET /teams/{team_id}/projects\": Operation<\"/teams/{team_id}/projects\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#check-team-permissions-for-a-project-legacy\n     */\n    \"GET /teams/{team_id}/projects/{project_id}\": Operation<\"/teams/{team_id}/projects/{project_id}\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#list-team-repositories-legacy\n     */\n    \"GET /teams/{team_id}/repos\": Operation<\"/teams/{team_id}/repos\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#check-team-permissions-for-a-repository-legacy\n     */\n    \"GET /teams/{team_id}/repos/{owner}/{repo}\": Operation<\"/teams/{team_id}/repos/{owner}/{repo}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy\n     */\n    \"GET /teams/{team_id}/team-sync/group-mappings\": Operation<\"/teams/{team_id}/team-sync/group-mappings\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#list-child-teams-legacy\n     */\n    \"GET /teams/{team_id}/teams\": Operation<\"/teams/{team_id}/teams\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/users/#get-the-authenticated-user\n     */\n    \"GET /user\": Operation<\"/user\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user\n     */\n    \"GET /user/blocks\": Operation<\"/user/blocks\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user\n     */\n    \"GET /user/blocks/{username}\": Operation<\"/user/blocks/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user\n     */\n    \"GET /user/emails\": Operation<\"/user/emails\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user\n     */\n    \"GET /user/followers\": Operation<\"/user/followers\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows\n     */\n    \"GET /user/following\": Operation<\"/user/following\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user\n     */\n    \"GET /user/following/{username}\": Operation<\"/user/following/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user\n     */\n    \"GET /user/gpg_keys\": Operation<\"/user/gpg_keys\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user\n     */\n    \"GET /user/gpg_keys/{gpg_key_id}\": Operation<\"/user/gpg_keys/{gpg_key_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token\n     */\n    \"GET /user/installations\": Operation<\"/user/installations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token\n     */\n    \"GET /user/installations/{installation_id}/repositories\": Operation<\"/user/installations/{installation_id}/repositories\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories\n     */\n    \"GET /user/interaction-limits\": Operation<\"/user/interaction-limits\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#list-user-account-issues-assigned-to-the-authenticated-user\n     */\n    \"GET /user/issues\": Operation<\"/user/issues\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user\n     */\n    \"GET /user/keys\": Operation<\"/user/keys\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user\n     */\n    \"GET /user/keys/{key_id}\": Operation<\"/user/keys/{key_id}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user\n     */\n    \"GET /user/marketplace_purchases\": Operation<\"/user/marketplace_purchases\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed\n     */\n    \"GET /user/marketplace_purchases/stubbed\": Operation<\"/user/marketplace_purchases/stubbed\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user\n     */\n    \"GET /user/memberships/orgs\": Operation<\"/user/memberships/orgs\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user\n     */\n    \"GET /user/memberships/orgs/{org}\": Operation<\"/user/memberships/orgs/{org}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#list-user-migrations\n     */\n    \"GET /user/migrations\": Operation<\"/user/migrations\", \"get\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#get-a-user-migration-status\n     */\n    \"GET /user/migrations/{migration_id}\": Operation<\"/user/migrations/{migration_id}\", \"get\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive\n     */\n    \"GET /user/migrations/{migration_id}/archive\": Operation<\"/user/migrations/{migration_id}/archive\", \"get\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#list-repositories-for-a-user-migration\n     */\n    \"GET /user/migrations/{migration_id}/repositories\": Operation<\"/user/migrations/{migration_id}/repositories\", \"get\", \"wyandotte\">;\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-organizations-for-the-authenticated-user\n     */\n    \"GET /user/orgs\": Operation<\"/user/orgs\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user\n     */\n    \"GET /user/public_emails\": Operation<\"/user/public_emails\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repositories-for-the-authenticated-user\n     */\n    \"GET /user/repos\": Operation<\"/user/repos\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#list-repository-invitations-for-the-authenticated-user\n     */\n    \"GET /user/repository_invitations\": Operation<\"/user/repository_invitations\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user\n     */\n    \"GET /user/starred\": Operation<\"/user/starred\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user\n     */\n    \"GET /user/starred/{owner}/{repo}\": Operation<\"/user/starred/{owner}/{repo}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user\n     */\n    \"GET /user/subscriptions\": Operation<\"/user/subscriptions\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#list-teams-for-the-authenticated-user\n     */\n    \"GET /user/teams\": Operation<\"/user/teams\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/users/#list-users\n     */\n    \"GET /users\": Operation<\"/users\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/users/#get-a-user\n     */\n    \"GET /users/{username}\": Operation<\"/users/{username}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user\n     */\n    \"GET /users/{username}/events\": Operation<\"/users/{username}/events\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user\n     */\n    \"GET /users/{username}/events/orgs/{org}\": Operation<\"/users/{username}/events/orgs/{org}\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-events-for-a-user\n     */\n    \"GET /users/{username}/events/public\": Operation<\"/users/{username}/events/public\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-followers-of-a-user\n     */\n    \"GET /users/{username}/followers\": Operation<\"/users/{username}/followers\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-the-people-a-user-follows\n     */\n    \"GET /users/{username}/following\": Operation<\"/users/{username}/following\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user\n     */\n    \"GET /users/{username}/following/{target_user}\": Operation<\"/users/{username}/following/{target_user}\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#list-gists-for-a-user\n     */\n    \"GET /users/{username}/gists\": Operation<\"/users/{username}/gists\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user\n     */\n    \"GET /users/{username}/gpg_keys\": Operation<\"/users/{username}/gpg_keys\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/users/#get-contextual-information-for-a-user\n     */\n    \"GET /users/{username}/hovercard\": Operation<\"/users/{username}/hovercard\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#get-a-user-installation-for-the-authenticated-app\n     */\n    \"GET /users/{username}/installation\": Operation<\"/users/{username}/installation\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#list-public-keys-for-a-user\n     */\n    \"GET /users/{username}/keys\": Operation<\"/users/{username}/keys\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/orgs/#list-organizations-for-a-user\n     */\n    \"GET /users/{username}/orgs\": Operation<\"/users/{username}/orgs\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#list-user-projects\n     */\n    \"GET /users/{username}/projects\": Operation<\"/users/{username}/projects\", \"get\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user\n     */\n    \"GET /users/{username}/received_events\": Operation<\"/users/{username}/received_events\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user\n     */\n    \"GET /users/{username}/received_events/public\": Operation<\"/users/{username}/received_events/public\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#list-repositories-for-a-user\n     */\n    \"GET /users/{username}/repos\": Operation<\"/users/{username}/repos\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-github-actions-billing-for-a-user\n     */\n    \"GET /users/{username}/settings/billing/actions\": Operation<\"/users/{username}/settings/billing/actions\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-github-packages-billing-for-a-user\n     */\n    \"GET /users/{username}/settings/billing/packages\": Operation<\"/users/{username}/settings/billing/packages\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/billing/#get-shared-storage-billing-for-a-user\n     */\n    \"GET /users/{username}/settings/billing/shared-storage\": Operation<\"/users/{username}/settings/billing/shared-storage\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user\n     */\n    \"GET /users/{username}/starred\": Operation<\"/users/{username}/starred\", \"get\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user\n     */\n    \"GET /users/{username}/subscriptions\": Operation<\"/users/{username}/subscriptions\", \"get\">;\n    /**\n     * @see\n     */\n    \"GET /zen\": Operation<\"/zen\", \"get\">;\n    /**\n     * @see https://docs.github.com/v3/apps#update-a-webhook-configuration-for-an-app\n     */\n    \"PATCH /app/hook/config\": Operation<\"/app/hook/config\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#reset-a-token\n     */\n    \"PATCH /applications/{client_id}/token\": Operation<\"/applications/{client_id}/token\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#update-an-existing-authorization\n     */\n    \"PATCH /authorizations/{authorization_id}\": Operation<\"/authorizations/{authorization_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#update-a-self-hosted-runner-group-for-an-enterprise\n     */\n    \"PATCH /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#update-a-gist\n     */\n    \"PATCH /gists/{gist_id}\": Operation<\"/gists/{gist_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/gists#update-a-gist-comment\n     */\n    \"PATCH /gists/{gist_id}/comments/{comment_id}\": Operation<\"/gists/{gist_id}/comments/{comment_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#mark-a-thread-as-read\n     */\n    \"PATCH /notifications/threads/{thread_id}\": Operation<\"/notifications/threads/{thread_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/orgs/#update-an-organization\n     */\n    \"PATCH /orgs/{org}\": Operation<\"/orgs/{org}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization\n     */\n    \"PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#update-an-organization-webhook\n     */\n    \"PATCH /orgs/{org}/hooks/{hook_id}\": Operation<\"/orgs/{org}/hooks/{hook_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/orgs#update-a-webhook-configuration-for-an-organization\n     */\n    \"PATCH /orgs/{org}/hooks/{hook_id}/config\": Operation<\"/orgs/{org}/hooks/{hook_id}/config\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#update-a-team\n     */\n    \"PATCH /orgs/{org}/teams/{team_slug}\": Operation<\"/orgs/{org}/teams/{team_slug}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#update-a-discussion\n     */\n    \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#update-a-discussion-comment\n     */\n    \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections\n     */\n    \"PATCH /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\": Operation<\"/orgs/{org}/teams/{team_slug}/team-sync/group-mappings\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#update-a-project-card\n     */\n    \"PATCH /projects/columns/cards/{card_id}\": Operation<\"/projects/columns/cards/{card_id}\", \"patch\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#update-a-project-column\n     */\n    \"PATCH /projects/columns/{column_id}\": Operation<\"/projects/columns/{column_id}\", \"patch\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#update-a-project\n     */\n    \"PATCH /projects/{project_id}\": Operation<\"/projects/{project_id}\", \"patch\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#update-a-repository\n     */\n    \"PATCH /repos/{owner}/{repo}\": Operation<\"/repos/{owner}/{repo}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-pull-request-review-protection\n     */\n    \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-status-check-potection\n     */\n    \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#update-a-check-run\n     */\n    \"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\": Operation<\"/repos/{owner}/{repo}/check-runs/{check_run_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites\n     */\n    \"PATCH /repos/{owner}/{repo}/check-suites/preferences\": Operation<\"/repos/{owner}/{repo}/check-suites/preferences\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/code-scanning/#upload-a-code-scanning-alert\n     */\n    \"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\": Operation<\"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-a-commit-comment\n     */\n    \"PATCH /repos/{owner}/{repo}/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/comments/{comment_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#update-a-reference\n     */\n    \"PATCH /repos/{owner}/{repo}/git/refs/{ref}\": Operation<\"/repos/{owner}/{repo}/git/refs/{ref}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-a-repository-webhook\n     */\n    \"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\": Operation<\"/repos/{owner}/{repo}/hooks/{hook_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/repos#update-a-webhook-configuration-for-a-repository\n     */\n    \"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\": Operation<\"/repos/{owner}/{repo}/hooks/{hook_id}/config\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#update-an-import\n     */\n    \"PATCH /repos/{owner}/{repo}/import\": Operation<\"/repos/{owner}/{repo}/import\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#map-a-commit-author\n     */\n    \"PATCH /repos/{owner}/{repo}/import/authors/{author_id}\": Operation<\"/repos/{owner}/{repo}/import/authors/{author_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#update-git-lfs-preference\n     */\n    \"PATCH /repos/{owner}/{repo}/import/lfs\": Operation<\"/repos/{owner}/{repo}/import/lfs\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-a-repository-invitation\n     */\n    \"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\": Operation<\"/repos/{owner}/{repo}/invitations/{invitation_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#update-an-issue-comment\n     */\n    \"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/issues/comments/{comment_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#update-an-issue\n     */\n    \"PATCH /repos/{owner}/{repo}/issues/{issue_number}\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#update-a-label\n     */\n    \"PATCH /repos/{owner}/{repo}/labels/{name}\": Operation<\"/repos/{owner}/{repo}/labels/{name}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#update-a-milestone\n     */\n    \"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\": Operation<\"/repos/{owner}/{repo}/milestones/{milestone_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request\n     */\n    \"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\": Operation<\"/repos/{owner}/{repo}/pulls/comments/{comment_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#update-a-pull-request\n     */\n    \"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-a-release-asset\n     */\n    \"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\": Operation<\"/repos/{owner}/{repo}/releases/assets/{asset_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-a-release\n     */\n    \"PATCH /repos/{owner}/{repo}/releases/{release_id}\": Operation<\"/repos/{owner}/{repo}/releases/{release_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert\n     */\n    \"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\": Operation<\"/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-group\n     */\n    \"PATCH /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\": Operation<\"/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-user\n     */\n    \"PATCH /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\": Operation<\"/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/scim/#update-an-attribute-for-a-scim-user\n     */\n    \"PATCH /scim/v2/organizations/{org}/Users/{scim_user_id}\": Operation<\"/scim/v2/organizations/{org}/Users/{scim_user_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#update-a-team-legacy\n     */\n    \"PATCH /teams/{team_id}\": Operation<\"/teams/{team_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#update-a-discussion-legacy\n     */\n    \"PATCH /teams/{team_id}/discussions/{discussion_number}\": Operation<\"/teams/{team_id}/discussions/{discussion_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#update-a-discussion-comment-legacy\n     */\n    \"PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections-legacy\n     */\n    \"PATCH /teams/{team_id}/team-sync/group-mappings\": Operation<\"/teams/{team_id}/team-sync/group-mappings\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/users/#update-the-authenticated-user\n     */\n    \"PATCH /user\": Operation<\"/user\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user\n     */\n    \"PATCH /user/email/visibility\": Operation<\"/user/email/visibility\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user\n     */\n    \"PATCH /user/memberships/orgs/{org}\": Operation<\"/user/memberships/orgs/{org}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#accept-a-repository-invitation\n     */\n    \"PATCH /user/repository_invitations/{invitation_id}\": Operation<\"/user/repository_invitations/{invitation_id}\", \"patch\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#create-a-github-app-from-a-manifest\n     */\n    \"POST /app-manifests/{code}/conversions\": Operation<\"/app-manifests/{code}/conversions\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#create-an-installation-access-token-for-an-app\n     */\n    \"POST /app/installations/{installation_id}/access_tokens\": Operation<\"/app/installations/{installation_id}/access_tokens\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#check-a-token\n     */\n    \"POST /applications/{client_id}/token\": Operation<\"/applications/{client_id}/token\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#create-a-scoped-access-token\n     */\n    \"POST /applications/{client_id}/token/scoped\": Operation<\"/applications/{client_id}/token/scoped\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#reset-an-authorization\n     */\n    \"POST /applications/{client_id}/tokens/{access_token}\": Operation<\"/applications/{client_id}/tokens/{access_token}\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#create-a-new-authorization\n     */\n    \"POST /authorizations\": Operation<\"/authorizations\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#create-a-content-attachment\n     */\n    \"POST /content_references/{content_reference_id}/attachments\": Operation<\"/content_references/{content_reference_id}/attachments\", \"post\", \"corsair\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#create-self-hosted-runner-group-for-an-enterprise\n     */\n    \"POST /enterprises/{enterprise}/actions/runner-groups\": Operation<\"/enterprises/{enterprise}/actions/runner-groups\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#create-a-registration-token-for-an-enterprise\n     */\n    \"POST /enterprises/{enterprise}/actions/runners/registration-token\": Operation<\"/enterprises/{enterprise}/actions/runners/registration-token\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#create-a-remove-token-for-an-enterprise\n     */\n    \"POST /enterprises/{enterprise}/actions/runners/remove-token\": Operation<\"/enterprises/{enterprise}/actions/runners/remove-token\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#create-a-gist\n     */\n    \"POST /gists\": Operation<\"/gists\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/gists#create-a-gist-comment\n     */\n    \"POST /gists/{gist_id}/comments\": Operation<\"/gists/{gist_id}/comments\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#fork-a-gist\n     */\n    \"POST /gists/{gist_id}/forks\": Operation<\"/gists/{gist_id}/forks\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/markdown/#render-a-markdown-document\n     */\n    \"POST /markdown\": Operation<\"/markdown\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode\n     */\n    \"POST /markdown/raw\": Operation<\"/markdown/raw\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization\n     */\n    \"POST /orgs/{org}/actions/runner-groups\": Operation<\"/orgs/{org}/actions/runner-groups\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization\n     */\n    \"POST /orgs/{org}/actions/runners/registration-token\": Operation<\"/orgs/{org}/actions/runners/registration-token\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization\n     */\n    \"POST /orgs/{org}/actions/runners/remove-token\": Operation<\"/orgs/{org}/actions/runners/remove-token\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#create-an-organization-webhook\n     */\n    \"POST /orgs/{org}/hooks\": Operation<\"/orgs/{org}/hooks\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook\n     */\n    \"POST /orgs/{org}/hooks/{hook_id}/pings\": Operation<\"/orgs/{org}/hooks/{hook_id}/pings\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#create-an-organization-invitation\n     */\n    \"POST /orgs/{org}/invitations\": Operation<\"/orgs/{org}/invitations\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#start-an-organization-migration\n     */\n    \"POST /orgs/{org}/migrations\": Operation<\"/orgs/{org}/migrations\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#create-an-organization-project\n     */\n    \"POST /orgs/{org}/projects\": Operation<\"/orgs/{org}/projects\", \"post\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#create-an-organization-repository\n     */\n    \"POST /orgs/{org}/repos\": Operation<\"/orgs/{org}/repos\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#create-a-team\n     */\n    \"POST /orgs/{org}/teams\": Operation<\"/orgs/{org}/teams\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#create-a-discussion\n     */\n    \"POST /orgs/{org}/teams/{team_slug}/discussions\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#create-a-discussion-comment\n     */\n    \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment\n     */\n    \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\", \"post\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#create-reaction-for-a-team-discussion\n     */\n    \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\": Operation<\"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\", \"post\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#move-a-project-card\n     */\n    \"POST /projects/columns/cards/{card_id}/moves\": Operation<\"/projects/columns/cards/{card_id}/moves\", \"post\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#create-a-project-card\n     */\n    \"POST /projects/columns/{column_id}/cards\": Operation<\"/projects/columns/{column_id}/cards\", \"post\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#move-a-project-column\n     */\n    \"POST /projects/columns/{column_id}/moves\": Operation<\"/projects/columns/{column_id}/moves\", \"post\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#create-a-project-column\n     */\n    \"POST /projects/{project_id}/columns\": Operation<\"/projects/{project_id}/columns\", \"post\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository\n     */\n    \"POST /repos/{owner}/{repo}/actions/runners/registration-token\": Operation<\"/repos/{owner}/{repo}/actions/runners/registration-token\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository\n     */\n    \"POST /repos/{owner}/{repo}/actions/runners/remove-token\": Operation<\"/repos/{owner}/{repo}/actions/runners/remove-token\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#cancel-a-workflow-run\n     */\n    \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}/cancel\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#re-run-a-workflow\n     */\n    \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\": Operation<\"/repos/{owner}/{repo}/actions/runs/{run_id}/rerun\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event\n     */\n    \"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\": Operation<\"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#set-admin-branch-protection\n     */\n    \"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-commit-signature-protection\n     */\n    \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\", \"post\", \"zzzax\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#add-status-check-contexts\n     */\n    \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#add-app-access-restrictions\n     */\n    \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#add-team-access-restrictions\n     */\n    \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#add-user-access-restrictions\n     */\n    \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#rename-a-branch\n     */\n    \"POST /repos/{owner}/{repo}/branches/{branch}/rename\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/rename\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#create-a-check-run\n     */\n    \"POST /repos/{owner}/{repo}/check-runs\": Operation<\"/repos/{owner}/{repo}/check-runs\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#create-a-check-suite\n     */\n    \"POST /repos/{owner}/{repo}/check-suites\": Operation<\"/repos/{owner}/{repo}/check-suites\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/checks#rerequest-a-check-suite\n     */\n    \"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\": Operation<\"/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/code-scanning/#upload-a-sarif-analysis\n     */\n    \"POST /repos/{owner}/{repo}/code-scanning/sarifs\": Operation<\"/repos/{owner}/{repo}/code-scanning/sarifs\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#create-reaction-for-a-commit-comment\n     */\n    \"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\": Operation<\"/repos/{owner}/{repo}/comments/{comment_id}/reactions\", \"post\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-commit-comment\n     */\n    \"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\": Operation<\"/repos/{owner}/{repo}/commits/{commit_sha}/comments\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-deployment\n     */\n    \"POST /repos/{owner}/{repo}/deployments\": Operation<\"/repos/{owner}/{repo}/deployments\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-deployment-status\n     */\n    \"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\": Operation<\"/repos/{owner}/{repo}/deployments/{deployment_id}/statuses\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#create-a-repository-dispatch-event\n     */\n    \"POST /repos/{owner}/{repo}/dispatches\": Operation<\"/repos/{owner}/{repo}/dispatches\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-fork\n     */\n    \"POST /repos/{owner}/{repo}/forks\": Operation<\"/repos/{owner}/{repo}/forks\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#create-a-blob\n     */\n    \"POST /repos/{owner}/{repo}/git/blobs\": Operation<\"/repos/{owner}/{repo}/git/blobs\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#create-a-commit\n     */\n    \"POST /repos/{owner}/{repo}/git/commits\": Operation<\"/repos/{owner}/{repo}/git/commits\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#create-a-reference\n     */\n    \"POST /repos/{owner}/{repo}/git/refs\": Operation<\"/repos/{owner}/{repo}/git/refs\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#create-a-tag-object\n     */\n    \"POST /repos/{owner}/{repo}/git/tags\": Operation<\"/repos/{owner}/{repo}/git/tags\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/git#create-a-tree\n     */\n    \"POST /repos/{owner}/{repo}/git/trees\": Operation<\"/repos/{owner}/{repo}/git/trees\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-repository-webhook\n     */\n    \"POST /repos/{owner}/{repo}/hooks\": Operation<\"/repos/{owner}/{repo}/hooks\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#ping-a-repository-webhook\n     */\n    \"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\": Operation<\"/repos/{owner}/{repo}/hooks/{hook_id}/pings\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#test-the-push-repository-webhook\n     */\n    \"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\": Operation<\"/repos/{owner}/{repo}/hooks/{hook_id}/tests\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#create-an-issue\n     */\n    \"POST /repos/{owner}/{repo}/issues\": Operation<\"/repos/{owner}/{repo}/issues\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#create-reaction-for-an-issue-comment\n     */\n    \"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\": Operation<\"/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\", \"post\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#add-assignees-to-an-issue\n     */\n    \"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/assignees\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#create-an-issue-comment\n     */\n    \"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/comments\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#add-labels-to-an-issue\n     */\n    \"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/labels\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#create-reaction-for-an-issue\n     */\n    \"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/reactions\", \"post\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-deploy-key\n     */\n    \"POST /repos/{owner}/{repo}/keys\": Operation<\"/repos/{owner}/{repo}/keys\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#create-a-label\n     */\n    \"POST /repos/{owner}/{repo}/labels\": Operation<\"/repos/{owner}/{repo}/labels\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#merge-a-branch\n     */\n    \"POST /repos/{owner}/{repo}/merges\": Operation<\"/repos/{owner}/{repo}/merges\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#create-a-milestone\n     */\n    \"POST /repos/{owner}/{repo}/milestones\": Operation<\"/repos/{owner}/{repo}/milestones\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-github-pages-site\n     */\n    \"POST /repos/{owner}/{repo}/pages\": Operation<\"/repos/{owner}/{repo}/pages\", \"post\", \"switcheroo\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#request-a-github-pages-build\n     */\n    \"POST /repos/{owner}/{repo}/pages/builds\": Operation<\"/repos/{owner}/{repo}/pages/builds\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#create-a-repository-project\n     */\n    \"POST /repos/{owner}/{repo}/projects\": Operation<\"/repos/{owner}/{repo}/projects\", \"post\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#create-a-pull-request\n     */\n    \"POST /repos/{owner}/{repo}/pulls\": Operation<\"/repos/{owner}/{repo}/pulls\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment\n     */\n    \"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\": Operation<\"/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\", \"post\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request\n     */\n    \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/comments\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#create-a-reply-for-a-review-comment\n     */\n    \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request\n     */\n    \"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request\n     */\n    \"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/reviews\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request\n     */\n    \"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-release\n     */\n    \"POST /repos/{owner}/{repo}/releases\": Operation<\"/repos/{owner}/{repo}/releases\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-a-commit-status\n     */\n    \"POST /repos/{owner}/{repo}/statuses/{sha}\": Operation<\"/repos/{owner}/{repo}/statuses/{sha}\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#transfer-a-repository\n     */\n    \"POST /repos/{owner}/{repo}/transfer\": Operation<\"/repos/{owner}/{repo}/transfer\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#create-a-repository-using-a-template\n     */\n    \"POST /repos/{template_owner}/{template_repo}/generate\": Operation<\"/repos/{template_owner}/{template_repo}/generate\", \"post\", \"baptiste\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-group-and-invite-users\n     */\n    \"POST /scim/v2/enterprises/{enterprise}/Groups\": Operation<\"/scim/v2/enterprises/{enterprise}/Groups\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#provision-and-invite-a-scim-enterprise-user\n     */\n    \"POST /scim/v2/enterprises/{enterprise}/Users\": Operation<\"/scim/v2/enterprises/{enterprise}/Users\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/scim/#provision-and-invite-a-scim-user\n     */\n    \"POST /scim/v2/organizations/{org}/Users\": Operation<\"/scim/v2/organizations/{org}/Users\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#create-a-discussion-legacy\n     */\n    \"POST /teams/{team_id}/discussions\": Operation<\"/teams/{team_id}/discussions\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy\n     */\n    \"POST /teams/{team_id}/discussions/{discussion_number}/comments\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/comments\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy\n     */\n    \"POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\", \"post\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy\n     */\n    \"POST /teams/{team_id}/discussions/{discussion_number}/reactions\": Operation<\"/teams/{team_id}/discussions/{discussion_number}/reactions\", \"post\", \"squirrel-girl\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user\n     */\n    \"POST /user/emails\": Operation<\"/user/emails\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user\n     */\n    \"POST /user/gpg_keys\": Operation<\"/user/gpg_keys\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user\n     */\n    \"POST /user/keys\": Operation<\"/user/keys\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#start-a-user-migration\n     */\n    \"POST /user/migrations\": Operation<\"/user/migrations\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/projects/#create-a-user-project\n     */\n    \"POST /user/projects\": Operation<\"/user/projects\", \"post\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#create-a-repository-for-the-authenticated-user\n     */\n    \"POST /user/repos\": Operation<\"/user/repos\", \"post\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#upload-a-release-asset\n     */\n    \"POST {origin}/repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\": Operation<\"/repos/{owner}/{repo}/releases/{release_id}/assets\", \"post\">;\n    /**\n     * @see https://docs.github.com/v3/apps/#suspend-an-app-installation\n     */\n    \"PUT /app/installations/{installation_id}/suspended\": Operation<\"/app/installations/{installation_id}/suspended\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app\n     */\n    \"PUT /authorizations/clients/{client_id}\": Operation<\"/authorizations/clients/{client_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app-and-fingerprint\n     */\n    \"PUT /authorizations/clients/{client_id}/{fingerprint}\": Operation<\"/authorizations/clients/{client_id}/{fingerprint}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#set-github-actions-permissions-for-an-enterprise\n     */\n    \"PUT /enterprises/{enterprise}/actions/permissions\": Operation<\"/enterprises/{enterprise}/actions/permissions\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#set-selected-organizations-enabled-for-github-actions-in-an-enterprise\n     */\n    \"PUT /enterprises/{enterprise}/actions/permissions/organizations\": Operation<\"/enterprises/{enterprise}/actions/permissions/organizations\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#enable-a-selected-organization-for-github-actions-in-an-enterprise\n     */\n    \"PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}\": Operation<\"/enterprises/{enterprise}/actions/permissions/organizations/{org_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#set-allowed-actions-for-an-enterprise\n     */\n    \"PUT /enterprises/{enterprise}/actions/permissions/selected-actions\": Operation<\"/enterprises/{enterprise}/actions/permissions/selected-actions\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise\n     */\n    \"PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise\n     */\n    \"PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#set-self-hosted-runners-in-a-group-for-an-enterprise\n     */\n    \"PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#add-a-self-hosted-runner-to-a-group-for-an-enterprise\n     */\n    \"PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\": Operation<\"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/gists/#star-a-gist\n     */\n    \"PUT /gists/{gist_id}/star\": Operation<\"/gists/{gist_id}/star\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#mark-notifications-as-read\n     */\n    \"PUT /notifications\": Operation<\"/notifications\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#set-a-thread-subscription\n     */\n    \"PUT /notifications/threads/{thread_id}/subscription\": Operation<\"/notifications/threads/{thread_id}/subscription\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization\n     */\n    \"PUT /orgs/{org}/actions/permissions\": Operation<\"/orgs/{org}/actions/permissions\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization\n     */\n    \"PUT /orgs/{org}/actions/permissions/repositories\": Operation<\"/orgs/{org}/actions/permissions/repositories\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization\n     */\n    \"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\": Operation<\"/orgs/{org}/actions/permissions/repositories/{repository_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization\n     */\n    \"PUT /orgs/{org}/actions/permissions/selected-actions\": Operation<\"/orgs/{org}/actions/permissions/selected-actions\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization\n     */\n    \"PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization\n     */\n    \"PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization\n     */\n    \"PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}/runners\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization\n     */\n    \"PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\": Operation<\"/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret\n     */\n    \"PUT /orgs/{org}/actions/secrets/{secret_name}\": Operation<\"/orgs/{org}/actions/secrets/{secret_name}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret\n     */\n    \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\": Operation<\"/orgs/{org}/actions/secrets/{secret_name}/repositories\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret\n     */\n    \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\": Operation<\"/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#block-a-user-from-an-organization\n     */\n    \"PUT /orgs/{org}/blocks/{username}\": Operation<\"/orgs/{org}/blocks/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization\n     */\n    \"PUT /orgs/{org}/interaction-limits\": Operation<\"/orgs/{org}/interaction-limits\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#set-organization-membership-for-a-user\n     */\n    \"PUT /orgs/{org}/memberships/{username}\": Operation<\"/orgs/{org}/memberships/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator\n     */\n    \"PUT /orgs/{org}/outside_collaborators/{username}\": Operation<\"/orgs/{org}/outside_collaborators/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user\n     */\n    \"PUT /orgs/{org}/public_members/{username}\": Operation<\"/orgs/{org}/public_members/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user\n     */\n    \"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\": Operation<\"/orgs/{org}/teams/{team_slug}/memberships/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#add-or-update-team-project-permissions\n     */\n    \"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\": Operation<\"/orgs/{org}/teams/{team_slug}/projects/{project_id}\", \"put\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#add-or-update-team-repository-permissions\n     */\n    \"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\": Operation<\"/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/projects#add-project-collaborator\n     */\n    \"PUT /projects/{project_id}/collaborators/{username}\": Operation<\"/projects/{project_id}/collaborators/{username}\", \"put\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository\n     */\n    \"PUT /repos/{owner}/{repo}/actions/permissions\": Operation<\"/repos/{owner}/{repo}/actions/permissions\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository\n     */\n    \"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\": Operation<\"/repos/{owner}/{repo}/actions/permissions/selected-actions\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret\n     */\n    \"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\": Operation<\"/repos/{owner}/{repo}/actions/secrets/{secret_name}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#disable-a-workflow\n     */\n    \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\": Operation<\"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/actions#enable-a-workflow\n     */\n    \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\": Operation<\"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#enable-automated-security-fixes\n     */\n    \"PUT /repos/{owner}/{repo}/automated-security-fixes\": Operation<\"/repos/{owner}/{repo}/automated-security-fixes\", \"put\", \"london\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-branch-protection\n     */\n    \"PUT /repos/{owner}/{repo}/branches/{branch}/protection\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#set-status-check-contexts\n     */\n    \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#set-app-access-restrictions\n     */\n    \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#set-team-access-restrictions\n     */\n    \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#set-user-access-restrictions\n     */\n    \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\": Operation<\"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#add-a-repository-collaborator\n     */\n    \"PUT /repos/{owner}/{repo}/collaborators/{username}\": Operation<\"/repos/{owner}/{repo}/collaborators/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#create-or-update-file-contents\n     */\n    \"PUT /repos/{owner}/{repo}/contents/{path}\": Operation<\"/repos/{owner}/{repo}/contents/{path}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/migrations#start-an-import\n     */\n    \"PUT /repos/{owner}/{repo}/import\": Operation<\"/repos/{owner}/{repo}/import\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository\n     */\n    \"PUT /repos/{owner}/{repo}/interaction-limits\": Operation<\"/repos/{owner}/{repo}/interaction-limits\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/issues#set-labels-for-an-issue\n     */\n    \"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/labels\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/issues/#lock-an-issue\n     */\n    \"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\": Operation<\"/repos/{owner}/{repo}/issues/{issue_number}/lock\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read\n     */\n    \"PUT /repos/{owner}/{repo}/notifications\": Operation<\"/repos/{owner}/{repo}/notifications\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/repos#update-information-about-a-github-pages-site\n     */\n    \"PUT /repos/{owner}/{repo}/pages\": Operation<\"/repos/{owner}/{repo}/pages\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#merge-a-pull-request\n     */\n    \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/merge\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#update-a-review-for-a-pull-request\n     */\n    \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/pulls#dismiss-a-review-for-a-pull-request\n     */\n    \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/pulls/#update-a-pull-request-branch\n     */\n    \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\": Operation<\"/repos/{owner}/{repo}/pulls/{pull_number}/update-branch\", \"put\", \"lydian\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#set-a-repository-subscription\n     */\n    \"PUT /repos/{owner}/{repo}/subscription\": Operation<\"/repos/{owner}/{repo}/subscription\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#replace-all-repository-topics\n     */\n    \"PUT /repos/{owner}/{repo}/topics\": Operation<\"/repos/{owner}/{repo}/topics\", \"put\", \"mercy\">;\n    /**\n     * @see https://docs.github.com/v3/repos/#enable-vulnerability-alerts\n     */\n    \"PUT /repos/{owner}/{repo}/vulnerability-alerts\": Operation<\"/repos/{owner}/{repo}/vulnerability-alerts\", \"put\", \"dorian\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-group\n     */\n    \"PUT /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\": Operation<\"/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user\n     */\n    \"PUT /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\": Operation<\"/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/scim/#set-scim-information-for-a-provisioned-user\n     */\n    \"PUT /scim/v2/organizations/{org}/Users/{scim_user_id}\": Operation<\"/scim/v2/organizations/{org}/Users/{scim_user_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#add-team-member-legacy\n     */\n    \"PUT /teams/{team_id}/members/{username}\": Operation<\"/teams/{team_id}/members/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy\n     */\n    \"PUT /teams/{team_id}/memberships/{username}\": Operation<\"/teams/{team_id}/memberships/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#add-or-update-team-project-permissions-legacy\n     */\n    \"PUT /teams/{team_id}/projects/{project_id}\": Operation<\"/teams/{team_id}/projects/{project_id}\", \"put\", \"inertia\">;\n    /**\n     * @see https://docs.github.com/v3/teams/#add-or-update-team-repository-permissions-legacy\n     */\n    \"PUT /teams/{team_id}/repos/{owner}/{repo}\": Operation<\"/teams/{team_id}/repos/{owner}/{repo}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#block-a-user\n     */\n    \"PUT /user/blocks/{username}\": Operation<\"/user/blocks/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/users#follow-a-user\n     */\n    \"PUT /user/following/{username}\": Operation<\"/user/following/{username}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation\n     */\n    \"PUT /user/installations/{installation_id}/repositories/{repository_id}\": Operation<\"/user/installations/{installation_id}/repositories/{repository_id}\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories\n     */\n    \"PUT /user/interaction-limits\": Operation<\"/user/interaction-limits\", \"put\">;\n    /**\n     * @see https://docs.github.com/rest/reference/activity#star-a-repository-for-the-authenticated-user\n     */\n    \"PUT /user/starred/{owner}/{repo}\": Operation<\"/user/starred/{owner}/{repo}\", \"put\">;\n}\nexport {};\n","node_modules/@octokit/types/dist-web/index.js":"const VERSION = \"6.8.5\";\n\nexport { VERSION };\n//# sourceMappingURL=index.js.map\n"}